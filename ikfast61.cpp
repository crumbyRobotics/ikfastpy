/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2023-03-30 15:51:03.759696
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((0.0255)*x6);
x13=((0.39225)*x1);
x14=((0.09465)*x1);
x15=((1.0)*x6);
x16=((1.0)*x11);
x17=((1.0)*x9);
x18=((0.39225)*x3);
x19=((0.425)*x1);
x20=((1.0)*x3);
x21=((1.0)*x1);
x22=((0.09465)*x3);
x23=((1.0)*x5);
x24=((0.0255)*x5);
x25=(x0*x2);
x26=((-0.3423)*x5);
x27=(x10*x9);
x28=((-0.3423)*x6);
x29=(x10*x2);
x30=((-0.0255)*x5);
x31=(x10*x4);
x32=(x7*x9);
x33=(x0*x4);
x34=(x2*x3);
x35=(x10*x11);
x36=(x0*x11);
x37=((-0.0255)*x6);
x38=(x2*x21);
x39=(x20*x33);
x40=(x20*x31);
x41=(((x1*x4))+x34);
x42=(x38+(((-1.0)*x20*x4)));
x43=((((-1.0)*x21*x4))+(((-1.0)*x2*x20)));
x44=(x41*x5);
x45=(x42*x6);
x46=((((-1.0)*x39))+((x1*x25)));
x47=((((-1.0)*x40))+((x1*x29)));
x48=((((-1.0)*x21*x25))+x39);
x49=((((-1.0)*x21*x29))+x40);
x50=((((-1.0)*x21*x33))+(((-1.0)*x20*x25)));
x51=((((-1.0)*x21*x31))+(((-1.0)*x20*x29)));
x52=(x46*x5);
x53=(x47*x5);
x54=(x49*x6);
x55=(((x42*x5))+((x43*x6)));
x56=(((x50*x6))+x52);
x57=(((x51*x6))+x53);
x58=(((x48*x6))+((x5*x50)));
x59=(x54+((x5*x51)));
x60=(x56*x9);
x61=(x57*x9);
eerot[0]=(((x7*((x35+x60))))+((x58*x8)));
eerot[1]=(((x8*(((((-1.0)*x10*x16))+(((-1.0)*x17*x56))))))+((x58*x7)));
eerot[2]=(((x11*(((((-1.0)*x15*x50))+(((-1.0)*x23*x46))))))+x27);
eetrans[0]=(((x11*((((x26*x46))+((x28*x50))))))+(((0.10915)*x10))+((x5*((((x22*x25))+((x14*x33))))))+(((-1.0)*x13*x25))+((x18*x33))+(((-1.0)*x0*x19))+(((0.3423)*x27))+((x8*(((((-1.0)*x12*x48))+(((-1.0)*x24*x50))))))+((x7*(((((-0.0255)*x60))+(((-0.0255)*x35))))))+((x6*((((x14*x25))+(((-1.0)*x22*x33)))))));
eerot[3]=(((x59*x8))+((x7*(((((-1.0)*x36))+x61)))));
eerot[4]=(((x59*x7))+((x8*((((x0*x16))+(((-1.0)*x17*x57)))))));
eerot[5]=((((-1.0)*x0*x17))+((x11*(((((-1.0)*x15*x51))+(((-1.0)*x23*x47)))))));
eetrans[1]=((((-0.3423)*x0*x9))+((x11*((((x26*x47))+((x28*x51))))))+(((-1.0)*x13*x29))+((x18*x31))+(((-0.10915)*x0))+((x8*((((x37*x49))+((x30*x51))))))+((x6*((((x14*x29))+(((-1.0)*x22*x31))))))+((x7*(((((0.0255)*x36))+(((-0.0255)*x61))))))+(((-1.0)*x10*x19))+((x5*((((x22*x29))+((x14*x31)))))));
eerot[6]=(((x32*((x44+x45))))+((x55*x8)));
eerot[7]=(((x8*x9*(((((-1.0)*x44))+(((-1.0)*x45))))))+((x55*x7)));
eerot[8]=(x11*(((((-1.0)*x15*x42))+(((-1.0)*x23*x41)))));
IkReal x62=((1.0)*x2);
eetrans[2]=((0.089159)+((x8*(((((-1.0)*x12*x43))+(((-1.0)*x24*x42))))))+((x11*((((x26*x41))+((x28*x42))))))+((x5*(((((-1.0)*x14*x62))+((x22*x4))))))+((x6*((((x14*x4))+((x2*x22))))))+(((-0.425)*x3))+(((-1.0)*x18*x62))+((x32*((((x37*x42))+((x30*x41))))))+(((-1.0)*x13*x4)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((0.0255)*r00))+px+(((-0.3423)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.3423)*r12))+(((0.0255)*r10))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.089159)+(((0.0255)*r20))+(((-0.3423)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x63=((1.0)*px);
IkReal x64=((1.0)*pz);
IkReal x65=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x65))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x64)));
rxp0_2=((((-1.0)*r10*x63))+((py*r00)));
rxp1_0=((((-1.0)*r21*x65))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x64)));
rxp1_2=((((-1.0)*r11*x63))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x65)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x64)));
rxp2_2=((((-1.0)*r12*x63))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x66=((0.1893)*npx);
IkReal x67=((0.1893)*npy);
IkReal x68=((0.09465)*r22);
IkReal x69=((0.09465)*r21);
IkReal x70=((-0.09465)*r20);
IkReal x71=((-1.0)*r20);
IkReal x72=((-1.0)*rxp0_2);
IkReal x73=((-0.09465)*r21);
IkReal x74=((-1.0)*r21);
IkReal x75=((-1.0)*rxp1_2);
IkReal x76=((-1.0)*npx);
IkReal x77=((-1.0)*r22);
IkReal x78=((-1.0)*npz);
matrixinvcoeffs[0]=x70;
matrixinvcoeffs[1]=x66;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x71;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x72;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x70;
matrixinvcoeffs[19]=x66;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x71;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x72;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x73;
matrixinvcoeffs[33]=x67;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x74;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x75;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x73;
matrixinvcoeffs[51]=x67;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x74;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x75;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x77;
matrixinvcoeffs[76]=x68;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x78;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x68;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x75;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x73;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x75;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x69;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x71;
matrixinvcoeffs[133]=x76;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x71;
matrixinvcoeffs[151]=x76;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x70;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x77;
matrixinvcoeffs[165]=x78;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x68;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x77;
matrixinvcoeffs[183]=x78;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x74;
matrixinvcoeffs[204]=x69;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x75;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x69;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x76;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x70;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x71;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x70;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x72;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x79=pz*pz;
IkReal x80=pp*pp;
IkReal x81=((0.1893)*pz);
IkReal x82=((1.7)*pz);
IkReal x83=(gclwh15_9*npx);
IkReal x84=(gclwh6_11*r21);
IkReal x85=(pp*r22);
IkReal x86=((0.00702803935125)*r21);
IkReal x87=(gclwh5_9*npz);
IkReal x88=(gclwh8_11*r20);
IkReal x89=(npy*pz);
IkReal x90=((3.60823078949063e-5)*r22);
IkReal x91=(gclwh14_3*rxp0_2);
IkReal x92=((0.000977833645875)*r20);
IkReal x93=(npz*pz);
IkReal x94=((0.000977833645875)*r21);
IkReal x95=(gclwh10_12*r22);
IkReal x96=(gclwh10_2*rxp2_2);
IkReal x97=((0.00076243651125)*rxp1_2);
IkReal x98=((0.00600991575645741)*r20);
IkReal x99=((0.154705425)*rxp1_2);
IkReal x100=((0.017917245)*r21);
IkReal x101=(gclwh6_11*rxp1_2);
IkReal x102=((0.3786)*rxp1_2);
IkReal x103=(gclwh7_0*rxp1_2);
IkReal x104=((0.7572)*rxp1_2);
IkReal x105=((0.154705425)*rxp2_2);
IkReal x106=((2.0)*gclwh11_10);
IkReal x107=(gclwh12_8*r21);
IkReal x108=((0.81725)*pp);
IkReal x109=(pp*pz);
IkReal x110=(gclwh14_2*r20);
IkReal x111=(pp*r21);
IkReal x112=((2.0)*gclwh4_11);
IkReal x113=(gclwh8_12*r20);
IkReal x114=(npx*pz);
IkReal x115=(gclwh14_8*rxp0_2);
IkReal x116=((0.1893)*rxp2_2);
IkReal x117=(gclwh5_9*rxp2_2);
IkReal x118=((0.020662095)*rxp1_2);
IkReal x119=((0.007321434238125)*r21);
IkReal x120=((1.6345)*pz);
IkReal x121=((0.0089586225)*pz);
IkReal x122=(gclwh13_0*r21);
IkReal x123=(gclwh5_9*r22);
IkReal x124=(gclwh11_10*r22);
IkReal x125=(gclwh11_13*r22);
IkReal x126=((1.0)*r21);
IkReal x127=((0.3786)*rxp0_2);
IkReal x128=(gclwh14_14*rxp0_2);
IkReal x129=(pp*r20);
IkReal x130=((0.00195566729175)*r22);
IkReal x131=(gclwh15_10*rxp0_2);
IkReal x132=(gclwh14_8*r20);
IkReal x133=(gclwh12_8*rxp1_2);
IkReal x134=((2.0)*gclwh9_10);
IkReal x135=((2.0)*gclwh15_10);
IkReal x136=(gclwh5_15*rxp2_2);
IkReal x137=((2.0)*gclwh13_10);
IkReal x138=((0.00702803935125)*r20);
IkReal x139=(gclwh13_9*r21);
IkReal x140=(gclwh5_0*r22);
IkReal x141=((0.01464286847625)*r20);
IkReal x142=(gclwh15_1*r20);
IkReal x143=((0.000977833645875)*r22);
IkReal x144=((0.0089586225)*r20);
IkReal x145=((2.0)*gclwh10_11);
IkReal x146=(gclwh5_10*r22);
IkReal x147=((2.0)*pp);
IkReal x148=(gclwh15_9*r20);
IkReal x149=(gclwh1_3*r20);
IkReal x150=((0.00195566729175)*r20);
IkReal x151=(gclwh4_3*rxp2_2);
IkReal x152=((0.2183)*gclwh13_15);
IkReal x153=((2.0)*gclwh7_10);
IkReal x154=(gclwh15_0*r20);
IkReal x155=(gclwh9_0*r20);
IkReal x156=(gclwh15_15*rxp0_2);
IkReal x157=(gclwh2_1*r21);
IkReal x158=((4.0)*gclwh11_10);
IkReal x159=((0.30941085)*rxp0_2);
IkReal x160=(gclwh9_0*rxp0_2);
IkReal x161=(gclwh5_10*rxp2_2);
IkReal x162=((0.2183)*gclwh12_14);
IkReal x163=((0.2183)*gclwh14_14);
IkReal x164=(gclwh4_2*rxp2_2);
IkReal x165=((0.03275)*pp);
IkReal x166=((0.006199575)*rxp1_2);
IkReal x167=(gclwh12_2*rxp1_2);
IkReal x168=(gclwh5_0*rxp2_2);
IkReal x169=((3.60823078949063e-5)*r21);
IkReal x170=(gclwh14_11*rxp0_2);
IkReal x171=((0.020662095)*rxp0_2);
IkReal x172=(gclwh14_8*npx);
IkReal x173=((4.0)*gclwh9_10);
IkReal x174=((0.00195566729175)*r21);
IkReal x175=(gclwh8_12*rxp0_2);
IkReal x176=((0.01464286847625)*r21);
IkReal x177=((0.3786)*rxp2_2);
IkReal x178=((0.01464286847625)*r22);
IkReal x179=(gclwh7_13*r21);
IkReal x180=((4.0)*gclwh7_10);
IkReal x181=(gclwh13_0*rxp1_2);
IkReal x182=((0.1893)*rxp1_2);
IkReal x183=(gclwh6_2*r21);
IkReal x184=(gclwh5_1*rxp2_2);
IkReal x185=(gclwh8_2*rxp0_2);
IkReal x186=(gclwh9_10*r20);
IkReal x187=((4.0)*pp);
IkReal x188=(gclwh15_1*rxp0_2);
IkReal x189=(gclwh9_13*r20);
IkReal x190=((0.0089586225)*r21);
IkReal x191=(gclwh0_0*r20);
IkReal x192=(gclwh10_11*r22);
IkReal x193=((2.0)*gclwh12_11);
IkReal x194=((0.0655)*pz);
IkReal x195=((0.006199575)*rxp2_2);
IkReal x196=(gclwh12_14*rxp1_2);
IkReal x197=(gclwh15_0*rxp0_2);
IkReal x198=((2.0)*npx);
IkReal x199=(gclwh9_13*rxp0_2);
IkReal x200=((1.0)*pp);
IkReal x201=((4.0)*gclwh10_11);
IkReal x202=(gclwh15_9*rxp0_2);
IkReal x203=((3.60823078949063e-5)*r20);
IkReal x204=((0.00702803935125)*r22);
IkReal x205=(gclwh8_2*r20);
IkReal x206=((0.2183)*gclwh5_15);
IkReal x207=(gclwh10_2*r22);
IkReal x208=(gclwh5_1*r22);
IkReal x209=(gclwh13_9*rxp1_2);
IkReal x210=((2.0)*gclwh5_10);
IkReal x211=((0.020662095)*rxp2_2);
IkReal x212=(gclwh4_8*r22);
IkReal x213=((0.017917245)*r20);
IkReal x214=(gclwh7_0*r21);
IkReal x215=((0.00600991575645741)*r21);
IkReal x216=(gclwh11_0*r22);
IkReal x217=(gclwh6_12*r21);
IkReal x218=((0.2183)*gclwh15_15);
IkReal x219=(gclwh11_0*rxp2_2);
IkReal x220=((0.2183)*gclwh4_14);
IkReal x221=(gclwh4_14*rxp2_2);
IkReal x222=(gclwh6_2*rxp1_2);
IkReal x223=((0.1893)*rxp0_2);
IkReal x224=(gclwh4_8*rxp2_2);
IkReal x225=((0.12699240901125)*rxp1_2);
IkReal x226=(gclwh14_2*rxp0_2);
IkReal x227=(gclwh4_3*r22);
IkReal x228=((0.1893)*pp);
IkReal x229=(gclwh13_15*rxp1_2);
IkReal x230=(gclwh1_2*r20);
IkReal x231=((2.0)*gclwh14_11);
IkReal x232=(gclwh4_11*r22);
IkReal x233=((0.020662095)*x128);
IkReal x234=(gclwh6_5*x94);
IkReal x235=(gclwh8_5*x92);
IkReal x236=(gclwh12_14*x118);
IkReal x237=(gclwh10_5*x143);
IkReal x238=(gclwh4_14*x211);
IkReal x239=((0.0089586225)*x84);
IkReal x240=(gclwh12_11*x182);
IkReal x241=((0.017917245)*x133);
IkReal x242=((0.017917245)*x224);
IkReal x243=(gclwh4_11*x116);
IkReal x244=((0.0089586225)*x88);
IkReal x245=((0.1893)*x170);
IkReal x246=((0.0089586225)*x192);
IkReal x247=((0.017917245)*x115);
IkReal x248=((0.017917245)*x117);
IkReal x249=((0.0089586225)*x124);
IkReal x250=((0.1893)*x131);
IkReal x251=((0.017917245)*x209);
IkReal x252=(gclwh9_10*x144);
IkReal x253=((0.017917245)*x202);
IkReal x254=(gclwh13_10*x182);
IkReal x255=(gclwh7_10*x190);
IkReal x256=(gclwh5_10*x116);
IkReal x257=((0.020662095)*x156);
IkReal x258=(gclwh7_7*x94);
IkReal x259=(gclwh9_7*x92);
IkReal x260=(gclwh13_15*x118);
IkReal x261=((0.020662095)*x136);
IkReal x262=(gclwh11_7*x143);
IkReal x263=(gclwh10_5*x211);
IkReal x264=(gclwh8_5*x171);
IkReal x265=(gclwh14_14*x92);
IkReal x266=(gclwh6_5*x118);
IkReal x267=(gclwh4_14*x143);
IkReal x268=(gclwh12_14*x94);
IkReal x269=(gclwh8_11*x223);
IkReal x270=((0.000847933619625)*x107);
IkReal x271=(gclwh12_11*x190);
IkReal x272=(gclwh10_11*x116);
IkReal x273=((0.0089586225)*x232);
IkReal x274=((0.000847933619625)*x212);
IkReal x275=((0.1893)*x101);
IkReal x276=(gclwh14_11*x144);
IkReal x277=((0.000847933619625)*x132);
IkReal x278=(gclwh9_10*x223);
IkReal x279=(gclwh13_10*x190);
IkReal x280=(gclwh11_10*x116);
IkReal x281=((0.000847933619625)*x148);
IkReal x282=((0.0089586225)*x146);
IkReal x283=((0.000847933619625)*x123);
IkReal x284=(gclwh7_10*x182);
IkReal x285=((0.000847933619625)*x139);
IkReal x286=(gclwh15_10*x144);
IkReal x287=(gclwh5_15*x143);
IkReal x288=(gclwh7_7*x118);
IkReal x289=(gclwh13_15*x94);
IkReal x290=(gclwh15_15*x92);
IkReal x291=(gclwh9_7*x171);
IkReal x292=(gclwh11_7*x211);
IkReal x293=((0.017917245)*x192);
IkReal x294=(gclwh14_11*x127);
IkReal x295=((0.017917245)*x88);
IkReal x296=((0.04132419)*x128);
IkReal x297=((0.04132419)*x196);
IkReal x298=((0.04132419)*x221);
IkReal x299=(gclwh4_11*x177);
IkReal x300=((0.017917245)*x84);
IkReal x301=(gclwh12_11*x102);
IkReal x302=((0.04132419)*x136);
IkReal x303=((0.04132419)*x229);
IkReal x304=((0.04132419)*x156);
IkReal x305=((0.017917245)*x186);
IkReal x306=(gclwh15_10*x127);
IkReal x307=((0.017917245)*x124);
IkReal x308=(gclwh7_10*x100);
IkReal x309=((0.3786)*x161);
IkReal x310=(gclwh13_10*x102);
IkReal x311=((0.3786)*x101);
IkReal x312=(gclwh14_11*x213);
IkReal x313=(gclwh14_14*x150);
IkReal x314=(gclwh4_14*x130);
IkReal x315=(gclwh12_14*x174);
IkReal x316=(gclwh14_8*x129);
IkReal x317=((2.0)*x79);
IkReal x318=((1.0)*x80);
IkReal x319=(r21*x80);
IkReal x320=((0.2183)*gclwh10_5*x93);
IkReal x321=((0.2183)*gclwh8_5*x114);
IkReal x322=((0.10915)*gclwh6_5*x111);
IkReal x323=((0.2183)*gclwh6_5*x89);
IkReal x324=((0.10915)*gclwh8_5*x129);
IkReal x325=((0.10915)*gclwh10_5*x85);
IkReal x326=(gclwh12_3*pp*x182);
IkReal x327=(x145*x93);
IkReal x328=(x121*x205);
IkReal x329=((2.0)*gclwh8_11*x114);
IkReal x330=(gclwh10_2*pz*x85);
IkReal x331=(x226*x81);
IkReal x332=(x109*x205);
IkReal x333=(gclwh4_3*pp*x116);
IkReal x334=(x121*x207);
IkReal x335=(x167*x81);
IkReal x336=((2.0)*gclwh6_11*x89);
IkReal x337=(x164*x81);
IkReal x338=(x228*x91);
IkReal x339=(x121*x183);
IkReal x340=(gclwh13_1*pp*x182);
IkReal x341=(x121*x216);
IkReal x342=(x121*x155);
IkReal x343=(gclwh5_1*pp*x116);
IkReal x344=(x197*x81);
IkReal x345=(gclwh11_0*pz*x85);
IkReal x346=(x153*x89);
IkReal x347=(x109*x155);
IkReal x348=(x106*x93);
IkReal x349=(x188*x228);
IkReal x350=(x114*x134);
IkReal x351=(x121*x214);
IkReal x352=(x181*x81);
IkReal x353=(x168*x81);
IkReal x354=((0.10915)*gclwh7_7*x111);
IkReal x355=((0.2183)*gclwh9_7*x114);
IkReal x356=((0.2183)*gclwh11_7*x93);
IkReal x357=((0.10915)*gclwh9_7*x129);
IkReal x358=((0.2183)*gclwh7_7*x89);
IkReal x359=((0.10915)*gclwh11_7*x85);
IkReal x360=((0.10915)*gclwh14_14*x129);
IkReal x361=(x220*x93);
IkReal x362=(x162*x89);
IkReal x363=((0.10915)*gclwh12_14*x111);
IkReal x364=(x114*x163);
IkReal x365=((0.10915)*gclwh4_14*x85);
IkReal x366=((0.09465)*gclwh4_8*x85);
IkReal x367=(x109*x110);
IkReal x368=(gclwh12_3*x319);
IkReal x369=(x222*x81);
IkReal x370=(gclwh3_3*x319);
IkReal x371=(x149*x80);
IkReal x372=(gclwh3_2*r21*x121);
IkReal x373=(x114*x231);
IkReal x374=(x172*x81);
IkReal x375=(x110*x121);
IkReal x376=((0.09465)*pp*x107);
IkReal x377=(x227*x80);
IkReal x378=(x121*x230);
IkReal x379=(x185*x81);
IkReal x380=(x112*x93);
IkReal x381=(gclwh4_2*r22*x121);
IkReal x382=(gclwh4_8*npz*x81);
IkReal x383=(gclwh12_2*r21*x121);
IkReal x384=(x81*x96);
IkReal x385=((0.09465)*x316);
IkReal x386=(x193*x89);
IkReal x387=(gclwh12_8*npy*x81);
IkReal x388=(x142*x80);
IkReal x389=(x81*x87);
IkReal x390=(gclwh5_0*pz*x85);
IkReal x391=(gclwh13_9*npy*x81);
IkReal x392=(x121*x140);
IkReal x393=(x109*x122);
IkReal x394=((0.09465)*gclwh15_9*x129);
IkReal x395=(x114*x135);
IkReal x396=(x121*x122);
IkReal x397=(x157*x80);
IkReal x398=(gclwh2_0*r21*x121);
IkReal x399=(x160*x81);
IkReal x400=(x219*x81);
IkReal x401=(gclwh0_1*r20*x80);
IkReal x402=(x121*x191);
IkReal x403=((0.09465)*gclwh5_9*x85);
IkReal x404=(x103*x81);
IkReal x405=((0.09465)*gclwh13_9*x111);
IkReal x406=(x121*x154);
IkReal x407=(x81*x83);
IkReal x408=(x210*x93);
IkReal x409=(x137*x89);
IkReal x410=((0.10915)*gclwh13_15*x111);
IkReal x411=((0.10915)*gclwh5_15*x85);
IkReal x412=(x114*x218);
IkReal x413=((0.10915)*gclwh15_15*x129);
IkReal x414=(x206*x93);
IkReal x415=(x152*x89);
IkReal x416=(x147*x88);
IkReal x417=(x145*x85);
IkReal x418=((4.0)*gclwh6_11*x89);
IkReal x419=((4.0)*gclwh8_11*x114);
IkReal x420=(x147*x84);
IkReal x421=(x201*x93);
IkReal x422=(x106*x85);
IkReal x423=(x180*x89);
IkReal x424=(x129*x134);
IkReal x425=(x111*x153);
IkReal x426=(x114*x173);
IkReal x427=(x158*x93);
IkReal x428=(x129*x231);
IkReal x429=((4.0)*gclwh12_11*x89);
IkReal x430=((4.0)*gclwh4_11*x93);
IkReal x431=(x129*x163);
IkReal x432=((0.4366)*gclwh12_14*x89);
IkReal x433=((0.4366)*gclwh4_14*x93);
IkReal x434=(x111*x162);
IkReal x435=((0.4366)*gclwh14_14*x114);
IkReal x436=(x220*x85);
IkReal x437=(gclwh6_2*npy*x317);
IkReal x438=(gclwh6_2*x109*x126);
IkReal x439=(gclwh10_2*npz*x317);
IkReal x440=(gclwh8_2*x198*x79);
IkReal x441=(gclwh7_0*npy*x317);
IkReal x442=(gclwh9_0*x198*x79);
IkReal x443=(gclwh11_0*npz*x317);
IkReal x444=(gclwh7_0*x109*x126);
IkReal x445=(gclwh12_2*npy*x317);
IkReal x446=(gclwh3_2*npy*x317);
IkReal x447=(gclwh1_2*x198*x79);
IkReal x448=(gclwh14_3*x109*x198);
IkReal x449=(gclwh4_2*npz*x317);
IkReal x450=(gclwh4_3*x147*x93);
IkReal x451=(gclwh12_2*x109*x126);
IkReal x452=((1.0)*x109*x230);
IkReal x453=(gclwh3_3*x147*x89);
IkReal x454=((1.0)*gclwh4_2*pz*x85);
IkReal x455=(gclwh1_3*x109*x198);
IkReal x456=(gclwh3_2*x109*x126);
IkReal x457=(gclwh12_3*x147*x89);
IkReal x458=(gclwh14_2*x198*x79);
IkReal x459=(gclwh14_3*r20*x318);
IkReal x460=(gclwh0_0*x198*x79);
IkReal x461=(gclwh2_0*npy*x317);
IkReal x462=(gclwh5_1*x147*x93);
IkReal x463=(gclwh13_1*x147*x89);
IkReal x464=(gclwh15_0*x198*x79);
IkReal x465=(gclwh2_1*x147*x89);
IkReal x466=(gclwh0_1*x109*x198);
IkReal x467=(gclwh5_0*npz*x317);
IkReal x468=(gclwh13_0*npy*x317);
IkReal x469=((1.0)*x109*x191);
IkReal x470=((1.0)*x109*x154);
IkReal x471=(gclwh2_0*x109*x126);
IkReal x472=(gclwh13_1*x126*x80);
IkReal x473=(x208*x318);
IkReal x474=(gclwh15_1*x109*x198);
IkReal x475=(x298+x297);
IkReal x476=(x302+x303);
IkReal x477=(x264+x263);
IkReal x478=(x238+x236);
IkReal x479=(x261+x260);
IkReal x480=(x291+x292);
IkReal x481=(x336+x246+x245+x244);
IkReal x482=(x346+x250+x252+x249);
IkReal x483=(x286+x284+x409+x408);
IkReal x484=(x386+x380+x276+x275);
IkReal x485=(x313+x431+x432+x433);
IkReal x486=(x320+x321+x322+x234);
IkReal x487=(x360+x361+x362+x265);
IkReal x488=(x290+x413+x414+x415);
IkReal x489=(x355+x354+x356+x258);
IkReal x490=(x395+x278+x279+x282+x280);
IkReal x491=(x373+x269+x272+x273+x271);
IkReal x492=(x327+x329+x239+x243+x240);
IkReal x493=(x350+x348+x254+x255+x256);
IkReal x494=(x363+x364+x365+x267+x268);
IkReal x495=(x289+x287+x412+x410+x411);
IkReal x496=(x357+x359+x358+x259+x262);
IkReal x497=(x315+x314+x434+x435+x436);
IkReal x498=(x311+x312+x429+x428+x430);
IkReal x499=(x324+x325+x323+x237+x235);
IkReal x500=(x300+x301+x299+x419+x421+x420);
IkReal x501=(x308+x309+x310+x427+x426+x425);
IkReal x502=(x306+x307+x305+x424+x423+x422);
IkReal x503=(x293+x294+x295+x416+x417+x418);
IkReal x504=((((0.017917245)*x232))+((gclwh8_11*x127))+((gclwh12_11*x100))+((x111*x193))+(((4.0)*gclwh14_11*x114))+((x112*x85))+((gclwh10_11*x177)));
IkReal x505=(x339+x338+x337+x335+x247+x438+x439+x440);
IkReal x506=(x351+x353+x352+x349+x253+x444+x443+x442);
IkReal x507=(x333+x332+x331+x330+x334+x326+x328+x242+x241+x437);
IkReal x508=(x342+x343+x340+x341+x347+x344+x345+x251+x248+x441);
IkReal x509=(x285+x283+x403+x405+x404+x407+x406+x469+x468+x467+x466+x465+x474+x470+x471+x472+x473);
IkReal x510=(x378+x377+x376+x375+x374+x372+x371+x370+x368+x369+x366+x367+x274+x270+x449+x448+x445+x447+x446+x81);
IkReal x511=(x387+x384+x385+x382+x383+x381+x379+x277+x458+x459+x456+x457+x454+x455+x452+x453+x450+x451);
IkReal x512=(x388+x389+x394+x397+x396+x391+x390+x393+x392+x399+x398+x281+x401+x400+x402+x463+x462+x461+x460+x464+x81);
op[0]=((((1.6345)*gclwh8_12*x114))+((x108*x217))+(((-1.0)*x499))+(((-0.007321434238125)*x95))+((gclwh6_12*x119))+(((-0.81725)*gclwh10_12*x85))+(((-1.0)*gclwh4_8*x105))+(((-1.0)*x108*x113))+(((-1.0)*x233))+x486+x478+(((0.154705425)*x115))+(((1.6345)*gclwh10_12*x93))+(((-0.007321434238125)*x113))+(((-1.6345)*gclwh6_12*x89))+(((-1.0)*gclwh12_8*x99)));
op[1]=((((-1.0)*x492))+(((-1.0)*gclwh12_3*x225))+((pp*x88))+(((-1.0)*x505))+(((0.12699240901125)*x91))+x481+(((-1.0)*x200*x84))+x507+(((-0.12699240901125)*x151))+((gclwh10_11*x85)));
op[2]=((-0.17125635)+(((-1.0)*x500))+x503);
op[3]=((((-0.160905)*x115))+(((0.7845)*gclwh10_2*x85))+(((1.569)*gclwh6_2*x89))+(((-1.569)*gclwh8_2*x114))+(((0.160905)*x224))+((gclwh8_2*x138))+(((0.7845)*gclwh8_2*x129))+(((-0.7845)*gclwh6_2*x111))+(((0.14850585)*x226))+(((-1.0)*x475))+(((-0.14850585)*x167))+(((-0.14850585)*x164))+x296+(((0.160905)*x133))+(((-1.569)*gclwh10_2*x93))+((gclwh10_2*x204))+(((-1.0)*gclwh6_2*x86)));
op[4]=((((-0.03275)*gclwh10_12*x85))+(((0.0655)*gclwh8_12*x114))+(((-1.0)*x499))+(((0.0655)*gclwh10_12*x93))+(((0.000293394886875)*x217))+(((-1.0)*x478))+((gclwh4_8*x195))+(((-0.000293394886875)*x95))+x233+(((-0.000293394886875)*x113))+x486+(((-0.006199575)*x115))+(((0.006199575)*x133))+(((-1.0)*x113*x165))+(((0.03275)*gclwh6_12*x111))+(((-0.0655)*gclwh6_12*x89)));
op[5]=((((-1.0)*x481))+(((0.00076243651125)*x91))+((pp*x84))+(((-1.0)*x505))+(((-1.0)*gclwh10_11*x85))+(((-1.0)*gclwh12_3*x97))+x492+(((-1.0)*x200*x88))+x507+(((-0.00076243651125)*x151)));
op[6]=(((gclwh7_10*x111))+(((-1.0)*x482))+(((-1.0)*x506))+(((0.12699240901125)*x188))+(((-1.0)*gclwh9_10*x129))+(((-1.0)*gclwh13_1*x225))+x493+x508+(((-0.12699240901125)*x184))+(((-1.0)*gclwh11_10*x85)));
op[7]=((((-1.0)*gclwh13_9*x99))+(((1.6345)*gclwh9_13*x114))+(((1.6345)*gclwh11_13*x93))+((gclwh7_13*x119))+(((-1.0)*x496))+(((-1.6345)*gclwh7_13*x89))+(((0.154705425)*x202))+(((-1.0)*x108*x189))+(((-1.0)*gclwh5_9*x105))+(((-0.007321434238125)*x125))+x489+x479+(((-0.81725)*gclwh11_13*x85))+((x108*x179))+(((-0.007321434238125)*x189))+(((-1.0)*x257)));
op[8]=((((-1.569)*gclwh11_0*x93))+(((-0.160905)*x117))+(((1.569)*gclwh7_0*x89))+(((-0.160905)*x209))+(((0.14850585)*x197))+(((0.160905)*x202))+(((-0.14850585)*x181))+(((-0.14850585)*x168))+(((-0.7845)*gclwh7_0*x111))+(((-1.0)*gclwh7_0*x86))+(((0.7845)*gclwh11_0*x85))+x476+((gclwh9_0*x138))+((gclwh11_0*x204))+(((0.7845)*gclwh9_0*x129))+(((-1.569)*gclwh9_0*x114))+(((-1.0)*x304)));
op[9]=((-0.17125635)+(((-1.0)*x501))+x502);
op[10]=((((-1.0)*x493))+(((-1.0)*x506))+(((0.00076243651125)*x188))+x482+x508+((gclwh11_10*x85))+(((-0.00076243651125)*x184))+(((-1.0)*gclwh7_10*x111))+(((-1.0)*gclwh13_1*x97))+((gclwh9_10*x129)));
op[11]=((((-1.0)*x496))+(((0.000293394886875)*x179))+(((-0.006199575)*x202))+(((-0.03275)*gclwh9_13*x129))+(((0.0655)*gclwh11_13*x93))+(((0.03275)*gclwh7_13*x111))+(((-0.000293394886875)*x125))+(((-0.03275)*gclwh11_13*x85))+(((-1.0)*x479))+(((-0.0655)*gclwh7_13*x89))+(((-0.000293394886875)*x189))+x257+x489+((gclwh13_9*x166))+(((0.0655)*gclwh9_13*x114))+(((0.006199575)*x117)));
op[12]=((((-1.0)*x487))+((gclwh10_12*x105))+(((0.154705425)*x175))+(((-1.0)*x107*x108))+(((-1.6345)*gclwh14_8*x114))+((x108*x132))+x494+x477+(((-0.007321434238125)*x107))+(((0.007321434238125)*x132))+(((-0.007321434238125)*x212))+(((1.6345)*gclwh12_8*x89))+(((-1.0)*x266))+(((-0.81725)*gclwh4_8*x85))+(((-1.0)*gclwh6_12*x99))+(((1.6345)*gclwh4_8*x93)));
op[13]=((-0.679811285)+(((1.341705325)*gclwh3_3*x89))+(((-1.0)*x491))+(((-0.66189404)*gclwh4_3*x85))+(((-1.0)*gclwh4_11*x85))+(((1.341705325)*gclwh4_3*x93))+(((-1.341705325)*gclwh14_3*x114))+(((-1.0)*gclwh12_3*x215))+x484+x510+((gclwh14_11*x129))+(((-0.679811285)*gclwh3_3*x111))+(((-0.679811285)*gclwh1_3*x129))+(((-1.0)*gclwh12_11*x111))+((gclwh1_3*x98))+((gclwh3_3*x215))+((gclwh14_3*x98))+(((1.341705325)*gclwh1_3*x114))+(((-0.00600991575645741)*x227))+(((-0.66189404)*gclwh12_3*x111))+(((-1.0)*x511))+(((0.66189404)*gclwh14_3*x129))+(((1.341705325)*gclwh12_3*x89)));
op[14]=((-0.07735732)+(((-1.0)*x504))+x498);
op[15]=((((0.7845)*pp*x110))+((x172*x82))+(((0.85)*pp*x107))+(((-1.0)*x497))+(((-0.7845)*gclwh3_2*x111))+(((-0.14850585)*x96))+(((1.569)*gclwh4_2*x93))+(((0.007614829125)*x107))+(((-0.007614829125)*x132))+(((-1.0)*gclwh12_2*x86))+(((0.14850585)*x222))+(((-0.14850585)*x185))+(((0.85)*gclwh4_8*x85))+(((-1.0)*gclwh12_8*npy*x82))+(((-0.7845)*gclwh1_2*x129))+((gclwh3_2*x86))+(((1.569)*gclwh12_2*x89))+x485+(((0.007614829125)*x212))+(((-0.7845)*gclwh12_2*x111))+(((-1.0)*gclwh4_8*npz*x82))+(((-0.7845)*gclwh4_2*x85))+(((-1.0)*gclwh4_2*x204))+((gclwh1_2*x138))+(((-0.85)*x316))+(((-1.569)*gclwh14_2*x114))+(((1.569)*gclwh1_2*x114))+(((0.00702803935125)*x110))+(((1.569)*gclwh3_2*x89)));
op[16]=((((-1.0)*x494))+((x107*x165))+(((-0.0655)*gclwh4_8*x93))+(((-0.000293394886875)*x132))+(((0.000293394886875)*x212))+(((0.0655)*gclwh14_8*x114))+(((-0.0655)*gclwh12_8*x89))+(((0.006199575)*x175))+(((0.000293394886875)*x107))+(((-0.03275)*x316))+x487+x477+(((0.03275)*gclwh4_8*x85))+((gclwh10_12*x195))+(((-1.0)*x266))+(((-1.0)*gclwh6_12*x166)));
op[17]=((0.012986285)+(((-1.0)*gclwh4_3*x90))+(((0.008055325)*gclwh4_3*x93))+(((-1.0)*gclwh12_3*x169))+(((3.60823078949063e-5)*x149))+((gclwh12_11*x111))+(((-0.008055325)*gclwh14_3*x114))+(((0.00493096)*gclwh12_3*x111))+(((-1.0)*x484))+(((0.008055325)*gclwh3_3*x89))+((gclwh4_11*x85))+x491+((gclwh3_3*x169))+x510+(((0.008055325)*gclwh12_3*x89))+((gclwh14_3*x203))+(((-0.012986285)*gclwh1_3*x129))+(((-1.0)*x511))+(((-1.0)*gclwh14_11*x129))+(((0.008055325)*gclwh1_3*x114))+(((-0.00493096)*gclwh14_3*x129))+(((-0.012986285)*gclwh3_3*x111))+(((0.00493096)*gclwh4_3*x85)));
op[18]=((0.679811285)+(((-0.679811285)*gclwh0_1*x129))+(((-1.0)*x490))+(((1.341705325)*gclwh2_1*x89))+(((-1.0)*gclwh5_10*x85))+(((0.00600991575645741)*x208))+(((0.00600991575645741)*x157))+(((-1.341705325)*gclwh5_1*x93))+(((-1.0)*gclwh15_1*x98))+(((-1.0)*gclwh13_10*x111))+(((-1.0)*x509))+(((0.66189404)*gclwh5_1*x85))+(((1.341705325)*gclwh15_1*x114))+(((-0.66189404)*gclwh15_1*x129))+((gclwh0_1*x98))+(((1.341705325)*gclwh0_1*x114))+x483+((gclwh15_10*x129))+((gclwh13_1*x215))+x512+(((0.66189404)*gclwh13_1*x111))+(((-1.341705325)*gclwh13_1*x89))+(((-0.679811285)*gclwh2_1*x111)));
op[19]=((((-1.0)*x120*x87))+(((-1.0)*x495))+(((-1.0)*x480))+(((-1.0)*gclwh11_13*x105))+(((-0.154705425)*x199))+((x108*x139))+(((0.81725)*gclwh5_9*x85))+x288+(((-1.6345)*gclwh13_9*x89))+x488+(((0.007321434238125)*x123))+((gclwh7_13*x99))+((gclwh13_9*x119))+(((-1.0)*x108*x148))+((x120*x83))+(((-0.007321434238125)*x148)));
op[20]=((((-1.0)*x206*x85))+(((-1.569)*gclwh13_0*x89))+(((-1.0)*x82*x87))+(((-1.0)*gclwh13_9*npy*x82))+(((-0.85)*gclwh15_9*x129))+((gclwh0_0*x138))+((x82*x83))+(((-0.7845)*gclwh15_0*x129))+(((0.14850585)*x160))+(((1.569)*gclwh2_0*x89))+((gclwh2_0*x86))+(((0.007614829125)*x123))+(((-0.7845)*gclwh0_0*x129))+(((-1.0)*gclwh15_0*x138))+(((0.85)*gclwh5_9*x85))+(((0.007614829125)*x139))+(((1.569)*gclwh0_0*x114))+(((1.569)*gclwh15_0*x114))+(((0.85)*gclwh13_9*x111))+(((0.14850585)*x219))+(((0.7845)*gclwh5_0*x85))+(((-0.14850585)*x103))+(((-1.0)*gclwh13_15*x174))+((gclwh15_15*x150))+(((-1.569)*gclwh5_0*x93))+((x129*x218))+(((0.00702803935125)*x140))+(((-1.0)*x111*x152))+(((0.4366)*gclwh13_15*x89))+(((0.4366)*gclwh5_15*x93))+(((-1.0)*gclwh5_15*x130))+((gclwh13_0*x86))+(((-0.4366)*gclwh15_15*x114))+(((-0.7845)*gclwh2_0*x111))+(((0.7845)*gclwh13_0*x111))+(((-0.007614829125)*x148)));
op[21]=((-0.07735732)+((x111*x137))+(((-4.0)*gclwh5_10*x93))+((gclwh11_10*x177))+((gclwh13_10*x100))+((x210*x85))+(((-1.0)*gclwh7_10*x102))+(((0.017917245)*x146))+(((-1.0)*gclwh15_10*x213))+(((-1.0)*x129*x135))+(((4.0)*gclwh15_10*x114))+(((-4.0)*gclwh13_10*x89))+((gclwh9_10*x127)));
op[22]=((-0.012986285)+(((-0.008055325)*gclwh5_1*x93))+(((-3.60823078949063e-5)*x142))+(((-1.0)*gclwh15_10*x129))+((gclwh13_1*x169))+((gclwh5_10*x85))+(((3.60823078949063e-5)*x157))+(((-1.0)*x483))+((gclwh0_1*x203))+(((0.008055325)*gclwh0_1*x114))+(((-1.0)*x509))+((gclwh5_1*x90))+(((0.008055325)*gclwh2_1*x89))+((gclwh13_10*x111))+x490+x512+(((-0.00493096)*gclwh5_1*x85))+(((-0.008055325)*gclwh13_1*x89))+(((-0.012986285)*gclwh0_1*x129))+(((0.00493096)*gclwh15_1*x129))+(((-0.00493096)*gclwh13_1*x111))+(((0.008055325)*gclwh15_1*x114))+(((-0.012986285)*gclwh2_1*x111)));
op[23]=((((0.0655)*gclwh13_9*x89))+(((0.000293394886875)*x148))+(((0.03275)*gclwh15_9*x129))+(((-1.0)*x488))+(((-1.0)*x480))+(((-0.006199575)*x199))+(((-0.000293394886875)*x123))+(((-0.000293394886875)*x139))+((gclwh7_13*x166))+(((-1.0)*x194*x83))+((x194*x87))+x288+(((-0.03275)*gclwh5_9*x85))+(((-1.0)*gclwh11_13*x195))+x495+(((-0.03275)*gclwh13_9*x111)));
op[24]=((-0.35681135)+(((-1.0)*x500))+x503);
op[25]=((((-3.269)*gclwh8_2*x114))+(((1.6345)*gclwh10_2*x85))+(((3.269)*gclwh6_2*x89))+(((-3.269)*gclwh10_2*x93))+(((-1.0)*gclwh6_2*x176))+((gclwh10_2*x178))+(((-1.6345)*gclwh6_2*x111))+(((-1.0)*x475))+(((-0.30941085)*x167))+(((-0.30941085)*x164))+((gclwh8_2*x141))+x296+(((1.6345)*gclwh8_2*x129))+((gclwh14_2*x159)));
op[26]=((((-0.0140560787025)*x217))+(((1.569)*gclwh10_12*x85))+(((1.569)*pp*x113))+(((0.0140560787025)*x113))+(((0.08264838)*x128))+(((-3.138)*gclwh8_12*x114))+(((-3.138)*gclwh10_12*x93))+(((3.138)*gclwh6_12*x89))+(((-0.08264838)*x221))+(((0.0140560787025)*x95))+(((-0.08264838)*x196))+(((-1.569)*gclwh6_12*x111)));
op[27]=((((8.0)*gclwh8_11*x114))+(((0.03583449)*x84))+((x187*x84))+((gclwh12_11*x104))+(((0.7572)*gclwh4_11*rxp2_2))+(((-8.0)*gclwh6_11*x89))+(((-0.03583449)*x192))+(((-0.03583449)*x88))+(((-1.0)*x201*x85))+(((8.0)*gclwh10_11*x93))+(((-0.7572)*x170))+(((-1.0)*x187*x88)));
op[28]=((-0.01429865)+(((-1.0)*x503))+x500);
op[29]=((((-0.00058678977375)*x183))+(((0.0655)*gclwh10_2*x85))+(((0.01239915)*x226))+(((-1.0)*x296))+(((0.131)*gclwh6_2*x89))+(((0.0655)*gclwh8_2*x129))+(((-0.131)*gclwh10_2*x93))+x475+(((-0.131)*gclwh8_2*x114))+(((0.00058678977375)*x205))+(((0.00058678977375)*x207))+(((-0.01239915)*x164))+(((-0.01239915)*x167))+(((-0.0655)*gclwh6_2*x111)));
op[30]=((((-3.269)*gclwh9_0*x114))+(((-0.30941085)*x181))+(((-1.6345)*gclwh7_0*x111))+(((-0.30941085)*x168))+(((-1.0)*gclwh7_0*x176))+x476+((gclwh15_0*x159))+(((3.269)*gclwh7_0*x89))+(((1.6345)*gclwh9_0*x129))+(((-3.269)*gclwh11_0*x93))+((gclwh11_0*x178))+(((-1.0)*x304))+((gclwh9_0*x141))+(((1.6345)*gclwh11_0*x85)));
op[31]=((-0.35681135)+(((-1.0)*x501))+x502);
op[32]=((((-8.0)*gclwh9_10*x114))+(((0.03583449)*x186))+(((-0.03583449)*gclwh7_10*r21))+((x129*x173))+(((-1.0)*gclwh13_10*x104))+(((8.0)*gclwh7_10*x89))+(((0.03583449)*x124))+((x158*x85))+(((0.7572)*x131))+(((-1.0)*x111*x180))+(((-8.0)*gclwh11_10*x93))+(((-0.7572)*x161)));
op[33]=((((0.0140560787025)*x189))+(((-0.0140560787025)*x179))+(((0.0140560787025)*x125))+(((1.569)*gclwh9_13*x129))+(((0.08264838)*x156))+(((-3.138)*gclwh9_13*x114))+(((-1.569)*gclwh7_13*x111))+(((-0.08264838)*x229))+(((1.569)*gclwh11_13*x85))+(((3.138)*gclwh7_13*x89))+(((-3.138)*gclwh11_13*x93))+(((-0.08264838)*x136)));
op[34]=((((0.01239915)*x197))+(((-0.131)*gclwh11_0*x93))+(((-0.00058678977375)*x214))+(((0.00058678977375)*x216))+(((-0.131)*gclwh9_0*x114))+(((0.00058678977375)*x155))+(((0.0655)*gclwh11_0*x85))+(((-1.0)*x476))+x304+(((0.0655)*gclwh9_0*x129))+(((0.131)*gclwh7_0*x89))+(((-0.0655)*gclwh7_0*x111))+(((-0.01239915)*x168))+(((-0.01239915)*x181)));
op[35]=((-0.01429865)+(((-1.0)*x502))+x501);
op[36]=((1.31196768)+(((-1.0)*x504))+x498);
op[37]=((((-1.0)*gclwh12_2*x176))+(((0.01464286847625)*x110))+(((-1.6345)*gclwh4_2*x85))+(((0.30941085)*x222))+(((-3.269)*gclwh14_2*x114))+(((-1.0)*x497))+(((1.6345)*pp*x110))+(((3.269)*gclwh3_2*x89))+(((-1.6345)*gclwh12_2*x111))+(((-1.0)*gclwh4_2*x178))+(((-1.6345)*gclwh3_2*x111))+(((3.269)*gclwh12_2*x89))+(((3.269)*gclwh1_2*x114))+x485+(((-1.6345)*gclwh1_2*x129))+((gclwh3_2*x176))+(((-0.30941085)*x96))+(((-1.0)*gclwh8_2*x159))+(((3.269)*gclwh4_2*x93))+((gclwh1_2*x141)));
IkReal x513=pz*pz;
IkReal x514=pp*pp;
IkReal x515=((0.1893)*pz);
IkReal x516=((1.7)*pz);
IkReal x517=(gclwh15_9*npx);
IkReal x518=(pp*r21);
IkReal x519=(pp*r22);
IkReal x520=((0.00702803935125)*r21);
IkReal x521=(gclwh5_9*npz);
IkReal x522=(pp*r20);
IkReal x523=(npy*pz);
IkReal x524=((4.0)*gclwh12_11);
IkReal x525=((3.60823078949063e-5)*r22);
IkReal x526=(gclwh14_3*rxp0_2);
IkReal x527=((0.000977833645875)*r20);
IkReal x528=(npz*pz);
IkReal x529=((0.000977833645875)*r21);
IkReal x530=(gclwh10_2*rxp2_2);
IkReal x531=((0.00076243651125)*rxp1_2);
IkReal x532=((0.00600991575645741)*r20);
IkReal x533=((0.154705425)*rxp1_2);
IkReal x534=((0.4366)*gclwh5_15);
IkReal x535=(gclwh6_11*rxp1_2);
IkReal x536=(gclwh7_0*rxp1_2);
IkReal x537=((0.154705425)*rxp2_2);
IkReal x538=((2.0)*gclwh11_10);
IkReal x539=((0.2970117)*rxp1_2);
IkReal x540=((0.017917245)*r21);
IkReal x541=(gclwh14_2*pz);
IkReal x542=(gclwh12_8*r21);
IkReal x543=(gclwh14_2*rxp0_2);
IkReal x544=((2.0)*gclwh4_11);
IkReal x545=((0.007321434238125)*r20);
IkReal x546=(npx*pz);
IkReal x547=((0.4366)*gclwh15_15);
IkReal x548=(gclwh10_11*rxp2_2);
IkReal x549=(gclwh5_9*rxp2_2);
IkReal x550=((0.020662095)*rxp1_2);
IkReal x551=((0.007321434238125)*r21);
IkReal x552=(gclwh0_0*r20);
IkReal x553=((0.0089586225)*r21);
IkReal x554=(gclwh13_0*pz);
IkReal x555=((1.6345)*pz);
IkReal x556=((0.007321434238125)*r22);
IkReal x557=((1.0)*pz);
IkReal x558=(gclwh14_14*rxp0_2);
IkReal x559=(gclwh4_14*r22);
IkReal x560=((0.1893)*rxp0_2);
IkReal x561=((0.00058678977375)*r22);
IkReal x562=(gclwh12_8*rxp1_2);
IkReal x563=((2.0)*gclwh9_10);
IkReal x564=((0.1893)*rxp2_2);
IkReal x565=((2.0)*gclwh15_10);
IkReal x566=((4.0)*gclwh14_11);
IkReal x567=(gclwh5_15*rxp2_2);
IkReal x568=((0.020662095)*rxp0_2);
IkReal x569=((2.0)*gclwh13_10);
IkReal x570=((0.3786)*rxp1_2);
IkReal x571=(gclwh9_0*r20);
IkReal x572=(gclwh13_9*r21);
IkReal x573=(gclwh15_1*r20);
IkReal x574=((0.000977833645875)*r22);
IkReal x575=((0.006199575)*rxp0_2);
IkReal x576=(gclwh6_2*rxp1_2);
IkReal x577=((0.0089586225)*r20);
IkReal x578=((2.0)*gclwh10_11);
IkReal x579=((2.0)*pp);
IkReal x580=((0.00058678977375)*r21);
IkReal x581=(gclwh1_3*r20);
IkReal x582=(gclwh14_14*r20);
IkReal x583=(gclwh9_0*rxp0_2);
IkReal x584=(gclwh4_3*rxp2_2);
IkReal x585=(gclwh5_0*r22);
IkReal x586=((0.03583449)*r20);
IkReal x587=((0.00058678977375)*r20);
IkReal x588=((0.2183)*gclwh13_15);
IkReal x589=((2.0)*gclwh7_10);
IkReal x590=(gclwh2_1*r21);
IkReal x591=((4.0)*gclwh15_10);
IkReal x592=((0.0089586225)*pz);
IkReal x593=((0.2183)*gclwh12_14);
IkReal x594=((0.2183)*gclwh14_14);
IkReal x595=(gclwh11_0*rxp2_2);
IkReal x596=(gclwh8_2*rxp0_2);
IkReal x597=((0.3786)*rxp2_2);
IkReal x598=(gclwh12_2*rxp1_2);
IkReal x599=(gclwh5_0*rxp2_2);
IkReal x600=((3.60823078949063e-5)*r21);
IkReal x601=(gclwh15_9*r20);
IkReal x602=((0.3786)*rxp0_2);
IkReal x603=((0.006199575)*rxp1_2);
IkReal x604=(gclwh14_8*npx);
IkReal x605=(gclwh13_15*r21);
IkReal x606=((0.017917245)*r20);
IkReal x607=(gclwh5_15*r22);
IkReal x608=((0.000293394886875)*r21);
IkReal x609=(gclwh13_0*rxp1_2);
IkReal x610=(gclwh7_10*rxp1_2);
IkReal x611=((0.000293394886875)*r22);
IkReal x612=(gclwh5_1*rxp2_2);
IkReal x613=((0.154705425)*rxp0_2);
IkReal x614=((0.4366)*gclwh13_15);
IkReal x615=((0.0089586225)*r22);
IkReal x616=((0.2970117)*rxp2_2);
IkReal x617=(gclwh5_9*r22);
IkReal x618=((0.7572)*rxp0_2);
IkReal x619=((4.0)*gclwh4_11);
IkReal x620=(gclwh15_1*rxp0_2);
IkReal x621=((0.000293394886875)*r20);
IkReal x622=((2.0)*gclwh6_11);
IkReal x623=((0.4366)*gclwh12_14);
IkReal x624=((0.017917245)*r22);
IkReal x625=(gclwh15_0*r20);
IkReal x626=(gclwh15_15*r20);
IkReal x627=((2.0)*gclwh12_11);
IkReal x628=(gclwh14_8*rxp0_2);
IkReal x629=((0.0655)*pz);
IkReal x630=((0.006199575)*rxp2_2);
IkReal x631=((0.04132419)*rxp1_2);
IkReal x632=((0.4366)*gclwh4_14);
IkReal x633=(gclwh15_0*rxp0_2);
IkReal x634=(gclwh14_8*r20);
IkReal x635=((0.03583449)*r22);
IkReal x636=((2.0)*gclwh8_11);
IkReal x637=((4.0)*gclwh13_10);
IkReal x638=(gclwh15_9*rxp0_2);
IkReal x639=((3.60823078949063e-5)*r20);
IkReal x640=((0.00702803935125)*r22);
IkReal x641=((0.2183)*gclwh5_15);
IkReal x642=(gclwh5_1*r22);
IkReal x643=((4.0)*gclwh5_10);
IkReal x644=(gclwh13_9*rxp1_2);
IkReal x645=((2.0)*gclwh5_10);
IkReal x646=((0.4366)*gclwh14_14);
IkReal x647=((0.020662095)*rxp2_2);
IkReal x648=(gclwh4_8*r22);
IkReal x649=(gclwh4_2*rxp2_2);
IkReal x650=((0.00600991575645741)*r21);
IkReal x651=((0.2183)*gclwh15_15);
IkReal x652=((0.2183)*gclwh4_14);
IkReal x653=((0.00702803935125)*r20);
IkReal x654=(gclwh12_14*r21);
IkReal x655=(gclwh4_8*rxp2_2);
IkReal x656=((0.2970117)*rxp0_2);
IkReal x657=(gclwh8_2*pz);
IkReal x658=(gclwh13_1*rxp1_2);
IkReal x659=((0.1893)*pp);
IkReal x660=(gclwh12_3*rxp1_2);
IkReal x661=((0.01464286847625)*r21);
IkReal x662=((0.1893)*rxp1_2);
IkReal x663=(gclwh4_3*r22);
IkReal x664=((2.0)*gclwh14_11);
IkReal x665=((0.03583449)*r21);
IkReal x666=((0.00195566729175)*x605);
IkReal x667=((0.00195566729175)*x607);
IkReal x668=((0.00195566729175)*x626);
IkReal x669=(gclwh15_10*x606);
IkReal x670=(gclwh7_10*x570);
IkReal x671=(gclwh5_10*x624);
IkReal x672=(gclwh9_10*x602);
IkReal x673=(gclwh13_10*x540);
IkReal x674=(gclwh11_10*x597);
IkReal x675=(gclwh12_14*x550);
IkReal x676=(gclwh6_5*x529);
IkReal x677=(gclwh4_14*x647);
IkReal x678=(gclwh8_5*x527);
IkReal x679=((0.020662095)*x558);
IkReal x680=(gclwh10_5*x574);
IkReal x681=((0.017917245)*x562);
IkReal x682=(gclwh8_11*x577);
IkReal x683=(gclwh14_11*x560);
IkReal x684=((0.017917245)*x655);
IkReal x685=(gclwh10_11*x615);
IkReal x686=(gclwh6_11*x553);
IkReal x687=(gclwh12_11*x662);
IkReal x688=(gclwh4_11*x564);
IkReal x689=((0.017917245)*x628);
IkReal x690=((0.017917245)*x549);
IkReal x691=(gclwh13_10*x662);
IkReal x692=(gclwh7_10*x553);
IkReal x693=(gclwh5_10*x564);
IkReal x694=((0.017917245)*x644);
IkReal x695=((0.017917245)*x638);
IkReal x696=(gclwh11_10*x615);
IkReal x697=(gclwh15_10*x560);
IkReal x698=(gclwh9_10*x577);
IkReal x699=(gclwh13_15*x550);
IkReal x700=((0.020662095)*x567);
IkReal x701=(gclwh7_7*x529);
IkReal x702=(gclwh9_7*x527);
IkReal x703=(gclwh15_15*x568);
IkReal x704=(gclwh11_7*x574);
IkReal x705=(gclwh12_11*x540);
IkReal x706=((0.3786)*x548);
IkReal x707=(gclwh4_11*x624);
IkReal x708=(gclwh8_11*x602);
IkReal x709=((0.00195566729175)*x559);
IkReal x710=((0.00195566729175)*x654);
IkReal x711=((0.00195566729175)*x582);
IkReal x712=((0.000977833645875)*x559);
IkReal x713=(gclwh10_5*x647);
IkReal x714=(gclwh12_14*x529);
IkReal x715=(gclwh8_5*x568);
IkReal x716=(gclwh6_5*x550);
IkReal x717=(gclwh14_14*x527);
IkReal x718=((0.000847933619625)*x542);
IkReal x719=((0.1893)*x535);
IkReal x720=(gclwh14_11*x577);
IkReal x721=((0.000847933619625)*x648);
IkReal x722=(gclwh8_11*x560);
IkReal x723=(gclwh12_11*x553);
IkReal x724=((0.1893)*x548);
IkReal x725=(gclwh4_11*x615);
IkReal x726=((0.000847933619625)*x634);
IkReal x727=((0.1893)*x610);
IkReal x728=(gclwh15_10*x577);
IkReal x729=((0.000847933619625)*x601);
IkReal x730=((0.000847933619625)*x617);
IkReal x731=(gclwh9_10*x560);
IkReal x732=(gclwh13_10*x553);
IkReal x733=((0.000847933619625)*x572);
IkReal x734=(gclwh11_10*x564);
IkReal x735=(gclwh5_10*x615);
IkReal x736=(gclwh15_15*x527);
IkReal x737=(gclwh7_7*x550);
IkReal x738=(gclwh5_15*x574);
IkReal x739=(gclwh9_7*x568);
IkReal x740=(gclwh11_7*x647);
IkReal x741=(gclwh13_15*x529);
IkReal x742=((2.0)*x513);
IkReal x743=(r21*x514);
IkReal x744=((1.0)*x514);
IkReal x745=(x518*x588);
IkReal x746=(x546*x547);
IkReal x747=(x519*x641);
IkReal x748=(x523*x614);
IkReal x749=(x522*x651);
IkReal x750=(x528*x534);
IkReal x751=(x522*x565);
IkReal x752=(x528*x643);
IkReal x753=(x523*x637);
IkReal x754=(x518*x569);
IkReal x755=(x546*x591);
IkReal x756=(x519*x645);
IkReal x757=((0.2183)*gclwh10_5*x528);
IkReal x758=((0.2183)*gclwh8_5*x546);
IkReal x759=((0.10915)*gclwh6_5*x518);
IkReal x760=((0.2183)*gclwh6_5*x523);
IkReal x761=((0.10915)*gclwh8_5*x522);
IkReal x762=((0.10915)*gclwh10_5*x519);
IkReal x763=(x659*x660);
IkReal x764=(x523*x622);
IkReal x765=(x577*x657);
IkReal x766=(gclwh10_2*pz*x519);
IkReal x767=(x515*x543);
IkReal x768=(x522*x657);
IkReal x769=(gclwh4_3*pp*x564);
IkReal x770=(gclwh10_2*r22*x592);
IkReal x771=(x515*x598);
IkReal x772=(x528*x578);
IkReal x773=(x515*x649);
IkReal x774=(x526*x659);
IkReal x775=(x546*x636);
IkReal x776=(gclwh6_2*pz*x553);
IkReal x777=(x658*x659);
IkReal x778=(x528*x538);
IkReal x779=(x546*x563);
IkReal x780=(gclwh11_0*r22*x592);
IkReal x781=(x571*x592);
IkReal x782=(gclwh5_1*pp*x564);
IkReal x783=(x515*x633);
IkReal x784=(gclwh11_0*pz*x519);
IkReal x785=(gclwh9_0*pz*x522);
IkReal x786=(gclwh15_1*pp*x560);
IkReal x787=(gclwh7_0*pz*x553);
IkReal x788=(x515*x609);
IkReal x789=(x515*x599);
IkReal x790=(x523*x589);
IkReal x791=((0.10915)*gclwh7_7*x518);
IkReal x792=((0.2183)*gclwh9_7*x546);
IkReal x793=((0.2183)*gclwh11_7*x528);
IkReal x794=((0.10915)*gclwh9_7*x522);
IkReal x795=((0.2183)*gclwh7_7*x523);
IkReal x796=((0.10915)*gclwh11_7*x519);
IkReal x797=(x519*x544);
IkReal x798=(x518*x627);
IkReal x799=(x546*x566);
IkReal x800=(x518*x593);
IkReal x801=(x546*x646);
IkReal x802=(x519*x652);
IkReal x803=(x522*x594);
IkReal x804=(x523*x623);
IkReal x805=(x528*x632);
IkReal x806=((0.10915)*gclwh12_14*x518);
IkReal x807=(x546*x594);
IkReal x808=((0.10915)*gclwh4_14*x519);
IkReal x809=((0.10915)*gclwh14_14*x522);
IkReal x810=(x528*x652);
IkReal x811=(x523*x593);
IkReal x812=((0.09465)*gclwh4_8*x519);
IkReal x813=(x522*x541);
IkReal x814=(gclwh12_3*x743);
IkReal x815=(x528*x544);
IkReal x816=(x515*x576);
IkReal x817=(gclwh3_3*x743);
IkReal x818=(x514*x581);
IkReal x819=(gclwh3_2*pz*x553);
IkReal x820=(x515*x604);
IkReal x821=(x541*x577);
IkReal x822=((0.09465)*gclwh12_8*x518);
IkReal x823=(x514*x663);
IkReal x824=(gclwh1_2*pz*x577);
IkReal x825=(x523*x627);
IkReal x826=(x515*x596);
IkReal x827=(gclwh4_2*r22*x592);
IkReal x828=(gclwh4_8*npz*x515);
IkReal x829=(gclwh12_2*pz*x553);
IkReal x830=(x515*x530);
IkReal x831=(x546*x664);
IkReal x832=((0.09465)*gclwh14_8*x522);
IkReal x833=(gclwh12_8*npy*x515);
IkReal x834=(x514*x573);
IkReal x835=(x515*x521);
IkReal x836=(gclwh5_0*pz*x519);
IkReal x837=(gclwh13_9*npy*x515);
IkReal x838=(x585*x592);
IkReal x839=(x518*x554);
IkReal x840=((0.09465)*gclwh15_9*x522);
IkReal x841=(x553*x554);
IkReal x842=(x514*x590);
IkReal x843=(x528*x645);
IkReal x844=(gclwh2_0*pz*x553);
IkReal x845=(x515*x583);
IkReal x846=(x523*x569);
IkReal x847=(x515*x595);
IkReal x848=(gclwh0_1*r20*x514);
IkReal x849=(x552*x592);
IkReal x850=((0.09465)*gclwh5_9*x519);
IkReal x851=(x515*x536);
IkReal x852=((0.09465)*gclwh13_9*x518);
IkReal x853=(gclwh15_0*pz*x577);
IkReal x854=(x515*x517);
IkReal x855=(x546*x565);
IkReal x856=((0.10915)*gclwh15_15*x522);
IkReal x857=(x528*x641);
IkReal x858=(x523*x588);
IkReal x859=((0.10915)*gclwh13_15*x518);
IkReal x860=((0.10915)*gclwh5_15*x519);
IkReal x861=(x546*x651);
IkReal x862=(gclwh6_2*npy*x742);
IkReal x863=(gclwh6_2*x518*x557);
IkReal x864=(gclwh10_2*npz*x742);
IkReal x865=(gclwh8_2*npx*x742);
IkReal x866=(gclwh7_0*npy*x742);
IkReal x867=(gclwh9_0*npx*x742);
IkReal x868=(gclwh11_0*npz*x742);
IkReal x869=(gclwh7_0*x518*x557);
IkReal x870=(gclwh12_2*npy*x742);
IkReal x871=(gclwh3_2*npy*x742);
IkReal x872=(gclwh1_2*npx*x742);
IkReal x873=(gclwh14_3*x546*x579);
IkReal x874=(gclwh4_2*npz*x742);
IkReal x875=(gclwh4_3*x528*x579);
IkReal x876=(gclwh12_2*x518*x557);
IkReal x877=(gclwh1_2*x522*x557);
IkReal x878=(gclwh3_3*x523*x579);
IkReal x879=(gclwh4_2*x519*x557);
IkReal x880=(gclwh1_3*x546*x579);
IkReal x881=(gclwh3_2*x518*x557);
IkReal x882=(gclwh12_3*x523*x579);
IkReal x883=(gclwh14_2*npx*x742);
IkReal x884=(gclwh14_3*r20*x744);
IkReal x885=(gclwh0_0*npx*x742);
IkReal x886=(gclwh2_0*npy*x742);
IkReal x887=(gclwh5_1*x528*x579);
IkReal x888=(gclwh13_1*x523*x579);
IkReal x889=(gclwh15_0*npx*x742);
IkReal x890=(gclwh2_1*x523*x579);
IkReal x891=(gclwh0_1*x546*x579);
IkReal x892=(gclwh5_0*npz*x742);
IkReal x893=(gclwh13_0*npy*x742);
IkReal x894=(gclwh0_0*x522*x557);
IkReal x895=(gclwh15_0*x522*x557);
IkReal x896=(gclwh2_0*x518*x557);
IkReal x897=((1.0)*gclwh13_1*x743);
IkReal x898=(x642*x744);
IkReal x899=(gclwh15_1*x546*x579);
IkReal x900=(x677+x675);
IkReal x901=(x713+x715);
IkReal x902=(x699+x700);
IkReal x903=(x739+x740);
IkReal x904=(x696+x697+x698+x790);
IkReal x905=(x683+x682+x685+x764);
IkReal x906=(x719+x720+x815+x825);
IkReal x907=(x727+x728+x843+x846);
IkReal x908=(x668+x750+x748+x749);
IkReal x909=(x676+x757+x759+x758);
IkReal x910=(x717+x810+x811+x809);
IkReal x911=(x711+x805+x804+x803);
IkReal x912=(x701+x791+x793+x792);
IkReal x913=(x736+x856+x857+x858);
IkReal x914=(x735+x734+x732+x731+x855);
IkReal x915=(x722+x723+x724+x725+x831);
IkReal x916=(x691+x692+x693+x779+x778);
IkReal x917=(x688+x687+x686+x772+x775);
IkReal x918=(((x528*x619))+((x523*x524))+((x522*x664))+(((0.3786)*x535))+((gclwh14_11*x606)));
IkReal x919=(x710+x709+x801+x800+x802);
IkReal x920=(x669+x670+x751+x753+x752);
IkReal x921=(x712+x714+x808+x807+x806);
IkReal x922=(x738+x741+x859+x861+x860);
IkReal x923=(x678+x680+x760+x761+x762);
IkReal x924=(x667+x666+x746+x747+x745);
IkReal x925=(x702+x704+x795+x794+x796);
IkReal x926=(x672+x673+x671+x674+x755+x754+x756);
IkReal x927=(x708+x706+x707+x705+x797+x799+x798);
IkReal x928=(x695+x786+x787+x788+x789+x869+x868+x867);
IkReal x929=(x689+x773+x771+x776+x774+x865+x864+x863);
IkReal x930=(x694+x690+x777+x782+x783+x780+x781+x784+x785+x866);
IkReal x931=(x681+x684+x770+x768+x769+x765+x766+x767+x763+x862);
IkReal x932=(x733+x730+x852+x853+x850+x851+x854+x896+x897+x894+x895+x892+x893+x890+x891+x898+x899);
IkReal x933=(x515+x718+x721+x870+x871+x872+x873+x874+x818+x819+x816+x817+x814+x812+x813+x823+x822+x821+x820+x824);
IkReal x934=(x726+x878+x879+x875+x876+x877+x884+x881+x880+x883+x882+x829+x828+x827+x826+x830+x832+x833);
IkReal x935=(x515+x729+x885+x887+x886+x889+x888+x834+x835+x836+x837+x838+x839+x841+x840+x842+x845+x844+x847+x849+x848);
op[38]=((((-1.0)*gclwh8_12*x656))+(((-1.0)*x519*x632))+(((0.8732)*gclwh12_14*x523))+(((0.8732)*gclwh4_14*x528))+(((-1.0)*x518*x623))+(((-0.0039113345835)*x559))+(((-0.8732)*gclwh14_14*x546))+(((0.0039113345835)*x582))+(((-1.0)*gclwh10_12*x616))+((x522*x646))+(((-0.0039113345835)*x654))+((gclwh6_12*x539)));
op[39]=((-0.05940486)+(((8.0)*gclwh14_11*x546))+((x519*x619))+(((-8.0)*gclwh12_11*x523))+((gclwh12_11*x665))+(((-1.0)*x522*x566))+((gclwh4_11*x635))+(((0.7572)*x548))+(((-1.0)*gclwh14_11*x586))+((x518*x524))+(((-8.0)*gclwh4_11*x528))+(((-0.7572)*x535))+((gclwh8_11*x618)));
op[40]=((0.02168232)+(((-1.0)*x918))+x927);
op[41]=((((0.131)*gclwh12_2*x523))+(((-0.131)*npx*x541))+(((-1.0)*gclwh4_2*x561))+(((-0.0655)*gclwh3_2*x518))+(((-0.01239915)*x530))+(((0.131)*gclwh3_2*x523))+(((-1.0)*x911))+(((-1.0)*gclwh12_2*x580))+(((-0.0655)*gclwh1_2*x522))+(((0.131)*gclwh4_2*x528))+(((-0.0655)*gclwh4_2*x519))+(((0.01239915)*x576))+((gclwh1_2*x587))+(((0.0655)*gclwh14_2*x522))+(((0.131)*gclwh1_2*x546))+((gclwh14_2*x587))+x919+((gclwh3_2*x580))+(((-0.0655)*gclwh12_2*x518))+(((-0.01239915)*x596)));
op[42]=((((-1.0)*x924))+(((-0.30941085)*x536))+(((3.269)*gclwh0_0*x546))+(((3.269)*gclwh2_0*x523))+(((0.30941085)*x583))+(((-3.269)*gclwh5_0*x528))+(((-0.01464286847625)*x625))+(((-3.269)*gclwh13_0*x523))+(((1.6345)*gclwh5_0*x519))+(((-1.6345)*gclwh2_0*x518))+((gclwh13_0*x661))+(((-1.6345)*gclwh0_0*x522))+(((0.01464286847625)*x585))+((gclwh2_0*x661))+(((1.6345)*gclwh13_0*x518))+(((-1.6345)*gclwh15_0*x522))+x908+(((0.30941085)*x595))+(((0.01464286847625)*x552))+(((3.269)*gclwh15_0*x546)));
op[43]=((1.31196768)+(((-1.0)*x920))+x926);
op[44]=((0.05940486)+(((0.7572)*gclwh11_10*rxp2_2))+(((-1.0)*x522*x591))+(((-1.0)*gclwh15_10*x586))+(((-8.0)*gclwh5_10*x528))+(((-0.7572)*x610))+(((-8.0)*gclwh13_10*x523))+(((8.0)*gclwh15_10*x546))+((gclwh9_10*x618))+((gclwh13_10*x665))+((x518*x637))+((x519*x643))+((gclwh5_10*x635)));
op[45]=((((-0.8732)*gclwh13_15*x523))+((gclwh9_13*x656))+((x519*x534))+(((-0.0039113345835)*x626))+((gclwh11_13*x616))+(((0.8732)*gclwh15_15*x546))+(((-0.8732)*gclwh5_15*x528))+((x518*x614))+(((-1.0)*gclwh7_13*x539))+(((0.0039113345835)*x607))+(((0.0039113345835)*x605))+(((-1.0)*x522*x547)));
op[46]=((((0.01239915)*x595))+(((-0.131)*gclwh13_0*x523))+(((0.00058678977375)*x552))+(((0.0655)*gclwh13_0*x518))+(((0.131)*gclwh0_0*x546))+(((0.0655)*gclwh5_0*x519))+(((-0.0655)*gclwh2_0*x518))+((gclwh13_0*x580))+(((-1.0)*x908))+(((-0.131)*gclwh5_0*x528))+(((-0.01239915)*x536))+((gclwh2_0*x580))+(((0.01239915)*x583))+(((-0.0655)*gclwh0_0*x522))+(((-1.0)*gclwh15_0*x587))+(((-0.0655)*gclwh15_0*x522))+x924+(((0.131)*gclwh2_0*x523))+((gclwh5_0*x561))+(((0.131)*gclwh15_0*x546)));
op[47]=((0.02168232)+(((-1.0)*x926))+x920);
op[48]=((((-1.0)*x923))+(((-1.0)*gclwh4_8*x537))+(((0.81725)*gclwh8_12*x522))+(((1.6345)*gclwh6_12*x523))+((gclwh10_12*x556))+((gclwh14_8*x613))+(((0.81725)*gclwh10_12*x519))+((gclwh8_12*x545))+(((-1.0)*gclwh12_8*x533))+(((-1.0)*x900))+(((-1.6345)*gclwh10_12*x528))+(((-0.81725)*gclwh6_12*x518))+(((-1.0)*gclwh6_12*x551))+(((-1.6345)*gclwh8_12*x546))+x679+x909);
op[49]=((((-1.0)*x929))+(((-0.12699240901125)*x584))+((gclwh6_11*x518))+(((0.12699240901125)*x526))+(((-1.0)*x905))+(((-1.0)*gclwh8_11*x522))+(((-0.12699240901125)*x660))+(((-1.0)*gclwh10_11*x519))+x931+x917);
op[50]=((0.17125635)+(((-1.0)*x519*x578))+((gclwh6_11*x540))+(((-1.0)*x522*x636))+(((-4.0)*gclwh6_11*x523))+(((-1.0)*gclwh10_11*x624))+(((4.0)*gclwh8_11*x546))+((gclwh12_11*x570))+(((-1.0)*gclwh14_11*x602))+((gclwh4_11*x597))+(((4.0)*gclwh10_11*x528))+(((-1.0)*gclwh8_11*x606))+((x518*x622)));
op[51]=((((-1.0)*gclwh10_2*x640))+(((-0.04132419)*x558))+((gclwh12_14*x631))+(((0.160905)*x562))+(((-0.14850585)*x543))+(((-1.569)*gclwh6_2*x523))+(((-0.160905)*x628))+((gclwh6_2*x520))+(((0.14850585)*x598))+(((0.160905)*x655))+(((0.14850585)*x649))+(((-1.0)*gclwh8_2*x653))+(((0.04132419)*gclwh4_14*rxp2_2))+(((-0.7845)*gclwh10_2*x519))+(((-0.7845)*gclwh8_2*x522))+(((1.569)*gclwh10_2*x528))+(((1.569)*gclwh8_2*x546))+(((0.7845)*gclwh6_2*x518)));
op[52]=((((-1.0)*x923))+(((-0.0655)*gclwh8_12*x546))+(((-0.0655)*gclwh10_12*x528))+(((0.03275)*gclwh10_12*x519))+(((-1.0)*gclwh6_12*x608))+((gclwh8_12*x621))+(((0.0655)*gclwh6_12*x523))+(((-1.0)*gclwh14_8*x575))+(((-0.03275)*gclwh6_12*x518))+x900+x909+(((0.03275)*gclwh8_12*x522))+((gclwh4_8*x630))+(((-1.0)*x679))+(((0.006199575)*x562))+((gclwh10_12*x611)));
op[53]=((((-1.0)*x929))+((gclwh10_11*x519))+((gclwh8_11*x522))+(((-1.0)*x917))+(((0.00076243651125)*x526))+(((-0.00076243651125)*x584))+(((-1.0)*gclwh6_11*x518))+(((-1.0)*gclwh12_3*x531))+x931+x905);
op[54]=((((-1.0)*x928))+(((-1.0)*gclwh7_10*x518))+(((0.12699240901125)*x620))+(((-1.0)*x916))+((gclwh11_10*x519))+(((-0.12699240901125)*x612))+((gclwh9_10*x522))+(((-0.12699240901125)*x658))+x930+x904);
op[55]=((((-1.0)*x925))+((gclwh9_13*x545))+(((-1.6345)*gclwh9_13*x546))+(((-0.81725)*gclwh7_13*x518))+(((1.6345)*gclwh7_13*x523))+(((-1.0)*gclwh5_9*x537))+(((-1.0)*x902))+(((-1.6345)*gclwh11_13*x528))+((gclwh11_13*x556))+(((-1.0)*gclwh7_13*x551))+(((-1.0)*gclwh13_9*x533))+(((0.81725)*gclwh9_13*x522))+x703+(((0.81725)*gclwh11_13*x519))+x912+((gclwh15_9*x613)));
op[56]=((((0.7845)*gclwh7_0*x518))+(((-0.00702803935125)*x571))+(((-0.7845)*gclwh9_0*x522))+(((0.160905)*x638))+(((-1.0)*gclwh11_0*x640))+(((-0.160905)*x644))+(((-1.569)*gclwh7_0*x523))+(((0.14850585)*x609))+(((-0.7845)*gclwh11_0*x519))+(((1.569)*gclwh11_0*x528))+(((0.04132419)*gclwh15_15*rxp0_2))+(((1.569)*gclwh9_0*x546))+(((0.14850585)*x599))+(((-0.160905)*x549))+((gclwh7_0*x520))+(((-1.0)*gclwh13_15*x631))+(((-0.04132419)*x567))+(((-0.14850585)*x633)));
op[57]=((0.17125635)+(((-1.0)*gclwh15_10*x602))+(((-1.0)*gclwh9_10*x606))+((gclwh13_10*x570))+(((-4.0)*gclwh7_10*x523))+(((4.0)*gclwh11_10*x528))+(((-1.0)*x522*x563))+((gclwh5_10*x597))+((gclwh7_10*x540))+(((-1.0)*gclwh11_10*x624))+((x518*x589))+(((4.0)*gclwh9_10*x546))+(((-1.0)*x519*x538)));
op[58]=((((-1.0)*x928))+(((-0.00076243651125)*x612))+(((0.00076243651125)*x620))+(((-1.0)*x904))+(((-1.0)*gclwh9_10*x522))+(((-1.0)*gclwh11_10*x519))+((gclwh7_10*x518))+(((-1.0)*gclwh13_1*x531))+x930+x916);
op[59]=((((-1.0)*x925))+((gclwh11_13*x611))+((gclwh13_9*x603))+(((0.03275)*gclwh9_13*x522))+(((-0.0655)*gclwh11_13*x528))+((gclwh9_13*x621))+(((-1.0)*gclwh7_13*x608))+(((0.03275)*gclwh11_13*x519))+(((0.0655)*gclwh7_13*x523))+(((0.006199575)*x549))+(((-1.0)*x703))+(((-1.0)*gclwh15_9*x575))+(((-0.03275)*gclwh7_13*x518))+x912+x902+(((-0.0655)*gclwh9_13*x546)));
op[60]=((((-1.0)*x921))+(((1.6345)*gclwh4_8*x528))+(((0.81725)*gclwh14_8*x522))+(((-1.0)*gclwh4_8*x556))+(((-0.81725)*gclwh12_8*x518))+(((-0.007321434238125)*x542))+(((-1.0)*x716))+((gclwh14_8*x545))+(((1.6345)*gclwh12_8*x523))+(((-0.81725)*gclwh4_8*x519))+(((-1.0)*gclwh10_12*x537))+x910+x901+((gclwh6_12*x533))+(((-1.0)*gclwh8_12*x613))+(((-1.6345)*gclwh14_8*x546)));
op[61]=((0.679811285)+((gclwh1_3*x532))+(((-0.66189404)*gclwh4_3*x519))+(((1.341705325)*gclwh3_3*x523))+(((-0.00600991575645741)*x663))+(((-1.0)*gclwh12_3*x650))+(((-1.0)*x906))+((gclwh12_11*x518))+(((0.66189404)*gclwh14_3*x522))+(((-0.679811285)*gclwh1_3*x522))+((gclwh4_11*x519))+(((-0.679811285)*gclwh3_3*x518))+((gclwh14_3*x532))+(((1.341705325)*gclwh12_3*x523))+(((-0.66189404)*gclwh12_3*x518))+(((1.341705325)*gclwh4_3*x528))+(((-1.0)*gclwh14_11*x522))+(((1.341705325)*gclwh1_3*x546))+x933+x915+(((-1.341705325)*gclwh14_3*x546))+((gclwh3_3*x650))+(((-1.0)*x934)));
op[62]=((0.07735732)+(((-1.0)*x918))+x927);
op[63]=((((0.85)*gclwh12_8*x518))+(((0.7845)*gclwh1_2*x522))+(((-1.569)*gclwh3_2*x523))+((x516*x604))+(((-1.0)*x911))+(((-1.0)*gclwh3_2*x520))+(((-1.0)*gclwh14_2*x653))+(((0.14850585)*x596))+(((-1.569)*gclwh12_2*x523))+(((1.569)*npx*x541))+(((0.7845)*gclwh12_2*x518))+(((0.7845)*gclwh4_2*x519))+(((-0.85)*gclwh14_8*x522))+(((0.007614829125)*x542))+(((0.14850585)*x530))+(((-0.14850585)*x576))+((gclwh12_2*x520))+(((-1.0)*gclwh12_8*npy*x516))+(((-0.7845)*gclwh14_2*x522))+(((0.007614829125)*x648))+(((-1.0)*gclwh4_8*npz*x516))+(((-1.569)*gclwh4_2*x528))+((gclwh4_2*x640))+(((0.7845)*gclwh3_2*x518))+(((-1.0)*gclwh1_2*x653))+(((0.85)*gclwh4_8*x519))+x919+(((-0.007614829125)*x634))+(((-1.569)*gclwh1_2*x546)));
op[64]=((((-1.0)*gclwh10_12*x630))+(((0.0655)*gclwh14_8*x546))+(((0.000293394886875)*x542))+(((-0.0655)*gclwh12_8*x523))+((gclwh4_8*x611))+(((-1.0)*x910))+(((-1.0)*gclwh8_12*x575))+((gclwh6_12*x603))+(((-1.0)*x716))+(((0.03275)*gclwh4_8*x519))+(((-0.0655)*gclwh4_8*x528))+(((0.03275)*gclwh12_8*x518))+x921+x901+(((-1.0)*gclwh14_8*x621))+(((-0.03275)*gclwh14_8*x522)));
op[65]=((-0.012986285)+((gclwh14_11*x522))+(((3.60823078949063e-5)*x581))+(((0.008055325)*gclwh4_3*x528))+(((0.00493096)*gclwh4_3*x519))+(((-1.0)*gclwh4_11*x519))+(((-1.0)*gclwh12_3*x600))+(((-0.012986285)*gclwh3_3*x518))+(((-1.0)*x915))+(((-0.008055325)*gclwh14_3*x546))+(((0.008055325)*gclwh3_3*x523))+(((0.00493096)*gclwh12_3*x518))+(((-0.00493096)*gclwh14_3*x522))+(((0.008055325)*gclwh1_3*x546))+(((-1.0)*gclwh4_3*x525))+(((-1.0)*gclwh12_11*x518))+(((0.008055325)*gclwh12_3*x523))+((gclwh3_3*x600))+(((-0.012986285)*gclwh1_3*x522))+x933+x906+((gclwh14_3*x639))+(((-1.0)*x934)));
op[66]=((-0.679811285)+((gclwh5_10*x519))+(((-0.66189404)*gclwh15_1*x522))+(((-0.679811285)*gclwh2_1*x518))+(((-1.0)*gclwh15_10*x522))+(((1.341705325)*gclwh0_1*x546))+(((1.341705325)*gclwh15_1*x546))+(((0.66189404)*gclwh5_1*x519))+(((-1.0)*x907))+(((-0.679811285)*gclwh0_1*x522))+(((-1.341705325)*gclwh5_1*x528))+(((-1.0)*gclwh15_1*x532))+(((0.66189404)*gclwh13_1*x518))+((gclwh13_10*x518))+((gclwh13_1*x650))+(((0.00600991575645741)*x590))+(((1.341705325)*gclwh2_1*x523))+(((0.00600991575645741)*x642))+x935+x914+(((-1.341705325)*gclwh13_1*x523))+((gclwh0_1*x532))+(((-1.0)*x932)));
op[67]=((((0.81725)*gclwh5_9*x519))+(((-1.0)*x521*x555))+(((-0.81725)*gclwh15_9*x522))+(((-1.0)*x903))+((x517*x555))+(((-1.0)*x913))+(((-1.0)*gclwh7_13*x533))+(((-1.6345)*gclwh13_9*x523))+((gclwh13_9*x551))+((gclwh5_9*x556))+((gclwh11_13*x537))+(((-1.0)*gclwh15_9*x545))+(((0.81725)*gclwh13_9*x518))+x737+((gclwh9_13*x613))+x922);
op[68]=((((0.00702803935125)*x625))+(((-0.00702803935125)*x585))+(((1.569)*gclwh5_0*x528))+(((-0.14850585)*x595))+(((0.7845)*gclwh15_0*x522))+(((-0.00702803935125)*x552))+(((1.569)*gclwh13_0*x523))+(((0.007614829125)*x572))+(((-1.0)*x908))+(((-1.569)*gclwh0_0*x546))+(((-0.7845)*gclwh13_0*x518))+(((0.7845)*gclwh0_0*x522))+(((-1.0)*gclwh2_0*x520))+(((0.007614829125)*x617))+(((0.85)*gclwh13_9*x518))+(((-0.007614829125)*x601))+(((-0.85)*gclwh15_9*x522))+((x516*x517))+(((0.14850585)*x536))+(((-1.569)*gclwh15_0*x546))+(((-1.0)*x516*x521))+(((-0.7845)*gclwh5_0*x519))+(((-1.569)*gclwh2_0*x523))+(((-0.14850585)*x583))+(((-1.0)*gclwh13_9*npy*x516))+x924+(((-1.0)*gclwh13_0*x520))+(((0.85)*gclwh5_9*x519))+(((0.7845)*gclwh2_0*x518)));
op[69]=((0.07735732)+(((-1.0)*x926))+x920);
op[70]=((0.012986285)+(((0.00493096)*gclwh15_1*x522))+((gclwh15_10*x522))+(((0.008055325)*gclwh2_1*x523))+((gclwh0_1*x639))+(((0.008055325)*gclwh0_1*x546))+(((-0.012986285)*gclwh0_1*x522))+(((-0.00493096)*gclwh5_1*x519))+(((-0.012986285)*gclwh2_1*x518))+(((-3.60823078949063e-5)*x573))+(((-1.0)*x914))+(((-1.0)*gclwh13_10*x518))+(((-1.0)*gclwh5_10*x519))+(((-0.008055325)*gclwh5_1*x528))+((gclwh5_1*x525))+(((0.008055325)*gclwh15_1*x546))+((gclwh13_1*x600))+(((3.60823078949063e-5)*x590))+x935+x907+(((-0.00493096)*gclwh13_1*x518))+(((-0.008055325)*gclwh13_1*x523))+(((-1.0)*x932)));
op[71]=((((-1.0)*x922))+(((0.03275)*gclwh15_9*x522))+((x521*x629))+(((-0.03275)*gclwh13_9*x518))+(((-1.0)*x903))+((gclwh11_13*x630))+(((0.0655)*gclwh13_9*x523))+(((-0.03275)*gclwh5_9*x519))+(((-1.0)*gclwh7_13*x603))+(((-1.0)*x517*x629))+((gclwh9_13*x575))+(((-1.0)*gclwh5_9*x611))+x737+(((-0.000293394886875)*x572))+x913+(((0.000293394886875)*x601)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x936=htj1*htj1;
CheckValue<IkReal> x937=IKPowWithIntegerCheck(((1.0)+x936),-1);
if(!x937.valid){
continue;
}
cj1array[numsolutions]=((x937.value)*(((1.0)+(((-1.0)*x936)))));
CheckValue<IkReal> x938=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x938.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x938.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x939=htj2*htj2;
CheckValue<IkReal> x940=IKPowWithIntegerCheck(((1.0)+x939),-1);
if(!x940.valid){
continue;
}
cj2array[numsolutions]=((x940.value)*(((1.0)+(((-1.0)*x939)))));
CheckValue<IkReal> x941=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x941.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x941.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x942=htj3*htj3;
CheckValue<IkReal> x943=IKPowWithIntegerCheck(((1.0)+x942),-1);
if(!x943.valid){
continue;
}
cj3array[numsolutions]=((x943.value)*(((1.0)+(((-1.0)*x942)))));
CheckValue<IkReal> x944=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x944.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x944.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x945=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x945);
rxp1_0=(pz*r11);
rxp1_1=(r01*x945);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x946=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x946);
rxp1_0=(pz*r11);
rxp1_1=(r01*x946);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x947=IKPowWithIntegerCheck(r22,-1);
if(!x947.valid){
continue;
}
CheckValue<IkReal> x948=IKPowWithIntegerCheck(sj3,-1);
if(!x948.valid){
continue;
}
sj4array[0]=((x947.value)*(x948.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x949=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x949);
rxp1_0=(pz*r11);
rxp1_1=(r01*x949);
IkReal x950=((16.0)*sj4);
IkReal x951=(cj1*cj2);
IkReal x952=((4.0)*sj3);
IkReal x953=((8.0)*sj4);
IkReal x954=((4.0)*cj4);
IkReal x955=(sj1*sj2);
IkReal x956=((4.0)*sj4);
IkReal x957=(cj3*r02);
IkReal x958=((16.0)*sj3);
IkReal x959=((8.0)*sj3);
IkReal x960=((12.0)*cj4);
IkReal x961=((12.0)*sj4);
IkReal x962=(cj3*r12);
IkReal x963=(r11*x952);
IkReal x964=(r01*x952);
IkReal x965=(r01*x955);
IkReal x966=(cj3*cj4*r01);
IkReal x967=(cj3*cj4*r11);
IkReal x968=(cj3*r10*x954);
IkReal x969=(x961*x962);
IkReal x970=(cj3*r00*x954);
IkReal x971=(x957*x961);
IkReal x972=(r00*x955*x956);
IkReal x973=(r02*x955*x960);
IkReal x974=(r00*x951*x956);
IkReal x975=(r02*x951*x960);
IkReal x976=(r10*x955*x956);
IkReal x977=(r12*x951*x960);
IkReal x978=(r12*x955*x960);
IkReal x979=(r10*x951*x956);
IkReal x980=(x974+x963);
IkReal x981=(x976+x964);
IkReal x982=(x972+x968);
IkReal x983=(x975+x969);
IkReal x984=(x970+x979);
IkReal x985=(x971+x978);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r00*x958))+((r11*x950*x955))+(((-16.0)*x966))+(((-1.0)*r11*x950*x951)))))))+(((0.5)*(IKabs(((((-1.0)*x983))+(((-1.0)*x980))+x982+x973)))))+(((0.5)*(IKabs(((((-1.0)*x982))+((r02*x954*x955))+(((-1.0)*x956*x962))+(((-1.0)*r02*x951*x954))+x980)))))+(IKabs(((((-1.0)*r00*x959))+(((-8.0)*x966))+(((-1.0)*r11*x951*x953))+((r11*x953*x955)))))+(((0.5)*(IKabs(((((-1.0)*x985))+(((-1.0)*x981))+x984+x977)))))+(((0.5)*(IKabs(((((-1.0)*r10*x958))+((r01*x950*x951))+(((-16.0)*x967))+(((-1.0)*x950*x965)))))))+(((0.5)*(IKabs(((((-1.0)*x985))+(((-1.0)*x984))+x981+x977)))))+(IKabs((((r01*x951*x953))+(((-1.0)*r10*x959))+(((-8.0)*x967))+(((-1.0)*x953*x965)))))+(((0.5)*(IKabs(((((-1.0)*x984))+((r12*x951*x954))+(((-1.0)*r12*x954*x955))+(((-1.0)*x956*x957))+x981)))))+(((0.5)*(IKabs(((((-1.0)*x983))+(((-1.0)*x982))+x980+x973))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x986=(r10*sj3);
IkReal x987=(r01*sj4);
IkReal x988=(cj1*cj2);
IkReal x989=(cj3*cj4);
IkReal x990=(sj1*sj2);
IkReal x991=(cj4*r02);
IkReal x992=((4.0)*r11*sj3);
IkReal x993=(cj3*r12*sj4);
IkReal x994=((4.0)*r00*sj4);
IkReal x995=((4.0)*r10*x989);
IkReal x996=((12.0)*x993);
IkReal x997=((4.0)*x993);
IkReal x998=(x988*x994);
IkReal x999=(x990*x994);
IkReal x1000=((12.0)*x990*x991);
IkReal x1001=((12.0)*x988*x991);
IkReal x1002=((4.0)*x990*x991);
IkReal x1003=((4.0)*x988*x991);
IkReal x1004=(x992+x998);
IkReal x1005=(x995+x999);
IkReal x1006=(x1003+x997);
IkReal x1007=(x1001+x996);
IkReal x1008=((((-8.0)*x987*x990))+(((-8.0)*x986))+(((-8.0)*r11*x989))+(((8.0)*x987*x988)));
op[0]=(x1004+x1002+(((-1.0)*x1005))+(((-1.0)*x1006)));
op[1]=x1008;
op[2]=(x1004+x1000+(((-1.0)*x1005))+(((-1.0)*x1007)));
op[3]=((((-16.0)*x987*x990))+(((-16.0)*r11*x989))+(((-16.0)*x986))+(((16.0)*x987*x988)));
op[4]=(x1005+x1000+(((-1.0)*x1004))+(((-1.0)*x1007)));
op[5]=x1008;
op[6]=(x1005+x1002+(((-1.0)*x1004))+(((-1.0)*x1006)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1009=(cj1*cj2);
IkReal x1010=((4.0)*cj4);
IkReal x1011=(sj1*sj2);
IkReal x1012=((4.0)*sj4);
IkReal x1013=(r00*sj3);
IkReal x1014=(cj3*r02);
IkReal x1015=((4.0)*r01*sj3);
IkReal x1016=((16.0)*r11*sj4);
IkReal x1017=(cj3*cj4*r01);
IkReal x1018=((12.0)*cj4*r12);
IkReal x1019=((8.0)*r11*sj4);
IkReal x1020=(cj3*r00*x1010);
IkReal x1021=((12.0)*sj4*x1014);
IkReal x1022=(x1012*x1014);
IkReal x1023=(r10*x1009*x1012);
IkReal x1024=(r10*x1011*x1012);
IkReal x1025=(x1009*x1018);
IkReal x1026=(x1011*x1018);
IkReal x1027=(r12*x1009*x1010);
IkReal x1028=(r12*x1010*x1011);
IkReal x1029=(x1015+x1024);
IkReal x1030=(x1020+x1023);
IkReal x1031=(x1022+x1028);
IkReal x1032=(x1026+x1021);
IkReal x1033=((((-1.0)*x1009*x1019))+(((-8.0)*x1013))+(((-8.0)*x1017))+((x1011*x1019)));
j5evalpoly[0]=((((-1.0)*x1031))+x1030+x1027+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1030))+(((-1.0)*x1032))+x1025+x1029))))+(((htj5*htj5*htj5)*(((((-16.0)*x1017))+(((-16.0)*x1013))+(((-1.0)*x1009*x1016))+((x1011*x1016))))))+(((-1.0)*x1029))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1031))+(((-1.0)*x1030))+x1027+x1029))))+((htj5*x1033))+(((htj5*htj5)*(((((-1.0)*x1032))+x1030+x1025+(((-1.0)*x1029))))))+((x1033*(htj5*htj5*htj5*htj5*htj5))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1034=(cj5*sj4);
IkReal x1035=(sj4*sj5);
if( IKabs((((r00*x1034))+(((-1.0)*r01*x1035))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1034))+((r11*x1035))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1034))+(((-1.0)*r01*x1035))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1034))+((r11*x1035))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1034))+(((-1.0)*r01*x1035))+((cj4*r02))), ((((-1.0)*r10*x1034))+((r11*x1035))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1036=IKsin(j0);
IkReal x1037=IKcos(j0);
IkReal x1038=(r02*sj4);
IkReal x1039=((1.0)*sj3);
IkReal x1040=(r12*sj4);
IkReal x1041=(cj3*cj4);
IkReal x1042=((1.0)*cj5);
IkReal x1043=(r11*sj5);
IkReal x1044=(cj5*r01);
IkReal x1045=(r01*sj5);
IkReal x1046=(r00*sj5);
IkReal x1047=((0.39225)*cj2);
IkReal x1048=(cj5*r11);
IkReal x1049=((1.0)*sj2);
IkReal x1050=(r10*sj5);
IkReal x1051=((1.0)*cj4);
IkReal x1052=((0.39225)*sj1*sj2);
IkReal x1053=(cj1*x1036);
IkReal x1054=(cj4*cj5*sj3);
IkReal x1055=(cj1*x1037);
IkReal x1056=(sj1*x1037);
IkReal x1057=(sj1*x1036);
evalcond[0]=((((-1.0)*r02*x1051))+x1036+(((-1.0)*r00*sj4*x1042))+((sj4*x1045)));
evalcond[1]=((((-1.0)*x1037))+(((-1.0)*r10*sj4*x1042))+(((-1.0)*r12*x1051))+((sj4*x1043)));
evalcond[2]=(((x1037*x1052))+(((0.10915)*x1036))+(((-0.09465)*x1046))+(((-0.09465)*x1044))+(((-1.0)*px))+(((-1.0)*x1047*x1055))+(((-0.425)*x1055)));
evalcond[3]=((((-0.10915)*x1037))+(((-0.09465)*x1050))+(((-0.09465)*x1048))+(((-1.0)*py))+((x1036*x1052))+(((-1.0)*x1047*x1053))+(((-0.425)*x1053)));
evalcond[4]=((((-1.0)*x1038*x1039))+((sj2*x1055))+((r00*x1054))+((cj3*x1046))+((cj3*x1044))+((cj2*x1056))+(((-1.0)*cj4*x1039*x1045)));
evalcond[5]=(((cj3*x1038))+((x1041*x1045))+((sj3*x1044))+((sj3*x1046))+((cj2*x1055))+(((-1.0)*r00*x1041*x1042))+(((-1.0)*x1049*x1056)));
evalcond[6]=((((-1.0)*x1039*x1040))+((sj2*x1053))+((cj3*x1050))+((cj3*x1048))+((r10*x1054))+((cj2*x1057))+(((-1.0)*cj4*x1039*x1043)));
evalcond[7]=((((-1.0)*r10*x1041*x1042))+((sj3*x1050))+((x1041*x1043))+((sj3*x1048))+((cj3*x1040))+((cj2*x1053))+(((-1.0)*x1049*x1057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1058=IKPowWithIntegerCheck(cj3,-1);
if(!x1058.valid){
continue;
}
CheckValue<IkReal> x1059=IKPowWithIntegerCheck(r22,-1);
if(!x1059.valid){
continue;
}
sj4array[0]=((-1.0)*(x1058.value)*(x1059.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1060=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1060);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1060);
IkReal x1061=((16.0)*sj4);
IkReal x1062=(cj1*cj2);
IkReal x1063=((4.0)*sj3);
IkReal x1064=((8.0)*sj4);
IkReal x1065=((4.0)*cj4);
IkReal x1066=(sj1*sj2);
IkReal x1067=((4.0)*sj4);
IkReal x1068=(cj3*r02);
IkReal x1069=((16.0)*sj3);
IkReal x1070=((8.0)*sj3);
IkReal x1071=((12.0)*cj4);
IkReal x1072=((12.0)*sj4);
IkReal x1073=(cj3*r12);
IkReal x1074=(r11*x1063);
IkReal x1075=(r01*x1063);
IkReal x1076=(r01*x1066);
IkReal x1077=(cj3*cj4*r01);
IkReal x1078=(cj3*cj4*r11);
IkReal x1079=(cj3*r10*x1065);
IkReal x1080=(x1072*x1073);
IkReal x1081=(cj3*r00*x1065);
IkReal x1082=(x1068*x1072);
IkReal x1083=(r00*x1066*x1067);
IkReal x1084=(r02*x1066*x1071);
IkReal x1085=(r00*x1062*x1067);
IkReal x1086=(r02*x1062*x1071);
IkReal x1087=(r10*x1066*x1067);
IkReal x1088=(r12*x1062*x1071);
IkReal x1089=(r12*x1066*x1071);
IkReal x1090=(r10*x1062*x1067);
IkReal x1091=(x1074+x1085);
IkReal x1092=(x1075+x1087);
IkReal x1093=(x1079+x1083);
IkReal x1094=(x1086+x1080);
IkReal x1095=(x1090+x1081);
IkReal x1096=(x1082+x1089);
j5eval[0]=((((0.5)*(IKabs((x1092+(((-1.0)*r12*x1065*x1066))+((r12*x1062*x1065))+(((-1.0)*x1095))+(((-1.0)*x1067*x1068)))))))+(IKabs(((((-8.0)*x1078))+(((-1.0)*r10*x1070))+((r01*x1062*x1064))+(((-1.0)*x1064*x1076)))))+(IKabs(((((-8.0)*x1077))+(((-1.0)*r00*x1070))+(((-1.0)*r11*x1062*x1064))+((r11*x1064*x1066)))))+(((0.5)*(IKabs(((((-1.0)*r10*x1069))+(((-1.0)*x1061*x1076))+((r01*x1061*x1062))+(((-16.0)*x1078)))))))+(((0.5)*(IKabs((x1093+x1084+(((-1.0)*x1091))+(((-1.0)*x1094)))))))+(((0.5)*(IKabs((x1095+x1088+(((-1.0)*x1096))+(((-1.0)*x1092)))))))+(((0.5)*(IKabs((x1091+x1084+(((-1.0)*x1094))+(((-1.0)*x1093)))))))+(((0.5)*(IKabs((x1092+x1088+(((-1.0)*x1096))+(((-1.0)*x1095)))))))+(((0.5)*(IKabs((((r11*x1061*x1066))+(((-1.0)*r00*x1069))+(((-1.0)*r11*x1061*x1062))+(((-16.0)*x1077)))))))+(((0.5)*(IKabs((x1091+(((-1.0)*x1093))+((r02*x1065*x1066))+(((-1.0)*x1067*x1073))+(((-1.0)*r02*x1062*x1065))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1097=(r10*sj3);
IkReal x1098=(r01*sj4);
IkReal x1099=(cj1*cj2);
IkReal x1100=(cj3*cj4);
IkReal x1101=(sj1*sj2);
IkReal x1102=(cj4*r02);
IkReal x1103=((4.0)*r11*sj3);
IkReal x1104=(cj3*r12*sj4);
IkReal x1105=((4.0)*r00*sj4);
IkReal x1106=((4.0)*r10*x1100);
IkReal x1107=((12.0)*x1104);
IkReal x1108=((4.0)*x1104);
IkReal x1109=(x1099*x1105);
IkReal x1110=(x1101*x1105);
IkReal x1111=((12.0)*x1101*x1102);
IkReal x1112=((12.0)*x1099*x1102);
IkReal x1113=((4.0)*x1101*x1102);
IkReal x1114=((4.0)*x1099*x1102);
IkReal x1115=(x1103+x1109);
IkReal x1116=(x1106+x1110);
IkReal x1117=(x1108+x1114);
IkReal x1118=(x1107+x1112);
IkReal x1119=((((-8.0)*r11*x1100))+(((-8.0)*x1097))+(((-8.0)*x1098*x1101))+(((8.0)*x1098*x1099)));
op[0]=(x1113+x1115+(((-1.0)*x1116))+(((-1.0)*x1117)));
op[1]=x1119;
op[2]=(x1111+x1115+(((-1.0)*x1118))+(((-1.0)*x1116)));
op[3]=((((-16.0)*x1097))+(((16.0)*x1098*x1099))+(((-16.0)*r11*x1100))+(((-16.0)*x1098*x1101)));
op[4]=(x1111+x1116+(((-1.0)*x1118))+(((-1.0)*x1115)));
op[5]=x1119;
op[6]=(x1113+x1116+(((-1.0)*x1117))+(((-1.0)*x1115)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1120=(cj1*cj2);
IkReal x1121=((4.0)*cj4);
IkReal x1122=(sj1*sj2);
IkReal x1123=((4.0)*sj4);
IkReal x1124=(r00*sj3);
IkReal x1125=(cj3*r02);
IkReal x1126=((4.0)*r01*sj3);
IkReal x1127=((16.0)*r11*sj4);
IkReal x1128=(cj3*cj4*r01);
IkReal x1129=((12.0)*cj4*r12);
IkReal x1130=((8.0)*r11*sj4);
IkReal x1131=(cj3*r00*x1121);
IkReal x1132=((12.0)*sj4*x1125);
IkReal x1133=(x1123*x1125);
IkReal x1134=(r10*x1120*x1123);
IkReal x1135=(r10*x1122*x1123);
IkReal x1136=(x1120*x1129);
IkReal x1137=(x1122*x1129);
IkReal x1138=(r12*x1120*x1121);
IkReal x1139=(r12*x1121*x1122);
IkReal x1140=(x1126+x1135);
IkReal x1141=(x1131+x1134);
IkReal x1142=(x1139+x1133);
IkReal x1143=(x1132+x1137);
IkReal x1144=((((-8.0)*x1124))+(((-8.0)*x1128))+((x1122*x1130))+(((-1.0)*x1120*x1130)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*((x1140+x1136+(((-1.0)*x1141))+(((-1.0)*x1143))))))+x1141+x1138+(((htj5*htj5*htj5)*((((x1122*x1127))+(((-1.0)*x1120*x1127))+(((-16.0)*x1124))+(((-16.0)*x1128))))))+(((htj5*htj5)*((x1141+x1136+(((-1.0)*x1140))+(((-1.0)*x1143))))))+(((-1.0)*x1142))+(((-1.0)*x1140))+((x1144*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x1144))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1140+x1138+(((-1.0)*x1142))+(((-1.0)*x1141)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1145=(cj5*sj4);
IkReal x1146=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1146))+((r00*x1145))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1146))+(((-1.0)*r10*x1145))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1146))+((r00*x1145))+((cj4*r02))))+IKsqr((((r11*x1146))+(((-1.0)*r10*x1145))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1146))+((r00*x1145))+((cj4*r02))), (((r11*x1146))+(((-1.0)*r10*x1145))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1147=IKsin(j0);
IkReal x1148=IKcos(j0);
IkReal x1149=(r02*sj4);
IkReal x1150=((1.0)*sj3);
IkReal x1151=(r12*sj4);
IkReal x1152=(cj3*cj4);
IkReal x1153=((1.0)*cj5);
IkReal x1154=(r11*sj5);
IkReal x1155=(cj5*r01);
IkReal x1156=(r01*sj5);
IkReal x1157=(r00*sj5);
IkReal x1158=((0.39225)*cj2);
IkReal x1159=(cj5*r11);
IkReal x1160=((1.0)*sj2);
IkReal x1161=(r10*sj5);
IkReal x1162=((1.0)*cj4);
IkReal x1163=((0.39225)*sj1*sj2);
IkReal x1164=(cj1*x1147);
IkReal x1165=(cj4*cj5*sj3);
IkReal x1166=(cj1*x1148);
IkReal x1167=(sj1*x1148);
IkReal x1168=(sj1*x1147);
evalcond[0]=(x1147+(((-1.0)*r02*x1162))+(((-1.0)*r00*sj4*x1153))+((sj4*x1156)));
evalcond[1]=((((-1.0)*r12*x1162))+(((-1.0)*x1148))+(((-1.0)*r10*sj4*x1153))+((sj4*x1154)));
evalcond[2]=((((0.10915)*x1147))+(((-0.425)*x1166))+(((-1.0)*x1158*x1166))+((x1148*x1163))+(((-1.0)*px))+(((-0.09465)*x1155))+(((-0.09465)*x1157)));
evalcond[3]=((((-0.425)*x1164))+(((-1.0)*x1158*x1164))+(((-0.09465)*x1161))+((x1147*x1163))+(((-1.0)*py))+(((-0.10915)*x1148))+(((-0.09465)*x1159)));
evalcond[4]=(((sj2*x1166))+(((-1.0)*x1149*x1150))+((cj3*x1155))+((cj3*x1157))+((r00*x1165))+(((-1.0)*cj4*x1150*x1156))+((cj2*x1167)));
evalcond[5]=((((-1.0)*r00*x1152*x1153))+((cj3*x1149))+((sj3*x1157))+((sj3*x1155))+((x1152*x1156))+((cj2*x1166))+(((-1.0)*x1160*x1167)));
evalcond[6]=(((sj2*x1164))+((cj3*x1159))+((r10*x1165))+(((-1.0)*cj4*x1150*x1154))+((cj3*x1161))+((cj2*x1168))+(((-1.0)*x1150*x1151)));
evalcond[7]=((((-1.0)*r10*x1152*x1153))+((cj3*x1151))+((sj3*x1159))+((x1152*x1154))+((cj2*x1164))+(((-1.0)*x1160*x1168))+((sj3*x1161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1169=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1169);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1169);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1170=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1170);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1170);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1171=IKPowWithIntegerCheck(r22,-1);
if(!x1171.valid){
continue;
}
CheckValue<IkReal> x1172=IKPowWithIntegerCheck(sj3,-1);
if(!x1172.valid){
continue;
}
sj4array[0]=((x1171.value)*(x1172.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1173=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1173);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1173);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1174=((4.0)*r01);
IkReal x1175=((16.0)*r00);
IkReal x1176=(cj3*sj2);
IkReal x1177=((8.0)*r00);
IkReal x1178=(cj2*cj3);
IkReal x1179=(cj4*r01);
IkReal x1180=((16.0)*cj1);
IkReal x1181=((8.0)*sj1);
IkReal x1182=((16.0)*sj1);
IkReal x1183=((8.0)*cj1);
IkReal x1184=(cj2*sj3);
IkReal x1185=(sj2*sj3);
IkReal x1186=(sj1*x1184);
IkReal x1187=((4.0)*cj4*r00);
IkReal x1188=(cj1*x1185);
IkReal x1189=(((x1174*x1188))+((x1174*x1186))+((sj1*x1174*x1176))+((sj1*x1185*x1187)));
IkReal x1190=(((cj1*x1174*x1178))+((cj1*x1184*x1187))+((sj1*x1178*x1187))+((cj1*x1176*x1187)));
IkReal x1191=(x1189+(((-1.0)*x1190)));
IkReal x1192=((((-1.0)*sj1*x1176*x1177))+(((-1.0)*x1176*x1179*x1183))+((cj1*x1177*x1178))+(((-1.0)*x1179*x1183*x1184))+(((-1.0)*x1178*x1179*x1181))+((x1179*x1181*x1185))+(((-1.0)*x1177*x1188))+(((-1.0)*x1177*x1186)));
IkReal x1193=(x1190+(((-1.0)*x1189)));
op[0]=x1191;
op[1]=x1192;
op[2]=x1191;
op[3]=((((-1.0)*x1175*x1186))+(((-1.0)*x1175*x1188))+(((-1.0)*sj1*x1175*x1176))+((cj1*x1175*x1178))+((x1179*x1182*x1185))+(((-1.0)*x1176*x1179*x1180))+(((-1.0)*x1179*x1180*x1184))+(((-1.0)*x1178*x1179*x1182)));
op[4]=x1193;
op[5]=x1192;
op[6]=x1193;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1194=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1194)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1194))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1194))))+IKsqr(((((-1.0)*cj5*r10*x1194))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1194))), ((((-1.0)*cj5*r10*x1194))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1195=IKcos(j0);
IkReal x1196=IKsin(j0);
IkReal x1197=((1.0)*cj3);
IkReal x1198=(r11*sj5);
IkReal x1199=(cj5*r01);
IkReal x1200=(cj1*cj2);
IkReal x1201=(cj5*r11);
IkReal x1202=(r01*sj5);
IkReal x1203=(cj3*cj4);
IkReal x1204=(r00*sj5);
IkReal x1205=(r10*sj5);
IkReal x1206=(cj4*cj5*r00);
IkReal x1207=(cj4*cj5*r10);
IkReal x1208=((1.0)*cj4*sj3);
IkReal x1209=(cj1*x1196);
IkReal x1210=(cj1*x1195);
IkReal x1211=(sj1*x1195);
IkReal x1212=((1.0)*cj5*sj4);
IkReal x1213=(sj1*sj2*x1196);
evalcond[0]=(x1196+((sj4*x1202))+(((-1.0)*r00*x1212)));
evalcond[1]=(((sj4*x1198))+(((-1.0)*r10*x1212))+(((-1.0)*x1195)));
evalcond[2]=((((-1.0)*x1202*x1208))+((sj2*x1210))+((sj3*x1206))+((cj3*x1204))+((cj2*x1211))+((cj3*x1199)));
evalcond[3]=(((cj2*sj1*x1196))+((sj2*x1209))+((sj3*x1207))+((cj3*x1205))+((cj3*x1201))+(((-1.0)*x1198*x1208)));
evalcond[4]=(((x1202*x1203))+((sj3*x1204))+((x1195*x1200))+((sj3*x1199))+(((-1.0)*x1197*x1206))+(((-1.0)*sj2*x1211)));
evalcond[5]=(((sj3*x1205))+((sj3*x1201))+(((-1.0)*x1197*x1207))+((x1196*x1200))+((x1198*x1203))+(((-1.0)*x1213)));
evalcond[6]=((((0.39225)*sj2*x1211))+(((-0.09465)*x1199))+(((-0.39225)*x1195*x1200))+(((0.10915)*x1196))+(((-1.0)*px))+(((-0.425)*x1210))+(((-0.09465)*x1204)));
evalcond[7]=((((-0.39225)*x1196*x1200))+(((0.39225)*x1213))+(((-0.10915)*x1195))+(((-1.0)*py))+(((-0.425)*x1209))+(((-0.09465)*x1205))+(((-0.09465)*x1201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1214=IKPowWithIntegerCheck(cj3,-1);
if(!x1214.valid){
continue;
}
CheckValue<IkReal> x1215=IKPowWithIntegerCheck(r22,-1);
if(!x1215.valid){
continue;
}
sj4array[0]=((-1.0)*(x1214.value)*(x1215.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1216=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1216);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1216);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1217=((4.0)*r01);
IkReal x1218=((16.0)*r00);
IkReal x1219=(cj3*sj2);
IkReal x1220=((8.0)*r00);
IkReal x1221=(cj2*cj3);
IkReal x1222=(cj4*r01);
IkReal x1223=((16.0)*cj1);
IkReal x1224=((8.0)*sj1);
IkReal x1225=((16.0)*sj1);
IkReal x1226=((8.0)*cj1);
IkReal x1227=(cj2*sj3);
IkReal x1228=(sj2*sj3);
IkReal x1229=(sj1*x1227);
IkReal x1230=((4.0)*cj4*r00);
IkReal x1231=(cj1*x1228);
IkReal x1232=(((x1217*x1231))+((sj1*x1217*x1219))+((x1217*x1229))+((sj1*x1228*x1230)));
IkReal x1233=(((cj1*x1217*x1221))+((sj1*x1221*x1230))+((cj1*x1227*x1230))+((cj1*x1219*x1230)));
IkReal x1234=(x1232+(((-1.0)*x1233)));
IkReal x1235=((((-1.0)*x1220*x1231))+(((-1.0)*x1220*x1229))+(((-1.0)*sj1*x1219*x1220))+(((-1.0)*x1219*x1222*x1226))+(((-1.0)*x1221*x1222*x1224))+(((-1.0)*x1222*x1226*x1227))+((cj1*x1220*x1221))+((x1222*x1224*x1228)));
IkReal x1236=(x1233+(((-1.0)*x1232)));
op[0]=x1234;
op[1]=x1235;
op[2]=x1234;
op[3]=(((x1222*x1225*x1228))+(((-1.0)*x1218*x1231))+(((-1.0)*x1218*x1229))+(((-1.0)*x1222*x1223*x1227))+((cj1*x1218*x1221))+(((-1.0)*x1219*x1222*x1223))+(((-1.0)*x1221*x1222*x1225))+(((-1.0)*sj1*x1218*x1219)));
op[4]=x1236;
op[5]=x1235;
op[6]=x1236;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1237=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1237))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1237))))+IKsqr(((((-1.0)*cj5*r10*x1237))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1237))), ((((-1.0)*cj5*r10*x1237))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1238=IKcos(j0);
IkReal x1239=IKsin(j0);
IkReal x1240=((1.0)*cj3);
IkReal x1241=(r11*sj5);
IkReal x1242=(cj5*r01);
IkReal x1243=(cj1*cj2);
IkReal x1244=(cj5*r11);
IkReal x1245=(r01*sj5);
IkReal x1246=(cj3*cj4);
IkReal x1247=(r00*sj5);
IkReal x1248=(r10*sj5);
IkReal x1249=(cj4*cj5*r00);
IkReal x1250=(cj4*cj5*r10);
IkReal x1251=((1.0)*cj4*sj3);
IkReal x1252=(cj1*x1239);
IkReal x1253=(cj1*x1238);
IkReal x1254=(sj1*x1238);
IkReal x1255=((1.0)*cj5*sj4);
IkReal x1256=(sj1*sj2*x1239);
evalcond[0]=(x1239+(((-1.0)*r00*x1255))+((sj4*x1245)));
evalcond[1]=((((-1.0)*x1238))+((sj4*x1241))+(((-1.0)*r10*x1255)));
evalcond[2]=(((cj2*x1254))+((sj3*x1249))+(((-1.0)*x1245*x1251))+((cj3*x1242))+((cj3*x1247))+((sj2*x1253)));
evalcond[3]=((((-1.0)*x1241*x1251))+((cj2*sj1*x1239))+((sj3*x1250))+((cj3*x1244))+((cj3*x1248))+((sj2*x1252)));
evalcond[4]=(((sj3*x1247))+((sj3*x1242))+(((-1.0)*x1240*x1249))+((x1245*x1246))+((x1238*x1243))+(((-1.0)*sj2*x1254)));
evalcond[5]=(((x1239*x1243))+((sj3*x1244))+((sj3*x1248))+((x1241*x1246))+(((-1.0)*x1256))+(((-1.0)*x1240*x1250)));
evalcond[6]=((((-1.0)*px))+(((0.10915)*x1239))+(((-0.09465)*x1242))+(((-0.09465)*x1247))+(((-0.425)*x1253))+(((0.39225)*sj2*x1254))+(((-0.39225)*x1238*x1243)));
evalcond[7]=((((0.39225)*x1256))+(((-0.39225)*x1239*x1243))+(((-1.0)*py))+(((-0.09465)*x1244))+(((-0.09465)*x1248))+(((-0.425)*x1252))+(((-0.10915)*x1238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1259 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1259.valid){
continue;
}
IkReal x1257=((1.0)*(x1259.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1260=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1260.valid){
continue;
}
if( (((-1.0)*(x1260.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1260.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1258=((-1.0)*(IKasin(((-1.0)*(x1260.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1257))+(((-1.0)*x1258)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1257))+(((1.0)*x1258)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1261=cj5*cj5;
IkReal x1262=r21*r21;
IkReal x1263=(sj3*x1261);
IkReal x1264=(((sj3*(r22*r22)))+((x1263*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1262*x1263))+((sj3*x1262)));
j4eval[0]=x1264;
j4eval[1]=IKsign(x1264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1265=cj5*cj5;
IkReal x1266=r21*r21;
IkReal x1267=((1.0)*cj3);
IkReal x1268=(cj3*x1265);
IkReal x1269=((((-1.0)*x1266*x1267))+(((-1.0)*x1267*(r22*r22)))+((x1266*x1268))+(((-1.0)*x1265*x1267*(r20*r20)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1269;
j4eval[1]=IKsign(x1269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1270=cj2*cj2;
IkReal x1271=cj1*cj1;
IkReal x1272=(cj1*sj1*sj2);
IkReal x1273=(cj2*x1271);
IkReal x1274=(x1270*x1271);
j0eval[0]=((-6.19369221392727)+(((-12.4570625281677)*x1273))+(((12.4570625281677)*x1272))+(((-11.4971359451148)*x1274))+(((-1.0)*x1271))+(((11.4971359451148)*cj2*x1272))+(((5.74856797255738)*x1270)));
j0eval[1]=IKsign(((-66309514.0)+(((-10705975.0)*x1271))+(((-133365000.0)*x1273))+(((123088050.0)*cj2*x1272))+(((133365000.0)*x1272))+(((-123088050.0)*x1274))+(((61544025.0)*x1270))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1275=((1.0)*cj5);
IkReal x1276=((1.0)*sj5);
IkReal x1277=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1277;
j0eval[1]=IKsign(x1277);
j0eval[2]=((IKabs(((((-1.0)*r00*x1276))+(((-1.0)*r01*x1275)))))+(IKabs(((((-1.0)*r11*x1275))+(((-1.0)*r10*x1276))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1278=cj5*cj5;
IkReal x1279=r21*r21;
IkReal x1280=(sj1*sj2);
IkReal x1281=(r21*sj5);
IkReal x1282=(cj5*r20);
IkReal x1283=(cj1*cj2);
IkReal x1284=(x1279+(r22*r22)+(((-2.0)*x1281*x1282))+(((-1.0)*x1278*x1279))+((x1278*(r20*r20))));
j4eval[0]=x1284;
j4eval[1]=IKsign(x1284);
j4eval[2]=((IKabs((((r22*x1280))+(((-1.0)*r22*x1283)))))+(IKabs(((((-1.0)*x1281*x1283))+(((-1.0)*x1280*x1282))+((x1282*x1283))+((x1280*x1281))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1285=(cj1*cj2);
IkReal x1286=(cj5*r01);
IkReal x1287=(sj1*sj2);
IkReal x1288=(r00*sj5);
IkReal x1289=((20000.0)*px);
IkReal x1290=((8500.0)*cj1);
CheckValue<IkReal> x1291=IKPowWithIntegerCheck(((((2183.0)*x1285))+(((-2183.0)*x1287))),-1);
if(!x1291.valid){
continue;
}
CheckValue<IkReal> x1292=IKPowWithIntegerCheck(((((-1.0)*x1287))+x1285),-1);
if(!x1292.valid){
continue;
}
if( IKabs(((x1291.value)*((((x1285*x1289))+(((-1.0)*x1286*x1290))+(((-1.0)*x1288*x1290))+(((5952.0)*x1286*x1287))+(((5952.0)*x1287*x1288))+(((-5952.0)*x1285*x1286))+(((-5952.0)*x1285*x1288))+(((-1.0)*x1287*x1289)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1292.value)*(((((-1.0)*x1288))+(((-1.0)*x1286)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1291.value)*((((x1285*x1289))+(((-1.0)*x1286*x1290))+(((-1.0)*x1288*x1290))+(((5952.0)*x1286*x1287))+(((5952.0)*x1287*x1288))+(((-5952.0)*x1285*x1286))+(((-5952.0)*x1285*x1288))+(((-1.0)*x1287*x1289))))))+IKsqr(((x1292.value)*(((((-1.0)*x1288))+(((-1.0)*x1286))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1291.value)*((((x1285*x1289))+(((-1.0)*x1286*x1290))+(((-1.0)*x1288*x1290))+(((5952.0)*x1286*x1287))+(((5952.0)*x1287*x1288))+(((-5952.0)*x1285*x1286))+(((-5952.0)*x1285*x1288))+(((-1.0)*x1287*x1289))))), ((x1292.value)*(((((-1.0)*x1288))+(((-1.0)*x1286))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1293=IKcos(j0);
IkReal x1294=IKsin(j0);
IkReal x1295=(cj5*r01);
IkReal x1296=(cj1*cj2);
IkReal x1297=(sj1*sj2);
IkReal x1298=((0.425)*cj1);
IkReal x1299=(r00*sj5);
IkReal x1300=(cj5*r11);
IkReal x1301=(r10*sj5);
IkReal x1302=((0.39225)*x1293);
IkReal x1303=(x1294*x1297);
evalcond[0]=(x1299+x1295+((x1293*x1296))+(((-1.0)*x1293*x1297)));
evalcond[1]=(x1300+x1301+(((-1.0)*x1303))+((x1294*x1296)));
evalcond[2]=((((0.10915)*x1294))+(((-1.0)*x1296*x1302))+(((-1.0)*px))+(((-1.0)*x1293*x1298))+((x1297*x1302))+(((-0.09465)*x1299))+(((-0.09465)*x1295)));
evalcond[3]=((((0.39225)*x1303))+(((-1.0)*py))+(((-0.10915)*x1293))+(((-0.09465)*x1300))+(((-0.09465)*x1301))+(((-1.0)*x1294*x1298))+(((-0.39225)*x1294*x1296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1304=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1304;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1305=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1305;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1305);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1306=((1.0)*cj5);
IkReal x1307=((((-1.0)*r21*x1306))+(((-1.0)*r20*sj5)));
j4eval[0]=x1307;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1306))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1306))))));
j4eval[2]=IKsign(x1307);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1308=((1.0)*cj5);
CheckValue<IkReal> x1309 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1308))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1309.valid){
continue;
}
CheckValue<IkReal> x1310=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1308))+(((-1.0)*r20*sj5)))),-1);
if(!x1310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1309.value)+(((1.5707963267949)*(x1310.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1311=IKsin(j4);
IkReal x1312=IKcos(j4);
IkReal x1313=(cj5*r10);
IkReal x1314=(cj2*sj1);
IkReal x1315=(r01*sj5);
IkReal x1316=(cj5*r00);
IkReal x1317=(cj5*r20);
IkReal x1318=(cj1*sj2);
IkReal x1319=((1.0)*x1312);
IkReal x1320=((1.0)*x1311);
IkReal x1321=(sj5*x1311);
evalcond[0]=((((-1.0)*r22*x1319))+((r21*x1321))+(((-1.0)*x1317*x1320)));
evalcond[1]=(((x1311*x1315))+sj0+(((-1.0)*r02*x1319))+(((-1.0)*x1316*x1320)));
evalcond[2]=((((-1.0)*x1313*x1320))+(((-1.0)*r12*x1319))+((r11*x1321))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1320))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1319))+((x1312*x1317)));
evalcond[4]=((((-1.0)*x1315*x1319))+(((-1.0)*r02*x1320))+((x1312*x1316))+((cj0*x1314))+((cj0*x1318)));
evalcond[5]=((((-1.0)*r11*sj5*x1319))+(((-1.0)*r12*x1320))+((x1312*x1313))+((sj0*x1314))+((sj0*x1318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1322=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1322.valid){
continue;
}
CheckValue<IkReal> x1323 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1322.value)))+(x1323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1324=IKsin(j4);
IkReal x1325=IKcos(j4);
IkReal x1326=(cj5*r10);
IkReal x1327=(cj2*sj1);
IkReal x1328=(r01*sj5);
IkReal x1329=(cj5*r00);
IkReal x1330=(cj5*r20);
IkReal x1331=(cj1*sj2);
IkReal x1332=((1.0)*x1325);
IkReal x1333=((1.0)*x1324);
IkReal x1334=(sj5*x1324);
evalcond[0]=((((-1.0)*r22*x1332))+(((-1.0)*x1330*x1333))+((r21*x1334)));
evalcond[1]=(sj0+((x1324*x1328))+(((-1.0)*x1329*x1333))+(((-1.0)*r02*x1332)));
evalcond[2]=((((-1.0)*x1326*x1333))+((r11*x1334))+(((-1.0)*r12*x1332))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1333))+(((-1.0)*r21*sj5*x1332))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1325*x1330)));
evalcond[4]=(((cj0*x1331))+(((-1.0)*x1328*x1332))+((x1325*x1329))+(((-1.0)*r02*x1333))+((cj0*x1327)));
evalcond[5]=(((sj0*x1331))+((x1325*x1326))+(((-1.0)*r11*sj5*x1332))+(((-1.0)*r12*x1333))+((sj0*x1327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1335=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1335.valid){
continue;
}
CheckValue<IkReal> x1336 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1335.value)))+(x1336.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1337=IKsin(j4);
IkReal x1338=IKcos(j4);
IkReal x1339=(cj5*r10);
IkReal x1340=(cj2*sj1);
IkReal x1341=(r01*sj5);
IkReal x1342=(cj5*r00);
IkReal x1343=(cj5*r20);
IkReal x1344=(cj1*sj2);
IkReal x1345=((1.0)*x1338);
IkReal x1346=((1.0)*x1337);
IkReal x1347=(sj5*x1337);
evalcond[0]=((((-1.0)*r22*x1345))+(((-1.0)*x1343*x1346))+((r21*x1347)));
evalcond[1]=(sj0+(((-1.0)*r02*x1345))+((x1337*x1341))+(((-1.0)*x1342*x1346)));
evalcond[2]=((((-1.0)*r12*x1345))+(((-1.0)*x1339*x1346))+((r11*x1347))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x1338*x1343))+(((-1.0)*r21*sj5*x1345))+(((-1.0)*r22*x1346)));
evalcond[4]=((((-1.0)*r02*x1346))+(((-1.0)*x1341*x1345))+((x1338*x1342))+((cj0*x1340))+((cj0*x1344)));
evalcond[5]=(((x1338*x1339))+((sj0*x1340))+((sj0*x1344))+(((-1.0)*r12*x1346))+(((-1.0)*r11*sj5*x1345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1348=cj5*cj5;
IkReal x1349=r21*r21;
IkReal x1350=(sj1*sj2);
IkReal x1351=(r21*sj5);
IkReal x1352=(cj1*cj2);
IkReal x1353=(cj5*r20);
CheckValue<IkReal> x1354 = IKatan2WithCheck(IkReal((((r22*x1350))+(((-1.0)*r22*x1352)))),IkReal(((((-1.0)*x1351*x1352))+(((-1.0)*x1350*x1353))+((x1350*x1351))+((x1352*x1353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1354.valid){
continue;
}
CheckValue<IkReal> x1355=IKPowWithIntegerCheck(IKsign((x1349+(r22*r22)+(((-2.0)*x1351*x1353))+((x1348*(r20*r20)))+(((-1.0)*x1348*x1349)))),-1);
if(!x1355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1354.value)+(((1.5707963267949)*(x1355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1356=IKsin(j4);
IkReal x1357=IKcos(j4);
IkReal x1358=(r21*sj5);
IkReal x1359=(cj5*r20);
IkReal x1360=((1.0)*x1357);
IkReal x1361=((1.0)*x1356);
evalcond[0]=((((-1.0)*x1359*x1361))+(((-1.0)*r22*x1360))+((x1356*x1358)));
evalcond[1]=(((x1357*x1359))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1361))+(((-1.0)*x1358*x1360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1362=(cj5*sj4);
IkReal x1363=(sj4*sj5);
if( IKabs((((r00*x1362))+(((-1.0)*r01*x1363))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1362))+((r11*x1363))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1362))+(((-1.0)*r01*x1363))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1362))+((r11*x1363))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1362))+(((-1.0)*r01*x1363))+((cj4*r02))), ((((-1.0)*r10*x1362))+((r11*x1363))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1364=IKcos(j0);
IkReal x1365=IKsin(j0);
IkReal x1366=(cj4*cj5);
IkReal x1367=(cj5*r01);
IkReal x1368=(r11*sj5);
IkReal x1369=(cj1*cj2);
IkReal x1370=((1.0)*sj4);
IkReal x1371=(r00*sj5);
IkReal x1372=(cj5*r11);
IkReal x1373=((1.0)*cj4);
IkReal x1374=(r01*sj5);
IkReal x1375=(r10*sj5);
IkReal x1376=(sj1*x1364);
IkReal x1377=(cj1*x1365);
IkReal x1378=(cj1*x1364);
IkReal x1379=(sj1*sj2*x1365);
evalcond[0]=(x1365+(((-1.0)*r02*x1373))+((sj4*x1374))+(((-1.0)*cj5*r00*x1370)));
evalcond[1]=((((-1.0)*x1364))+(((-1.0)*cj5*r10*x1370))+((sj4*x1368))+(((-1.0)*r12*x1373)));
evalcond[2]=(x1367+x1371+(((-1.0)*sj2*x1376))+((x1364*x1369)));
evalcond[3]=(x1372+x1375+(((-1.0)*x1379))+((x1365*x1369)));
evalcond[4]=(((sj2*x1378))+(((-1.0)*r02*x1370))+((cj2*x1376))+(((-1.0)*x1373*x1374))+((r00*x1366)));
evalcond[5]=(((r10*x1366))+((sj2*x1377))+(((-1.0)*r12*x1370))+((cj2*sj1*x1365))+(((-1.0)*x1368*x1373)));
evalcond[6]=((((0.10915)*x1365))+(((-0.39225)*x1364*x1369))+(((-1.0)*px))+(((-0.09465)*x1367))+(((-0.09465)*x1371))+(((-0.425)*x1378))+(((0.39225)*sj2*x1376)));
evalcond[7]=((((0.39225)*x1379))+(((-0.39225)*x1365*x1369))+(((-1.0)*py))+(((-0.10915)*x1364))+(((-0.09465)*x1372))+(((-0.09465)*x1375))+(((-0.425)*x1377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1380=((1.0)*cj5);
IkReal x1381=((1.0)*sj5);
CheckValue<IkReal> x1382 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1380))+(((-1.0)*r10*x1381)))),IkReal(((((-1.0)*r00*x1381))+(((-1.0)*r01*x1380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1382.valid){
continue;
}
CheckValue<IkReal> x1383=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x1383.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1382.value)+(((1.5707963267949)*(x1383.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1384=IKcos(j0);
IkReal x1385=IKsin(j0);
IkReal x1386=(cj5*r01);
IkReal x1387=(cj1*cj2);
IkReal x1388=(sj1*sj2);
IkReal x1389=((0.425)*cj1);
IkReal x1390=(r00*sj5);
IkReal x1391=(cj5*r11);
IkReal x1392=(r10*sj5);
IkReal x1393=((0.39225)*x1384);
IkReal x1394=(x1385*x1388);
evalcond[0]=(x1386+x1390+(((-1.0)*x1384*x1388))+((x1384*x1387)));
evalcond[1]=(x1392+x1391+(((-1.0)*x1394))+((x1385*x1387)));
evalcond[2]=(((x1388*x1393))+(((-1.0)*x1384*x1389))+(((-0.09465)*x1386))+(((-0.09465)*x1390))+(((-1.0)*px))+(((0.10915)*x1385))+(((-1.0)*x1387*x1393)));
evalcond[3]=((((-0.09465)*x1392))+(((-0.09465)*x1391))+(((0.39225)*x1394))+(((-1.0)*py))+(((-0.39225)*x1385*x1387))+(((-0.10915)*x1384))+(((-1.0)*x1385*x1389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1395=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1395;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1396=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1396;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1396);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1397=((1.0)*cj5);
IkReal x1398=((((-1.0)*r21*x1397))+(((-1.0)*r20*sj5)));
j4eval[0]=x1398;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1397))+(((-1.0)*r10*sj0*x1397))+((cj0*r01*sj5)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1398);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1399=((1.0)*cj5);
CheckValue<IkReal> x1400=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1399))+(((-1.0)*r20*sj5)))),-1);
if(!x1400.valid){
continue;
}
CheckValue<IkReal> x1401 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1399))+(((-1.0)*r10*sj0*x1399))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1400.value)))+(x1401.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1402=IKsin(j4);
IkReal x1403=IKcos(j4);
IkReal x1404=(cj5*r10);
IkReal x1405=(cj2*sj1);
IkReal x1406=(r01*sj5);
IkReal x1407=(cj5*r00);
IkReal x1408=(cj5*r20);
IkReal x1409=(cj1*sj2);
IkReal x1410=((1.0)*x1403);
IkReal x1411=((1.0)*x1402);
IkReal x1412=(sj5*x1402);
evalcond[0]=(((r21*x1412))+(((-1.0)*r22*x1410))+(((-1.0)*x1408*x1411)));
evalcond[1]=(sj0+(((-1.0)*r02*x1410))+(((-1.0)*x1407*x1411))+((x1402*x1406)));
evalcond[2]=((((-1.0)*x1404*x1411))+((r11*x1412))+(((-1.0)*r12*x1410))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1411))+(((-1.0)*r21*sj5*x1410))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1403*x1408)));
evalcond[4]=((((-1.0)*r02*x1411))+((cj0*x1405))+((cj0*x1409))+((x1403*x1407))+(((-1.0)*x1406*x1410)));
evalcond[5]=((((-1.0)*r11*sj5*x1410))+((sj0*x1405))+((sj0*x1409))+((x1403*x1404))+(((-1.0)*r12*x1411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1413=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1413.valid){
continue;
}
CheckValue<IkReal> x1414 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1413.value)))+(x1414.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1415=IKsin(j4);
IkReal x1416=IKcos(j4);
IkReal x1417=(cj5*r10);
IkReal x1418=(cj2*sj1);
IkReal x1419=(r01*sj5);
IkReal x1420=(cj5*r00);
IkReal x1421=(cj5*r20);
IkReal x1422=(cj1*sj2);
IkReal x1423=((1.0)*x1416);
IkReal x1424=((1.0)*x1415);
IkReal x1425=(sj5*x1415);
evalcond[0]=((((-1.0)*x1421*x1424))+((r21*x1425))+(((-1.0)*r22*x1423)));
evalcond[1]=(((x1415*x1419))+sj0+(((-1.0)*x1420*x1424))+(((-1.0)*r02*x1423)));
evalcond[2]=(((r11*x1425))+(((-1.0)*x1417*x1424))+(((-1.0)*r12*x1423))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x1423))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1424))+((x1416*x1421)));
evalcond[4]=(((cj0*x1418))+(((-1.0)*x1419*x1423))+(((-1.0)*r02*x1424))+((x1416*x1420))+((cj0*x1422)));
evalcond[5]=((((-1.0)*r11*sj5*x1423))+((x1416*x1417))+(((-1.0)*r12*x1424))+((sj0*x1418))+((sj0*x1422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1426=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1426.valid){
continue;
}
CheckValue<IkReal> x1427 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1426.value)))+(x1427.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1428=IKsin(j4);
IkReal x1429=IKcos(j4);
IkReal x1430=(cj5*r10);
IkReal x1431=(cj2*sj1);
IkReal x1432=(r01*sj5);
IkReal x1433=(cj5*r00);
IkReal x1434=(cj5*r20);
IkReal x1435=(cj1*sj2);
IkReal x1436=((1.0)*x1429);
IkReal x1437=((1.0)*x1428);
IkReal x1438=(sj5*x1428);
evalcond[0]=((((-1.0)*x1434*x1437))+(((-1.0)*r22*x1436))+((r21*x1438)));
evalcond[1]=(((x1428*x1432))+sj0+(((-1.0)*r02*x1436))+(((-1.0)*x1433*x1437)));
evalcond[2]=((((-1.0)*r12*x1436))+((r11*x1438))+(((-1.0)*x1430*x1437))+(((-1.0)*cj0)));
evalcond[3]=(((x1429*x1434))+(((-1.0)*r22*x1437))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1436)));
evalcond[4]=(((x1429*x1433))+((cj0*x1435))+((cj0*x1431))+(((-1.0)*r02*x1437))+(((-1.0)*x1432*x1436)));
evalcond[5]=(((x1429*x1430))+(((-1.0)*r12*x1437))+(((-1.0)*r11*sj5*x1436))+((sj0*x1435))+((sj0*x1431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1439=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1439;
j0eval[1]=IKsign(x1439);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1440=r21*r21;
IkReal x1441=cj5*cj5;
IkReal x1442=(sj1*sj2);
IkReal x1443=(r21*sj5);
IkReal x1444=(cj5*r20);
IkReal x1445=(cj1*cj2);
IkReal x1446=(((x1440*x1441))+(((2.0)*x1443*x1444))+(((-1.0)*x1441*(r20*r20)))+(((-1.0)*x1440))+(((-1.0)*(r22*r22))));
j4eval[0]=x1446;
j4eval[1]=((IKabs((((r22*x1442))+(((-1.0)*r22*x1445)))))+(IKabs(((((-1.0)*x1443*x1445))+((x1444*x1445))+((x1442*x1443))+(((-1.0)*x1442*x1444))))));
j4eval[2]=IKsign(x1446);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1447=(r00*sj5);
IkReal x1448=(cj5*r01);
IkReal x1449=(sj1*sj2);
IkReal x1450=(cj1*cj2);
IkReal x1451=((20000.0)*px);
IkReal x1452=((8500.0)*cj1);
IkReal x1453=((9738.0)*x1450);
CheckValue<IkReal> x1454=IKPowWithIntegerCheck(((((2183.0)*x1450))+(((-2183.0)*x1449))),-1);
if(!x1454.valid){
continue;
}
CheckValue<IkReal> x1455=IKPowWithIntegerCheck(((((-1.0)*x1449))+x1450),-1);
if(!x1455.valid){
continue;
}
if( IKabs(((x1454.value)*((((x1447*x1453))+((x1447*x1452))+(((-9738.0)*x1447*x1449))+((x1450*x1451))+((x1448*x1453))+((x1448*x1452))+(((-9738.0)*x1448*x1449))+(((-1.0)*x1449*x1451)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1455.value)*((x1447+x1448)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1454.value)*((((x1447*x1453))+((x1447*x1452))+(((-9738.0)*x1447*x1449))+((x1450*x1451))+((x1448*x1453))+((x1448*x1452))+(((-9738.0)*x1448*x1449))+(((-1.0)*x1449*x1451))))))+IKsqr(((x1455.value)*((x1447+x1448))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1454.value)*((((x1447*x1453))+((x1447*x1452))+(((-9738.0)*x1447*x1449))+((x1450*x1451))+((x1448*x1453))+((x1448*x1452))+(((-9738.0)*x1448*x1449))+(((-1.0)*x1449*x1451))))), ((x1455.value)*((x1447+x1448))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1456=IKcos(j0);
IkReal x1457=IKsin(j0);
IkReal x1458=(cj1*cj2);
IkReal x1459=(cj5*r11);
IkReal x1460=(sj1*sj2);
IkReal x1461=(cj5*r01);
IkReal x1462=((1.0)*sj5);
IkReal x1463=((0.09465)*sj5);
IkReal x1464=((0.425)*cj1);
IkReal x1465=((0.39225)*x1456);
IkReal x1466=(x1457*x1460);
evalcond[0]=(((x1456*x1458))+(((-1.0)*x1456*x1460))+(((-1.0)*r00*x1462))+(((-1.0)*x1461)));
evalcond[1]=((((-1.0)*x1459))+(((-1.0)*x1466))+(((-1.0)*r10*x1462))+((x1457*x1458)));
evalcond[2]=((((-1.0)*x1458*x1465))+(((-1.0)*x1456*x1464))+(((-1.0)*px))+(((0.10915)*x1457))+(((-1.0)*r00*x1463))+((x1460*x1465))+(((-0.09465)*x1461)));
evalcond[3]=((((-0.10915)*x1456))+(((-0.09465)*x1459))+(((-1.0)*py))+(((-1.0)*x1457*x1464))+(((0.39225)*x1466))+(((-1.0)*r10*x1463))+(((-0.39225)*x1457*x1458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1467=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1467;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1467);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1468=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1468;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1468);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1469=((1.0)*cj5);
IkReal x1470=((((-1.0)*r21*x1469))+(((-1.0)*r20*sj5)));
j4eval[0]=x1470;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1469))+(((-1.0)*r10*sj0*x1469))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1470);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1471=((1.0)*cj5);
CheckValue<IkReal> x1472 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x1471))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1472.valid){
continue;
}
CheckValue<IkReal> x1473=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1471))+(((-1.0)*r20*sj5)))),-1);
if(!x1473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1472.value)+(((1.5707963267949)*(x1473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1474=IKsin(j4);
IkReal x1475=IKcos(j4);
IkReal x1476=(cj5*r00);
IkReal x1477=(cj5*r10);
IkReal x1478=(cj2*sj1);
IkReal x1479=(r21*sj5);
IkReal x1480=(cj5*r20);
IkReal x1481=(cj1*sj2);
IkReal x1482=((1.0)*x1475);
IkReal x1483=((1.0)*x1474);
IkReal x1484=(sj5*x1474);
IkReal x1485=(sj5*x1475);
evalcond[0]=(((x1474*x1479))+(((-1.0)*x1480*x1483))+(((-1.0)*r22*x1482)));
evalcond[1]=(sj0+((r01*x1484))+(((-1.0)*r02*x1482))+(((-1.0)*x1476*x1483)));
evalcond[2]=((((-1.0)*r12*x1482))+((r11*x1484))+(((-1.0)*x1477*x1483))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x1474))+(((-1.0)*x1480*x1482))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1475*x1479)));
evalcond[4]=(((r01*x1485))+((r02*x1474))+((cj0*x1481))+((cj0*x1478))+(((-1.0)*x1476*x1482)));
evalcond[5]=(((r12*x1474))+((sj0*x1481))+((sj0*x1478))+((r11*x1485))+(((-1.0)*x1477*x1482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1486=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1486.valid){
continue;
}
CheckValue<IkReal> x1487 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1486.value)))+(x1487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1488=IKsin(j4);
IkReal x1489=IKcos(j4);
IkReal x1490=(cj5*r00);
IkReal x1491=(cj5*r10);
IkReal x1492=(cj2*sj1);
IkReal x1493=(r21*sj5);
IkReal x1494=(cj5*r20);
IkReal x1495=(cj1*sj2);
IkReal x1496=((1.0)*x1489);
IkReal x1497=((1.0)*x1488);
IkReal x1498=(sj5*x1488);
IkReal x1499=(sj5*x1489);
evalcond[0]=((((-1.0)*x1494*x1497))+(((-1.0)*r22*x1496))+((x1488*x1493)));
evalcond[1]=(sj0+((r01*x1498))+(((-1.0)*r02*x1496))+(((-1.0)*x1490*x1497)));
evalcond[2]=((((-1.0)*r12*x1496))+((r11*x1498))+(((-1.0)*x1491*x1497))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1494*x1496))+((x1489*x1493))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1488)));
evalcond[4]=(((r01*x1499))+((cj0*x1492))+((cj0*x1495))+(((-1.0)*x1490*x1496))+((r02*x1488)));
evalcond[5]=(((sj0*x1495))+((sj0*x1492))+((r12*x1488))+((r11*x1499))+(((-1.0)*x1491*x1496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1500=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1500.valid){
continue;
}
CheckValue<IkReal> x1501 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1500.value)))+(x1501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1502=IKsin(j4);
IkReal x1503=IKcos(j4);
IkReal x1504=(cj5*r00);
IkReal x1505=(cj5*r10);
IkReal x1506=(cj2*sj1);
IkReal x1507=(r21*sj5);
IkReal x1508=(cj5*r20);
IkReal x1509=(cj1*sj2);
IkReal x1510=((1.0)*x1503);
IkReal x1511=((1.0)*x1502);
IkReal x1512=(sj5*x1502);
IkReal x1513=(sj5*x1503);
evalcond[0]=((((-1.0)*r22*x1510))+((x1502*x1507))+(((-1.0)*x1508*x1511)));
evalcond[1]=(sj0+(((-1.0)*x1504*x1511))+((r01*x1512))+(((-1.0)*r02*x1510)));
evalcond[2]=(((r11*x1512))+(((-1.0)*x1505*x1511))+(((-1.0)*cj0))+(((-1.0)*r12*x1510)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1502))+((x1503*x1507))+(((-1.0)*x1508*x1510)));
evalcond[4]=(((cj0*x1509))+((cj0*x1506))+(((-1.0)*x1504*x1510))+((r01*x1513))+((r02*x1502)));
evalcond[5]=(((r11*x1513))+((r12*x1502))+((sj0*x1506))+((sj0*x1509))+(((-1.0)*x1505*x1510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1514=r21*r21;
IkReal x1515=cj5*cj5;
IkReal x1516=(sj1*sj2);
IkReal x1517=(r21*sj5);
IkReal x1518=(cj1*cj2);
IkReal x1519=(cj5*r20);
CheckValue<IkReal> x1520=IKPowWithIntegerCheck(IKsign((((x1514*x1515))+(((-1.0)*x1514))+(((-1.0)*(r22*r22)))+(((-1.0)*x1515*(r20*r20)))+(((2.0)*x1517*x1519)))),-1);
if(!x1520.valid){
continue;
}
CheckValue<IkReal> x1521 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1518))+((r22*x1516)))),IkReal(((((-1.0)*x1517*x1518))+(((-1.0)*x1516*x1519))+((x1518*x1519))+((x1516*x1517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1520.value)))+(x1521.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1522=IKsin(j4);
IkReal x1523=IKcos(j4);
IkReal x1524=(r21*sj5);
IkReal x1525=(cj5*r20);
IkReal x1526=((1.0)*x1523);
evalcond[0]=(((x1522*x1524))+(((-1.0)*r22*x1526))+(((-1.0)*x1522*x1525)));
evalcond[1]=((((-1.0)*x1525*x1526))+((x1523*x1524))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1527=(cj5*sj4);
IkReal x1528=(sj4*sj5);
if( IKabs((((r00*x1527))+(((-1.0)*r01*x1528))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1528))+(((-1.0)*cj4*r12))+(((-1.0)*r10*x1527)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1527))+(((-1.0)*r01*x1528))+((cj4*r02))))+IKsqr((((r11*x1528))+(((-1.0)*cj4*r12))+(((-1.0)*r10*x1527))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1527))+(((-1.0)*r01*x1528))+((cj4*r02))), (((r11*x1528))+(((-1.0)*cj4*r12))+(((-1.0)*r10*x1527))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1529=IKcos(j0);
IkReal x1530=IKsin(j0);
IkReal x1531=(r11*sj5);
IkReal x1532=(cj1*cj2);
IkReal x1533=(cj5*r11);
IkReal x1534=((1.0)*r00);
IkReal x1535=(cj4*cj5);
IkReal x1536=(cj5*r01);
IkReal x1537=((1.0)*r10);
IkReal x1538=((0.09465)*sj5);
IkReal x1539=(cj5*sj4);
IkReal x1540=((1.0)*cj4);
IkReal x1541=(r01*sj5);
IkReal x1542=(sj1*x1529);
IkReal x1543=(cj1*x1530);
IkReal x1544=(cj1*x1529);
IkReal x1545=(sj1*sj2*x1530);
evalcond[0]=((((-1.0)*r02*x1540))+((sj4*x1541))+x1530+(((-1.0)*x1534*x1539)));
evalcond[1]=((((-1.0)*x1537*x1539))+((sj4*x1531))+(((-1.0)*r12*x1540))+(((-1.0)*x1529)));
evalcond[2]=((((-1.0)*x1536))+(((-1.0)*sj2*x1542))+((x1529*x1532))+(((-1.0)*sj5*x1534)));
evalcond[3]=((((-1.0)*x1545))+(((-1.0)*x1533))+((x1530*x1532))+(((-1.0)*sj5*x1537)));
evalcond[4]=(((cj4*x1541))+((cj2*x1542))+((r02*sj4))+(((-1.0)*x1534*x1535))+((sj2*x1544)));
evalcond[5]=((((-1.0)*x1535*x1537))+((r12*sj4))+((cj4*x1531))+((sj2*x1543))+((cj2*sj1*x1530)));
evalcond[6]=((((-0.425)*x1544))+(((-1.0)*r00*x1538))+(((-0.39225)*x1529*x1532))+(((-1.0)*px))+(((-0.09465)*x1536))+(((0.39225)*sj2*x1542))+(((0.10915)*x1530)));
evalcond[7]=((((-0.425)*x1543))+(((0.39225)*x1545))+(((-1.0)*py))+(((-0.10915)*x1529))+(((-1.0)*r10*x1538))+(((-0.09465)*x1533))+(((-0.39225)*x1530*x1532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1546=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x1546.valid){
continue;
}
CheckValue<IkReal> x1547 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1547.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1546.value)))+(x1547.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1548=IKcos(j0);
IkReal x1549=IKsin(j0);
IkReal x1550=(cj1*cj2);
IkReal x1551=(cj5*r11);
IkReal x1552=(sj1*sj2);
IkReal x1553=(cj5*r01);
IkReal x1554=((1.0)*sj5);
IkReal x1555=((0.09465)*sj5);
IkReal x1556=((0.425)*cj1);
IkReal x1557=((0.39225)*x1548);
IkReal x1558=(x1549*x1552);
evalcond[0]=((((-1.0)*x1553))+(((-1.0)*x1548*x1552))+(((-1.0)*r00*x1554))+((x1548*x1550)));
evalcond[1]=((((-1.0)*x1558))+(((-1.0)*x1551))+((x1549*x1550))+(((-1.0)*r10*x1554)));
evalcond[2]=(((x1552*x1557))+(((-1.0)*x1548*x1556))+(((-1.0)*px))+(((-0.09465)*x1553))+(((-1.0)*x1550*x1557))+(((-1.0)*r00*x1555))+(((0.10915)*x1549)));
evalcond[3]=((((-0.10915)*x1548))+(((-1.0)*x1549*x1556))+(((-0.39225)*x1549*x1550))+(((-1.0)*py))+(((-0.09465)*x1551))+(((-1.0)*r10*x1555))+(((0.39225)*x1558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1559=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1559;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1560=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1560;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1561=((1.0)*cj5);
IkReal x1562=((((-1.0)*r21*x1561))+(((-1.0)*r20*sj5)));
j4eval[0]=x1562;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1561))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1561))))));
j4eval[2]=IKsign(x1562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1563=((1.0)*cj5);
CheckValue<IkReal> x1564=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1563))+(((-1.0)*r20*sj5)))),-1);
if(!x1564.valid){
continue;
}
CheckValue<IkReal> x1565 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1563))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1564.value)))+(x1565.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1566=IKsin(j4);
IkReal x1567=IKcos(j4);
IkReal x1568=(cj5*r00);
IkReal x1569=(cj5*r10);
IkReal x1570=(cj2*sj1);
IkReal x1571=(r21*sj5);
IkReal x1572=(cj5*r20);
IkReal x1573=(cj1*sj2);
IkReal x1574=((1.0)*x1567);
IkReal x1575=((1.0)*x1566);
IkReal x1576=(sj5*x1566);
IkReal x1577=(sj5*x1567);
evalcond[0]=(((x1566*x1571))+(((-1.0)*x1572*x1575))+(((-1.0)*r22*x1574)));
evalcond[1]=((((-1.0)*r02*x1574))+sj0+(((-1.0)*x1568*x1575))+((r01*x1576)));
evalcond[2]=((((-1.0)*x1569*x1575))+((r11*x1576))+(((-1.0)*r12*x1574))+(((-1.0)*cj0)));
evalcond[3]=(((x1567*x1571))+(((-1.0)*x1572*x1574))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1566)));
evalcond[4]=((((-1.0)*x1568*x1574))+((cj0*x1570))+((cj0*x1573))+((r02*x1566))+((r01*x1577)));
evalcond[5]=(((r12*x1566))+((sj0*x1570))+((sj0*x1573))+(((-1.0)*x1569*x1574))+((r11*x1577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1578=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1578.valid){
continue;
}
CheckValue<IkReal> x1579 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1578.value)))+(x1579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1580=IKsin(j4);
IkReal x1581=IKcos(j4);
IkReal x1582=(cj5*r00);
IkReal x1583=(cj5*r10);
IkReal x1584=(cj2*sj1);
IkReal x1585=(r21*sj5);
IkReal x1586=(cj5*r20);
IkReal x1587=(cj1*sj2);
IkReal x1588=((1.0)*x1581);
IkReal x1589=((1.0)*x1580);
IkReal x1590=(sj5*x1580);
IkReal x1591=(sj5*x1581);
evalcond[0]=(((x1580*x1585))+(((-1.0)*r22*x1588))+(((-1.0)*x1586*x1589)));
evalcond[1]=(((r01*x1590))+sj0+(((-1.0)*r02*x1588))+(((-1.0)*x1582*x1589)));
evalcond[2]=(((r11*x1590))+(((-1.0)*r12*x1588))+(((-1.0)*cj0))+(((-1.0)*x1583*x1589)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1580))+(((-1.0)*x1586*x1588))+((x1581*x1585)));
evalcond[4]=(((r01*x1591))+((r02*x1580))+((cj0*x1584))+((cj0*x1587))+(((-1.0)*x1582*x1588)));
evalcond[5]=(((r12*x1580))+((r11*x1591))+((sj0*x1584))+((sj0*x1587))+(((-1.0)*x1583*x1588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1592=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1592.valid){
continue;
}
CheckValue<IkReal> x1593 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1592.value)))+(x1593.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1594=IKsin(j4);
IkReal x1595=IKcos(j4);
IkReal x1596=(cj5*r00);
IkReal x1597=(cj5*r10);
IkReal x1598=(cj2*sj1);
IkReal x1599=(r21*sj5);
IkReal x1600=(cj5*r20);
IkReal x1601=(cj1*sj2);
IkReal x1602=((1.0)*x1595);
IkReal x1603=((1.0)*x1594);
IkReal x1604=(sj5*x1594);
IkReal x1605=(sj5*x1595);
evalcond[0]=(((x1594*x1599))+(((-1.0)*r22*x1602))+(((-1.0)*x1600*x1603)));
evalcond[1]=(sj0+((r01*x1604))+(((-1.0)*r02*x1602))+(((-1.0)*x1596*x1603)));
evalcond[2]=(((r11*x1604))+(((-1.0)*x1597*x1603))+(((-1.0)*r12*x1602))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1600*x1602))+((r22*x1594))+((x1595*x1599)));
evalcond[4]=(((r01*x1605))+((cj0*x1601))+((r02*x1594))+(((-1.0)*x1596*x1602))+((cj0*x1598)));
evalcond[5]=(((r12*x1594))+((r11*x1605))+((sj0*x1601))+(((-1.0)*x1597*x1602))+((sj0*x1598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1606=((1.0)*cj5);
IkReal x1607=((1.0)*sj5);
IkReal x1608=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1608;
j0eval[1]=((IKabs(((((-1.0)*r10*x1607))+(((-1.0)*r11*x1606)))))+(IKabs(((((-1.0)*r00*x1607))+(((-1.0)*r01*x1606))))));
j0eval[2]=IKsign(x1608);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1609=r21*r21;
IkReal x1610=cj5*cj5;
IkReal x1611=(cj2*sj1);
IkReal x1612=(cj1*sj2);
IkReal x1613=(r21*sj5);
IkReal x1614=((1.0)*cj5*r20);
IkReal x1615=((((2.0)*cj5*r20*x1613))+(((-1.0)*x1609))+(((-1.0)*x1610*(r20*r20)))+((x1609*x1610))+(((-1.0)*(r22*r22))));
j4eval[0]=x1615;
j4eval[1]=((IKabs(((((-1.0)*x1611*x1614))+((x1612*x1613))+(((-1.0)*x1612*x1614))+((x1611*x1613)))))+(IKabs((((r22*x1612))+((r22*x1611))))));
j4eval[2]=IKsign(x1615);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1616=cj1*cj1;
IkReal x1617=(cj2*sj2);
IkReal x1618=(cj1*sj1);
j0eval[0]=((((-1.08349267049076)*sj2*x1616))+(((-2.0)*x1616*x1617))+x1618+x1617+(((-1.08349267049076)*cj2*x1618))+(((-2.0)*x1618*(cj2*cj2))));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1619=cj1*cj1;
IkReal x1620=(cj1*sj1);
IkReal x1621=(r00*sj5);
IkReal x1622=(cj1*sj2);
IkReal x1623=(r10*sj5);
IkReal x1624=(cj5*r11);
IkReal x1625=((20000.0)*py);
IkReal x1626=(cj2*sj1);
IkReal x1627=(cj5*r01);
IkReal x1628=((1893.0)*x1626);
IkReal x1629=(sj2*x1619);
CheckValue<IkReal> x1630=IKPowWithIntegerCheck(((((-8500.0)*cj2*x1620))+(((-8500.0)*x1629))+(((-15690.0)*x1620*(cj2*cj2)))+(((-15690.0)*cj2*x1629))+(((7845.0)*x1620))+(((7845.0)*cj2*sj2))),-1);
if(!x1630.valid){
continue;
}
CheckValue<IkReal> x1631=IKPowWithIntegerCheck((x1622+x1626),-1);
if(!x1631.valid){
continue;
}
if( IKabs(((x1630.value)*((((x1623*x1628))+((x1622*x1625))+(((1893.0)*x1622*x1624))+(((1893.0)*x1622*x1623))+(((-2183.0)*x1627))+(((-2183.0)*x1621))+((x1624*x1628))+((x1625*x1626)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1631.value)*(((((-1.0)*x1621))+(((-1.0)*x1627)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1630.value)*((((x1623*x1628))+((x1622*x1625))+(((1893.0)*x1622*x1624))+(((1893.0)*x1622*x1623))+(((-2183.0)*x1627))+(((-2183.0)*x1621))+((x1624*x1628))+((x1625*x1626))))))+IKsqr(((x1631.value)*(((((-1.0)*x1621))+(((-1.0)*x1627))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1630.value)*((((x1623*x1628))+((x1622*x1625))+(((1893.0)*x1622*x1624))+(((1893.0)*x1622*x1623))+(((-2183.0)*x1627))+(((-2183.0)*x1621))+((x1624*x1628))+((x1625*x1626))))), ((x1631.value)*(((((-1.0)*x1621))+(((-1.0)*x1627))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1632=IKcos(j0);
IkReal x1633=IKsin(j0);
IkReal x1634=(cj5*r01);
IkReal x1635=(cj2*sj1);
IkReal x1636=(r00*sj5);
IkReal x1637=(cj5*r11);
IkReal x1638=((0.39225)*cj2);
IkReal x1639=(r10*sj5);
IkReal x1640=((0.39225)*sj1*sj2);
IkReal x1641=(cj1*x1632);
IkReal x1642=(cj1*x1633);
evalcond[0]=(x1634+x1636+((sj2*x1641))+((x1632*x1635)));
evalcond[1]=(x1637+x1639+((sj2*x1642))+((x1633*x1635)));
evalcond[2]=((((-0.09465)*x1634))+(((-0.09465)*x1636))+(((-1.0)*x1638*x1641))+(((-1.0)*px))+(((-0.425)*x1641))+(((0.10915)*x1633))+((x1632*x1640)));
evalcond[3]=((((-0.09465)*x1637))+(((-0.09465)*x1639))+(((-0.10915)*x1632))+(((-1.0)*x1638*x1642))+(((-1.0)*py))+(((-0.425)*x1642))+((x1633*x1640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1643=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1643;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1643);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1644=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1644;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1644);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1645=((1.0)*cj5);
IkReal x1646=((((-1.0)*r21*x1645))+(((-1.0)*r20*sj5)));
j4eval[0]=x1646;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1645))+(((-1.0)*cj0*r00*x1645))))));
j4eval[2]=IKsign(x1646);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1647=((1.0)*cj5);
CheckValue<IkReal> x1648=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1647))+(((-1.0)*r20*sj5)))),-1);
if(!x1648.valid){
continue;
}
CheckValue<IkReal> x1649 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1647))+(((-1.0)*cj0*r00*x1647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1648.value)))+(x1649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1650=IKsin(j4);
IkReal x1651=IKcos(j4);
IkReal x1652=(cj5*r00);
IkReal x1653=(cj1*cj2);
IkReal x1654=(cj5*r10);
IkReal x1655=(r21*sj5);
IkReal x1656=(cj5*r20);
IkReal x1657=((1.0)*x1651);
IkReal x1658=((1.0)*x1650);
IkReal x1659=(sj5*x1650);
IkReal x1660=(sj5*x1651);
IkReal x1661=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x1656*x1658))+((x1650*x1655))+(((-1.0)*r22*x1657)));
evalcond[1]=(sj0+(((-1.0)*x1652*x1658))+((r01*x1659))+(((-1.0)*r02*x1657)));
evalcond[2]=((((-1.0)*x1654*x1658))+((r11*x1659))+(((-1.0)*r12*x1657))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1656*x1657))+((cj2*sj1))+((r22*x1650))+((cj1*sj2))+((x1651*x1655)));
evalcond[4]=((((-1.0)*x1652*x1657))+((r02*x1650))+((r01*x1660))+((cj0*x1653))+(((-1.0)*cj0*x1661)));
evalcond[5]=(((sj0*x1653))+((r12*x1650))+(((-1.0)*x1654*x1657))+((r11*x1660))+(((-1.0)*sj0*x1661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1662=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1662.valid){
continue;
}
CheckValue<IkReal> x1663 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1662.value)))+(x1663.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1664=IKsin(j4);
IkReal x1665=IKcos(j4);
IkReal x1666=(cj5*r00);
IkReal x1667=(cj1*cj2);
IkReal x1668=(cj5*r10);
IkReal x1669=(r21*sj5);
IkReal x1670=(cj5*r20);
IkReal x1671=((1.0)*x1665);
IkReal x1672=((1.0)*x1664);
IkReal x1673=(sj5*x1664);
IkReal x1674=(sj5*x1665);
IkReal x1675=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x1670*x1672))+((x1664*x1669))+(((-1.0)*r22*x1671)));
evalcond[1]=(sj0+(((-1.0)*r02*x1671))+(((-1.0)*x1666*x1672))+((r01*x1673)));
evalcond[2]=((((-1.0)*x1668*x1672))+(((-1.0)*r12*x1671))+((r11*x1673))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x1670*x1671))+((x1665*x1669))+((r22*x1664)));
evalcond[4]=((((-1.0)*cj0*x1675))+((r02*x1664))+((cj0*x1667))+(((-1.0)*x1666*x1671))+((r01*x1674)));
evalcond[5]=(((sj0*x1667))+(((-1.0)*x1668*x1671))+((r12*x1664))+(((-1.0)*sj0*x1675))+((r11*x1674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1676=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1676.valid){
continue;
}
CheckValue<IkReal> x1677 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1676.value)))+(x1677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1678=IKsin(j4);
IkReal x1679=IKcos(j4);
IkReal x1680=(cj5*r00);
IkReal x1681=(cj1*cj2);
IkReal x1682=(cj5*r10);
IkReal x1683=(r21*sj5);
IkReal x1684=(cj5*r20);
IkReal x1685=((1.0)*x1679);
IkReal x1686=((1.0)*x1678);
IkReal x1687=(sj5*x1678);
IkReal x1688=(sj5*x1679);
IkReal x1689=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1685))+((x1678*x1683))+(((-1.0)*x1684*x1686)));
evalcond[1]=(sj0+((r01*x1687))+(((-1.0)*x1680*x1686))+(((-1.0)*r02*x1685)));
evalcond[2]=((((-1.0)*r12*x1685))+((r11*x1687))+(((-1.0)*x1682*x1686))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x1679*x1683))+((r22*x1678))+(((-1.0)*x1684*x1685)));
evalcond[4]=(((r02*x1678))+((r01*x1688))+(((-1.0)*x1680*x1685))+(((-1.0)*cj0*x1689))+((cj0*x1681)));
evalcond[5]=(((r11*x1688))+(((-1.0)*x1682*x1685))+(((-1.0)*sj0*x1689))+((sj0*x1681))+((r12*x1678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1690=r21*r21;
IkReal x1691=cj5*cj5;
IkReal x1692=(cj2*sj1);
IkReal x1693=(cj1*sj2);
IkReal x1694=(r21*sj5);
IkReal x1695=((1.0)*cj5*r20);
CheckValue<IkReal> x1696=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1691*(r20*r20)))+((x1690*x1691))+(((-1.0)*x1690))+(((2.0)*cj5*r20*x1694))+(((-1.0)*(r22*r22))))),-1);
if(!x1696.valid){
continue;
}
CheckValue<IkReal> x1697 = IKatan2WithCheck(IkReal((((r22*x1692))+((r22*x1693)))),IkReal(((((-1.0)*x1692*x1695))+((x1692*x1694))+((x1693*x1694))+(((-1.0)*x1693*x1695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1696.value)))+(x1697.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1698=IKsin(j4);
IkReal x1699=IKcos(j4);
IkReal x1700=(r21*sj5);
IkReal x1701=(cj5*r20);
IkReal x1702=((1.0)*x1699);
evalcond[0]=((((-1.0)*r22*x1702))+(((-1.0)*x1698*x1701))+((x1698*x1700)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x1698))+(((-1.0)*x1701*x1702))+((x1699*x1700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1703=(cj5*sj4);
IkReal x1704=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1704))+((r00*x1703))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1704))+(((-1.0)*r10*x1703))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1704))+((r00*x1703))+((cj4*r02))))+IKsqr((((r11*x1704))+(((-1.0)*r10*x1703))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1704))+((r00*x1703))+((cj4*r02))), (((r11*x1704))+(((-1.0)*r10*x1703))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1705=IKcos(j0);
IkReal x1706=IKsin(j0);
IkReal x1707=(cj5*r01);
IkReal x1708=(r11*sj5);
IkReal x1709=(cj1*cj2);
IkReal x1710=(r00*sj5);
IkReal x1711=(cj5*r11);
IkReal x1712=((1.0)*cj4);
IkReal x1713=(r01*sj5);
IkReal x1714=(r10*sj5);
IkReal x1715=(sj1*x1705);
IkReal x1716=(cj1*x1706);
IkReal x1717=(cj5*x1712);
IkReal x1718=(cj1*x1705);
IkReal x1719=((1.0)*cj5*sj4);
IkReal x1720=(sj1*sj2*x1706);
evalcond[0]=((((-1.0)*r00*x1719))+((sj4*x1713))+x1706+(((-1.0)*r02*x1712)));
evalcond[1]=(((sj4*x1708))+(((-1.0)*x1705))+(((-1.0)*r10*x1719))+(((-1.0)*r12*x1712)));
evalcond[2]=(x1707+x1710+((sj2*x1718))+((cj2*x1715)));
evalcond[3]=(x1711+x1714+((cj2*sj1*x1706))+((sj2*x1716)));
evalcond[4]=((((-1.0)*r00*x1717))+((cj4*x1713))+((r02*sj4))+((x1705*x1709))+(((-1.0)*sj2*x1715)));
evalcond[5]=(((cj4*x1708))+((x1706*x1709))+(((-1.0)*r10*x1717))+((r12*sj4))+(((-1.0)*x1720)));
evalcond[6]=((((-0.39225)*x1705*x1709))+(((-0.425)*x1718))+(((-0.09465)*x1707))+(((-0.09465)*x1710))+(((-1.0)*px))+(((0.39225)*sj2*x1715))+(((0.10915)*x1706)));
evalcond[7]=((((-0.425)*x1716))+(((-0.10915)*x1705))+(((0.39225)*x1720))+(((-0.09465)*x1711))+(((-0.09465)*x1714))+(((-1.0)*py))+(((-0.39225)*x1706*x1709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1721=((1.0)*cj5);
IkReal x1722=((1.0)*sj5);
CheckValue<IkReal> x1723 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1721))+(((-1.0)*r10*x1722)))),IkReal(((((-1.0)*r01*x1721))+(((-1.0)*r00*x1722)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1723.valid){
continue;
}
CheckValue<IkReal> x1724=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x1724.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1723.value)+(((1.5707963267949)*(x1724.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1725=IKcos(j0);
IkReal x1726=IKsin(j0);
IkReal x1727=(cj5*r01);
IkReal x1728=(cj2*sj1);
IkReal x1729=(r00*sj5);
IkReal x1730=(cj5*r11);
IkReal x1731=((0.39225)*cj2);
IkReal x1732=(r10*sj5);
IkReal x1733=((0.39225)*sj1*sj2);
IkReal x1734=(cj1*x1725);
IkReal x1735=(cj1*x1726);
evalcond[0]=(((x1725*x1728))+x1729+x1727+((sj2*x1734)));
evalcond[1]=(x1730+x1732+((x1726*x1728))+((sj2*x1735)));
evalcond[2]=((((-1.0)*x1731*x1734))+((x1725*x1733))+(((0.10915)*x1726))+(((-1.0)*px))+(((-0.425)*x1734))+(((-0.09465)*x1729))+(((-0.09465)*x1727)));
evalcond[3]=((((-1.0)*x1731*x1735))+((x1726*x1733))+(((-1.0)*py))+(((-0.425)*x1735))+(((-0.10915)*x1725))+(((-0.09465)*x1730))+(((-0.09465)*x1732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1736=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1736;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1736);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1737=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1737;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1737);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1738=((1.0)*cj5);
IkReal x1739=((((-1.0)*r21*x1738))+(((-1.0)*r20*sj5)));
j4eval[0]=x1739;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1738))+(((-1.0)*cj0*r00*x1738))+((cj0*r01*sj5)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1739);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1740=((1.0)*cj5);
CheckValue<IkReal> x1741=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1740))+(((-1.0)*r20*sj5)))),-1);
if(!x1741.valid){
continue;
}
CheckValue<IkReal> x1742 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1740))+(((-1.0)*r10*sj0*x1740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1741.value)))+(x1742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1743=IKsin(j4);
IkReal x1744=IKcos(j4);
IkReal x1745=(cj5*r00);
IkReal x1746=(cj1*cj2);
IkReal x1747=(cj5*r10);
IkReal x1748=(r21*sj5);
IkReal x1749=(cj5*r20);
IkReal x1750=((1.0)*x1744);
IkReal x1751=((1.0)*x1743);
IkReal x1752=(sj5*x1743);
IkReal x1753=(sj5*x1744);
IkReal x1754=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1750))+(((-1.0)*x1749*x1751))+((x1743*x1748)));
evalcond[1]=(sj0+(((-1.0)*x1745*x1751))+((r01*x1752))+(((-1.0)*r02*x1750)));
evalcond[2]=((((-1.0)*r12*x1750))+(((-1.0)*x1747*x1751))+((r11*x1752))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x1743))+((x1744*x1748))+((cj1*sj2))+(((-1.0)*x1749*x1750)));
evalcond[4]=((((-1.0)*cj0*x1754))+((r02*x1743))+(((-1.0)*x1745*x1750))+((r01*x1753))+((cj0*x1746)));
evalcond[5]=(((r12*x1743))+(((-1.0)*sj0*x1754))+(((-1.0)*x1747*x1750))+((sj0*x1746))+((r11*x1753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1755=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1755.valid){
continue;
}
CheckValue<IkReal> x1756 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1755.value)))+(x1756.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1757=IKsin(j4);
IkReal x1758=IKcos(j4);
IkReal x1759=(cj5*r00);
IkReal x1760=(cj1*cj2);
IkReal x1761=(cj5*r10);
IkReal x1762=(r21*sj5);
IkReal x1763=(cj5*r20);
IkReal x1764=((1.0)*x1758);
IkReal x1765=((1.0)*x1757);
IkReal x1766=(sj5*x1757);
IkReal x1767=(sj5*x1758);
IkReal x1768=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x1763*x1765))+((x1757*x1762))+(((-1.0)*r22*x1764)));
evalcond[1]=(sj0+(((-1.0)*r02*x1764))+((r01*x1766))+(((-1.0)*x1759*x1765)));
evalcond[2]=(((r11*x1766))+(((-1.0)*x1761*x1765))+(((-1.0)*r12*x1764))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x1757))+(((-1.0)*x1763*x1764))+((x1758*x1762)));
evalcond[4]=(((r02*x1757))+((cj0*x1760))+((r01*x1767))+(((-1.0)*x1759*x1764))+(((-1.0)*cj0*x1768)));
evalcond[5]=(((sj0*x1760))+((r11*x1767))+(((-1.0)*x1761*x1764))+((r12*x1757))+(((-1.0)*sj0*x1768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1769=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1769.valid){
continue;
}
CheckValue<IkReal> x1770 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1769.value)))+(x1770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1771=IKsin(j4);
IkReal x1772=IKcos(j4);
IkReal x1773=(cj5*r00);
IkReal x1774=(cj1*cj2);
IkReal x1775=(cj5*r10);
IkReal x1776=(r21*sj5);
IkReal x1777=(cj5*r20);
IkReal x1778=((1.0)*x1772);
IkReal x1779=((1.0)*x1771);
IkReal x1780=(sj5*x1771);
IkReal x1781=(sj5*x1772);
IkReal x1782=((1.0)*sj1*sj2);
evalcond[0]=(((x1771*x1776))+(((-1.0)*r22*x1778))+(((-1.0)*x1777*x1779)));
evalcond[1]=(sj0+(((-1.0)*r02*x1778))+(((-1.0)*x1773*x1779))+((r01*x1780)));
evalcond[2]=(((r11*x1780))+(((-1.0)*x1775*x1779))+(((-1.0)*r12*x1778))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x1771))+((cj1*sj2))+((x1772*x1776))+(((-1.0)*x1777*x1778)));
evalcond[4]=((((-1.0)*cj0*x1782))+((r02*x1771))+((cj0*x1774))+(((-1.0)*x1773*x1778))+((r01*x1781)));
evalcond[5]=(((r12*x1771))+(((-1.0)*sj0*x1782))+((r11*x1781))+(((-1.0)*x1775*x1778))+((sj0*x1774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1783=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1783;
j0eval[1]=IKsign(x1783);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1784=cj5*cj5;
IkReal x1785=r21*r21;
IkReal x1786=(cj2*sj1);
IkReal x1787=(cj1*sj2);
IkReal x1788=(r21*sj5);
IkReal x1789=((1.0)*cj5*r20);
IkReal x1790=((((-2.0)*cj5*r20*x1788))+x1785+(r22*r22)+((x1784*(r20*r20)))+(((-1.0)*x1784*x1785)));
j4eval[0]=x1790;
j4eval[1]=IKsign(x1790);
j4eval[2]=((IKabs(((((-1.0)*x1787*x1789))+((x1787*x1788))+(((-1.0)*x1786*x1789))+((x1786*x1788)))))+(IKabs((((r22*x1786))+((r22*x1787))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1791=cj1*cj1;
IkReal x1792=(cj2*sj2);
IkReal x1793=(cj1*sj1);
j0eval[0]=(x1793+x1792+(((-2.0)*x1793*(cj2*cj2)))+(((-1.08349267049076)*cj2*x1793))+(((-2.0)*x1791*x1792))+(((-1.08349267049076)*sj2*x1791)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1794=cj1*cj1;
IkReal x1795=(cj1*sj1);
IkReal x1796=(r00*sj5);
IkReal x1797=(cj1*sj2);
IkReal x1798=(r10*sj5);
IkReal x1799=(cj5*r11);
IkReal x1800=(cj5*r01);
IkReal x1801=((20000.0)*py);
IkReal x1802=(cj2*sj1);
IkReal x1803=((1893.0)*x1802);
IkReal x1804=(sj2*x1794);
CheckValue<IkReal> x1805=IKPowWithIntegerCheck(((((-8500.0)*cj2*x1795))+(((-15690.0)*x1795*(cj2*cj2)))+(((7845.0)*cj2*sj2))+(((-8500.0)*x1804))+(((-15690.0)*cj2*x1804))+(((7845.0)*x1795))),-1);
if(!x1805.valid){
continue;
}
CheckValue<IkReal> x1806=IKPowWithIntegerCheck((x1797+x1802),-1);
if(!x1806.valid){
continue;
}
if( IKabs(((x1805.value)*((((x1799*x1803))+((x1801*x1802))+((x1798*x1803))+(((2183.0)*x1796))+((x1797*x1801))+(((2183.0)*x1800))+(((1893.0)*x1797*x1798))+(((1893.0)*x1797*x1799)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1806.value)*((x1796+x1800)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1805.value)*((((x1799*x1803))+((x1801*x1802))+((x1798*x1803))+(((2183.0)*x1796))+((x1797*x1801))+(((2183.0)*x1800))+(((1893.0)*x1797*x1798))+(((1893.0)*x1797*x1799))))))+IKsqr(((x1806.value)*((x1796+x1800))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1805.value)*((((x1799*x1803))+((x1801*x1802))+((x1798*x1803))+(((2183.0)*x1796))+((x1797*x1801))+(((2183.0)*x1800))+(((1893.0)*x1797*x1798))+(((1893.0)*x1797*x1799))))), ((x1806.value)*((x1796+x1800))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1807=IKcos(j0);
IkReal x1808=IKsin(j0);
IkReal x1809=(cj5*r11);
IkReal x1810=(cj5*r01);
IkReal x1811=(cj2*sj1);
IkReal x1812=((1.0)*sj5);
IkReal x1813=((0.09465)*sj5);
IkReal x1814=((0.39225)*cj2);
IkReal x1815=((0.39225)*sj1*sj2);
IkReal x1816=(cj1*x1807);
IkReal x1817=(cj1*x1808);
evalcond[0]=(((sj2*x1816))+((x1807*x1811))+(((-1.0)*r00*x1812))+(((-1.0)*x1810)));
evalcond[1]=(((sj2*x1817))+(((-1.0)*r10*x1812))+((x1808*x1811))+(((-1.0)*x1809)));
evalcond[2]=(((x1807*x1815))+(((-1.0)*px))+(((-1.0)*r00*x1813))+(((-0.09465)*x1810))+(((-1.0)*x1814*x1816))+(((-0.425)*x1816))+(((0.10915)*x1808)));
evalcond[3]=((((-1.0)*r10*x1813))+(((-0.10915)*x1807))+(((-1.0)*py))+((x1808*x1815))+(((-0.09465)*x1809))+(((-1.0)*x1814*x1817))+(((-0.425)*x1817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1818=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1818;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1819=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1819;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1819);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1820=((1.0)*cj5);
IkReal x1821=((((-1.0)*r21*x1820))+(((-1.0)*r20*sj5)));
j4eval[0]=x1821;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1820))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1820))))));
j4eval[2]=IKsign(x1821);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1822=((1.0)*cj5);
CheckValue<IkReal> x1823 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1822))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1823.valid){
continue;
}
CheckValue<IkReal> x1824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1822))+(((-1.0)*r20*sj5)))),-1);
if(!x1824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1823.value)+(((1.5707963267949)*(x1824.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1825=IKsin(j4);
IkReal x1826=IKcos(j4);
IkReal x1827=(cj1*cj2);
IkReal x1828=(cj5*r10);
IkReal x1829=(r01*sj5);
IkReal x1830=(cj5*r00);
IkReal x1831=(cj5*r20);
IkReal x1832=((1.0)*cj0);
IkReal x1833=(sj1*sj2);
IkReal x1834=((1.0)*x1826);
IkReal x1835=((1.0)*x1825);
IkReal x1836=(sj5*x1825);
evalcond[0]=(((r21*x1836))+(((-1.0)*x1831*x1835))+(((-1.0)*r22*x1834)));
evalcond[1]=(sj0+((x1825*x1829))+(((-1.0)*r02*x1834))+(((-1.0)*x1830*x1835)));
evalcond[2]=((((-1.0)*x1828*x1835))+(((-1.0)*x1832))+((r11*x1836))+(((-1.0)*r12*x1834)));
evalcond[3]=(((cj2*sj1))+((x1826*x1831))+((cj1*sj2))+(((-1.0)*r21*sj5*x1834))+(((-1.0)*r22*x1835)));
evalcond[4]=(((cj0*x1827))+(((-1.0)*x1832*x1833))+((x1826*x1830))+(((-1.0)*r02*x1835))+(((-1.0)*x1829*x1834)));
evalcond[5]=((((-1.0)*r11*sj5*x1834))+((x1826*x1828))+(((-1.0)*sj0*x1833))+((sj0*x1827))+(((-1.0)*r12*x1835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1837=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1837.valid){
continue;
}
CheckValue<IkReal> x1838 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1837.value)))+(x1838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1839=IKsin(j4);
IkReal x1840=IKcos(j4);
IkReal x1841=(cj1*cj2);
IkReal x1842=(cj5*r10);
IkReal x1843=(r01*sj5);
IkReal x1844=(cj5*r00);
IkReal x1845=(cj5*r20);
IkReal x1846=((1.0)*cj0);
IkReal x1847=(sj1*sj2);
IkReal x1848=((1.0)*x1840);
IkReal x1849=((1.0)*x1839);
IkReal x1850=(sj5*x1839);
evalcond[0]=((((-1.0)*r22*x1848))+(((-1.0)*x1845*x1849))+((r21*x1850)));
evalcond[1]=(sj0+(((-1.0)*r02*x1848))+((x1839*x1843))+(((-1.0)*x1844*x1849)));
evalcond[2]=((((-1.0)*x1842*x1849))+(((-1.0)*x1846))+(((-1.0)*r12*x1848))+((r11*x1850)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1849))+((cj1*sj2))+((x1840*x1845))+(((-1.0)*r21*sj5*x1848)));
evalcond[4]=(((cj0*x1841))+(((-1.0)*x1843*x1848))+(((-1.0)*r02*x1849))+((x1840*x1844))+(((-1.0)*x1846*x1847)));
evalcond[5]=(((x1840*x1842))+((sj0*x1841))+(((-1.0)*r11*sj5*x1848))+(((-1.0)*r12*x1849))+(((-1.0)*sj0*x1847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1851=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1851.valid){
continue;
}
CheckValue<IkReal> x1852 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1851.value)))+(x1852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1853=IKsin(j4);
IkReal x1854=IKcos(j4);
IkReal x1855=(cj1*cj2);
IkReal x1856=(cj5*r10);
IkReal x1857=(r01*sj5);
IkReal x1858=(cj5*r00);
IkReal x1859=(cj5*r20);
IkReal x1860=((1.0)*cj0);
IkReal x1861=(sj1*sj2);
IkReal x1862=((1.0)*x1854);
IkReal x1863=((1.0)*x1853);
IkReal x1864=(sj5*x1853);
evalcond[0]=((((-1.0)*x1859*x1863))+(((-1.0)*r22*x1862))+((r21*x1864)));
evalcond[1]=(sj0+(((-1.0)*r02*x1862))+((x1853*x1857))+(((-1.0)*x1858*x1863)));
evalcond[2]=((((-1.0)*x1856*x1863))+((r11*x1864))+(((-1.0)*r12*x1862))+(((-1.0)*x1860)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x1862))+((x1854*x1859))+(((-1.0)*r22*x1863)));
evalcond[4]=((((-1.0)*r02*x1863))+(((-1.0)*x1860*x1861))+((x1854*x1858))+((cj0*x1855))+(((-1.0)*x1857*x1862)));
evalcond[5]=((((-1.0)*sj0*x1861))+((x1854*x1856))+(((-1.0)*r12*x1863))+((sj0*x1855))+(((-1.0)*r11*sj5*x1862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1865=cj5*cj5;
IkReal x1866=r21*r21;
IkReal x1867=(cj2*sj1);
IkReal x1868=(cj1*sj2);
IkReal x1869=(r21*sj5);
IkReal x1870=((1.0)*cj5*r20);
CheckValue<IkReal> x1871=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1865*x1866))+(r22*r22)+(((-2.0)*cj5*r20*x1869))+((x1865*(r20*r20)))+x1866)),-1);
if(!x1871.valid){
continue;
}
CheckValue<IkReal> x1872 = IKatan2WithCheck(IkReal((((r22*x1867))+((r22*x1868)))),IkReal((((x1867*x1869))+(((-1.0)*x1868*x1870))+(((-1.0)*x1867*x1870))+((x1868*x1869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1871.value)))+(x1872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1873=IKsin(j4);
IkReal x1874=IKcos(j4);
IkReal x1875=(r21*sj5);
IkReal x1876=(cj5*r20);
IkReal x1877=((1.0)*x1874);
IkReal x1878=((1.0)*x1873);
evalcond[0]=((((-1.0)*x1876*x1878))+(((-1.0)*r22*x1877))+((x1873*x1875)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x1878))+((x1874*x1876))+((cj1*sj2))+(((-1.0)*x1875*x1877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1879=(cj5*sj4);
IkReal x1880=(sj4*sj5);
if( IKabs((((r00*x1879))+(((-1.0)*r01*x1880))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1879))+((r11*x1880))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1879))+(((-1.0)*r01*x1880))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1879))+((r11*x1880))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1879))+(((-1.0)*r01*x1880))+((cj4*r02))), ((((-1.0)*r10*x1879))+((r11*x1880))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1881=IKcos(j0);
IkReal x1882=IKsin(j0);
IkReal x1883=(cj4*cj5);
IkReal x1884=(r11*sj5);
IkReal x1885=(cj1*cj2);
IkReal x1886=(cj5*r11);
IkReal x1887=((1.0)*sj4);
IkReal x1888=(cj5*r01);
IkReal x1889=((1.0)*sj5);
IkReal x1890=((0.09465)*sj5);
IkReal x1891=((1.0)*cj4);
IkReal x1892=(sj1*x1881);
IkReal x1893=(cj1*x1882);
IkReal x1894=(cj1*x1881);
IkReal x1895=(sj1*sj2*x1882);
evalcond[0]=((((-1.0)*r02*x1891))+((r01*sj4*sj5))+x1882+(((-1.0)*cj5*r00*x1887)));
evalcond[1]=(((sj4*x1884))+(((-1.0)*r12*x1891))+(((-1.0)*cj5*r10*x1887))+(((-1.0)*x1881)));
evalcond[2]=(((sj2*x1894))+((cj2*x1892))+(((-1.0)*x1888))+(((-1.0)*r00*x1889)));
evalcond[3]=(((sj2*x1893))+((cj2*sj1*x1882))+(((-1.0)*r10*x1889))+(((-1.0)*x1886)));
evalcond[4]=(((x1881*x1885))+(((-1.0)*cj4*r01*x1889))+(((-1.0)*sj2*x1892))+(((-1.0)*r02*x1887))+((r00*x1883)));
evalcond[5]=(((x1882*x1885))+(((-1.0)*r12*x1887))+((r10*x1883))+(((-1.0)*x1895))+(((-1.0)*x1884*x1891)));
evalcond[6]=((((-0.09465)*x1888))+(((0.10915)*x1882))+(((-1.0)*px))+(((-0.39225)*x1881*x1885))+(((-1.0)*r00*x1890))+(((-0.425)*x1894))+(((0.39225)*sj2*x1892)));
evalcond[7]=((((-0.09465)*x1886))+(((-1.0)*r10*x1890))+(((-0.39225)*x1882*x1885))+(((-1.0)*py))+(((-0.425)*x1893))+(((-0.10915)*x1881))+(((0.39225)*x1895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1896=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x1896.valid){
continue;
}
CheckValue<IkReal> x1897 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1896.value)))+(x1897.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1898=IKcos(j0);
IkReal x1899=IKsin(j0);
IkReal x1900=(cj5*r11);
IkReal x1901=(cj5*r01);
IkReal x1902=(cj2*sj1);
IkReal x1903=((1.0)*sj5);
IkReal x1904=((0.09465)*sj5);
IkReal x1905=((0.39225)*cj2);
IkReal x1906=((0.39225)*sj1*sj2);
IkReal x1907=(cj1*x1898);
IkReal x1908=(cj1*x1899);
evalcond[0]=(((x1898*x1902))+(((-1.0)*x1901))+((sj2*x1907))+(((-1.0)*r00*x1903)));
evalcond[1]=((((-1.0)*r10*x1903))+(((-1.0)*x1900))+((x1899*x1902))+((sj2*x1908)));
evalcond[2]=((((0.10915)*x1899))+(((-0.425)*x1907))+((x1898*x1906))+(((-1.0)*x1905*x1907))+(((-1.0)*px))+(((-0.09465)*x1901))+(((-1.0)*r00*x1904)));
evalcond[3]=((((-0.10915)*x1898))+(((-0.425)*x1908))+(((-1.0)*x1905*x1908))+(((-1.0)*r10*x1904))+(((-1.0)*py))+((x1899*x1906))+(((-0.09465)*x1900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1909=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1909;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1910=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1910;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1911=((1.0)*cj5);
IkReal x1912=((((-1.0)*r21*x1911))+(((-1.0)*r20*sj5)));
j4eval[0]=x1912;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1911))+(((-1.0)*r10*sj0*x1911))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1912);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1913=((1.0)*cj5);
CheckValue<IkReal> x1914=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1913))+(((-1.0)*r20*sj5)))),-1);
if(!x1914.valid){
continue;
}
CheckValue<IkReal> x1915 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1913))+(((-1.0)*r10*sj0*x1913))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1914.value)))+(x1915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1916=IKsin(j4);
IkReal x1917=IKcos(j4);
IkReal x1918=(cj1*cj2);
IkReal x1919=(cj5*r10);
IkReal x1920=(r01*sj5);
IkReal x1921=(cj5*r00);
IkReal x1922=(cj5*r20);
IkReal x1923=((1.0)*cj0);
IkReal x1924=(sj1*sj2);
IkReal x1925=((1.0)*x1917);
IkReal x1926=((1.0)*x1916);
IkReal x1927=(sj5*x1916);
evalcond[0]=((((-1.0)*x1922*x1926))+(((-1.0)*r22*x1925))+((r21*x1927)));
evalcond[1]=(sj0+((x1916*x1920))+(((-1.0)*r02*x1925))+(((-1.0)*x1921*x1926)));
evalcond[2]=((((-1.0)*r12*x1925))+(((-1.0)*x1923))+(((-1.0)*x1919*x1926))+((r11*x1927)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x1925))+(((-1.0)*r22*x1926))+((x1917*x1922)));
evalcond[4]=(((x1917*x1921))+(((-1.0)*r02*x1926))+((cj0*x1918))+(((-1.0)*x1923*x1924))+(((-1.0)*x1920*x1925)));
evalcond[5]=((((-1.0)*r12*x1926))+((x1917*x1919))+(((-1.0)*r11*sj5*x1925))+((sj0*x1918))+(((-1.0)*sj0*x1924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1928=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1928.valid){
continue;
}
CheckValue<IkReal> x1929 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1928.value)))+(x1929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1930=IKsin(j4);
IkReal x1931=IKcos(j4);
IkReal x1932=(cj1*cj2);
IkReal x1933=(cj5*r10);
IkReal x1934=(r01*sj5);
IkReal x1935=(cj5*r00);
IkReal x1936=(cj5*r20);
IkReal x1937=((1.0)*cj0);
IkReal x1938=(sj1*sj2);
IkReal x1939=((1.0)*x1931);
IkReal x1940=((1.0)*x1930);
IkReal x1941=(sj5*x1930);
evalcond[0]=((((-1.0)*r22*x1939))+((r21*x1941))+(((-1.0)*x1936*x1940)));
evalcond[1]=(sj0+((x1930*x1934))+(((-1.0)*x1935*x1940))+(((-1.0)*r02*x1939)));
evalcond[2]=(((r11*x1941))+(((-1.0)*r12*x1939))+(((-1.0)*x1933*x1940))+(((-1.0)*x1937)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1940))+((cj1*sj2))+((x1931*x1936))+(((-1.0)*r21*sj5*x1939)));
evalcond[4]=((((-1.0)*x1937*x1938))+((x1931*x1935))+(((-1.0)*r02*x1940))+(((-1.0)*x1934*x1939))+((cj0*x1932)));
evalcond[5]=((((-1.0)*r11*sj5*x1939))+((x1931*x1933))+(((-1.0)*sj0*x1938))+((sj0*x1932))+(((-1.0)*r12*x1940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1942=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1942.valid){
continue;
}
CheckValue<IkReal> x1943 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1942.value)))+(x1943.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1944=IKsin(j4);
IkReal x1945=IKcos(j4);
IkReal x1946=(cj1*cj2);
IkReal x1947=(cj5*r10);
IkReal x1948=(r01*sj5);
IkReal x1949=(cj5*r00);
IkReal x1950=(cj5*r20);
IkReal x1951=((1.0)*cj0);
IkReal x1952=(sj1*sj2);
IkReal x1953=((1.0)*x1945);
IkReal x1954=((1.0)*x1944);
IkReal x1955=(sj5*x1944);
evalcond[0]=((((-1.0)*r22*x1953))+(((-1.0)*x1950*x1954))+((r21*x1955)));
evalcond[1]=((((-1.0)*x1949*x1954))+sj0+((x1944*x1948))+(((-1.0)*r02*x1953)));
evalcond[2]=((((-1.0)*x1951))+((r11*x1955))+(((-1.0)*x1947*x1954))+(((-1.0)*r12*x1953)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x1953))+(((-1.0)*r22*x1954))+((x1945*x1950))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x1948*x1953))+((x1945*x1949))+((cj0*x1946))+(((-1.0)*r02*x1954))+(((-1.0)*x1951*x1952)));
evalcond[5]=(((x1945*x1947))+(((-1.0)*sj0*x1952))+(((-1.0)*r11*sj5*x1953))+((sj0*x1946))+(((-1.0)*r12*x1954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1956=cj1*cj1;
IkReal x1957=cj2*cj2;
IkReal x1958=(sj1*sj2);
IkReal x1959=((156900000.0)*py);
IkReal x1960=(cj1*cj5);
IkReal x1961=((14850585.0)*cj2);
IkReal x1962=(r00*sj5);
IkReal x1963=((16090500.0)*cj1);
IkReal x1964=((4132419.0)*cj5);
IkReal x1965=(r10*sj5);
IkReal x1966=((170000000.0)*cj1);
IkReal x1967=((156900000.0)*px);
IkReal x1968=(cj1*cj2);
IkReal x1969=((14850585.0)*cj5);
CheckValue<IkReal> x1970 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+((x1959*x1968))+(((-14850585.0)*x1958*x1965))+((cj1*x1961*x1965))+(((-1.0)*x1958*x1959))+((r11*x1960*x1961))+(((-1.0)*r11*x1958*x1969))+(((-1.0)*r01*x1964))+((py*x1966))+(((16090500.0)*r11*x1960))+(((-4132419.0)*x1962))+((x1963*x1965)))),IkReal(((((-1.0)*r01*x1958*x1969))+(((-14850585.0)*x1958*x1962))+(((-1.0)*x1958*x1967))+((px*x1966))+(((43660000.0)*py))+((cj1*x1961*x1962))+(((16090500.0)*r01*x1960))+((r11*x1964))+(((4132419.0)*x1965))+((x1962*x1963))+((r01*x1960*x1961))+((x1967*x1968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1970.valid){
continue;
}
CheckValue<IkReal> x1971=IKPowWithIntegerCheck(IKsign(((-66309514.0)+(((-133365000.0)*cj2*x1956))+(((-123088050.0)*x1956*x1957))+(((61544025.0)*x1957))+(((133365000.0)*cj1*x1958))+(((123088050.0)*x1958*x1968))+(((-10705975.0)*x1956)))),-1);
if(!x1971.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1970.value)+(((1.5707963267949)*(x1971.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1972=IKcos(j0);
IkReal x1973=IKsin(j0);
IkReal x1974=((0.425)*cj1);
IkReal x1975=(sj1*sj2);
IkReal x1976=(cj1*cj2);
IkReal x1977=((0.09465)*cj5);
IkReal x1978=((0.09465)*sj5);
IkReal x1979=((0.39225)*x1973);
IkReal x1980=((0.39225)*x1972);
evalcond[0]=((((-1.0)*x1976*x1980))+((x1975*x1980))+(((0.10915)*x1973))+(((-1.0)*r00*x1978))+(((-1.0)*r01*x1977))+(((-1.0)*x1972*x1974))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*x1976*x1979))+((x1975*x1979))+(((-1.0)*x1973*x1974))+(((-0.10915)*x1972))+(((-1.0)*py))+(((-1.0)*r10*x1978))+(((-1.0)*r11*x1977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x1981=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1981;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1981);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1982=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1982;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1983=((1.0)*cj5);
IkReal x1984=((((-1.0)*r21*x1983))+(((-1.0)*r20*sj5)));
j4eval[0]=x1984;
j4eval[1]=((IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1983))+(((-1.0)*cj0*r00*x1983)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1984);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1985=((-1.0)*r20);
IkReal x1987 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1987)==0){
continue;
}
IkReal x1986=pow(x1987,-0.5);
CheckValue<IkReal> x1988 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1985),IKFAST_ATAN2_MAGTHRESH);
if(!x1988.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1988.value));
IkReal gconst1=(r21*x1986);
IkReal gconst2=(x1985*x1986);
CheckValue<IkReal> x1989 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1989.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1989.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1990=((-1.0)*r20);
IkReal x1991=x1986;
CheckValue<IkReal> x1993 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1990),IKFAST_ATAN2_MAGTHRESH);
if(!x1993.valid){
continue;
}
IkReal x1992=((-1.0)*(x1993.value));
sj5=gconst1;
cj5=gconst2;
j5=x1992;
IkReal gconst0=x1992;
IkReal gconst1=(r21*x1991);
IkReal gconst2=(x1990*x1991);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1994=((-1.0)*r20);
IkReal x1995=x1986;
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1994),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
IkReal x1996=((-1.0)*(x1997.value));
sj5=gconst1;
cj5=gconst2;
j5=x1996;
IkReal gconst0=x1996;
IkReal gconst1=(r21*x1995);
IkReal gconst2=(x1994*x1995);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1998=((-1.0)*r20);
IkReal x1999=x1986;
CheckValue<IkReal> x2001 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1998),IKFAST_ATAN2_MAGTHRESH);
if(!x2001.valid){
continue;
}
IkReal x2000=((-1.0)*(x2001.value));
sj5=gconst1;
cj5=gconst2;
j5=x2000;
IkReal gconst0=x2000;
IkReal gconst1=(r21*x1999);
IkReal gconst2=(x1998*x1999);
IkReal x2002=r22*r22;
CheckValue<IkReal> x2006=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2002))),-1);
if(!x2006.valid){
continue;
}
IkReal x2003=x2006.value;
IkReal x2004=(sj3*x2003);
IkReal x2005=(((sj3*x2002))+(((2.0)*x2004*(r20*r20)*(r21*r21)))+((x2004*(r20*r20*r20*r20)))+((x2004*(r21*r21*r21*r21))));
j4eval[0]=x2005;
j4eval[1]=IKsign(x2005);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2007=gconst1*gconst1;
IkReal x2008=r21*r21;
IkReal x2009=gconst2*gconst2;
IkReal x2010=r20*r20;
IkReal x2011=(gconst2*r20);
IkReal x2012=(cj1*cj2);
IkReal x2013=(sj1*sj2);
IkReal x2014=(gconst1*r21);
IkReal x2015=(cj3*gconst2);
IkReal x2016=(cj3*r20);
CheckValue<IkReal> x2017=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x2007*x2008))+(((-2.0)*sj3*x2011*x2014))+((sj3*x2009*x2010)))),-1);
if(!x2017.valid){
continue;
}
CheckValue<IkReal> x2018 = IKatan2WithCheck(IkReal((((gconst1*r22*x2016))+((r22*x2013))+((r21*r22*x2015))+(((-1.0)*r22*x2012)))),IkReal(((((-1.0)*gconst1*x2010*x2015))+((r21*x2007*x2016))+((x2011*x2012))+(((-1.0)*x2011*x2013))+((gconst1*x2008*x2015))+(((-1.0)*x2012*x2014))+(((-1.0)*r21*x2009*x2016))+((x2013*x2014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2017.value)))+(x2018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2019=IKsin(j4);
IkReal x2020=IKcos(j4);
IkReal x2021=(gconst1*sj3);
IkReal x2022=(cj2*sj0);
IkReal x2023=(cj3*gconst1);
IkReal x2024=(sj1*sj2);
IkReal x2025=(cj3*gconst2);
IkReal x2026=(cj1*cj2);
IkReal x2027=(gconst2*sj3);
IkReal x2028=(cj2*sj1);
IkReal x2029=((1.0)*cj0);
IkReal x2030=(cj1*sj2);
IkReal x2031=((1.0)*x2020);
IkReal x2032=((1.0)*x2019);
IkReal x2033=(gconst1*x2019);
IkReal x2034=(cj3*x2019);
IkReal x2035=(x2020*x2027);
evalcond[0]=(((r21*x2033))+(((-1.0)*r22*x2031))+(((-1.0)*gconst2*r20*x2032)));
evalcond[1]=(sj0+((r01*x2033))+(((-1.0)*gconst2*r00*x2032))+(((-1.0)*r02*x2031)));
evalcond[2]=((((-1.0)*gconst2*r10*x2032))+(((-1.0)*r12*x2031))+(((-1.0)*x2029))+((r11*x2033)));
evalcond[3]=(((r22*x2034))+((r21*x2020*x2023))+(((-1.0)*r20*x2025*x2031))+x2028+x2030+((r20*x2021))+((r21*x2027)));
evalcond[4]=((((-1.0)*r21*x2021*x2031))+(((-1.0)*r22*sj3*x2032))+x2024+(((-1.0)*x2026))+((r20*x2035))+((r20*x2023))+((r21*x2025)));
evalcond[5]=(((r01*x2025))+((r00*x2023))+((r00*x2035))+((cj0*x2028))+(((-1.0)*r02*sj3*x2032))+((cj0*x2030))+(((-1.0)*r01*x2021*x2031)));
evalcond[6]=(((r01*x2027))+((r00*x2021))+((r01*x2020*x2023))+((cj0*x2026))+((r02*x2034))+(((-1.0)*x2024*x2029))+(((-1.0)*r00*x2025*x2031)));
evalcond[7]=((((-1.0)*r12*sj3*x2032))+((r10*x2023))+(((-1.0)*r11*x2021*x2031))+((r10*x2035))+((r11*x2025))+((sj1*x2022))+((sj0*x2030)));
evalcond[8]=(((r10*x2021))+((r11*x2027))+((r12*x2034))+(((-1.0)*sj0*x2024))+((cj1*x2022))+(((-1.0)*r10*x2025*x2031))+((r11*x2020*x2023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2036=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x2036.valid){
continue;
}
CheckValue<IkReal> x2037 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2036.value)))+(x2037.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2038=IKsin(j4);
IkReal x2039=IKcos(j4);
IkReal x2040=(gconst1*sj3);
IkReal x2041=(cj2*sj0);
IkReal x2042=(cj3*gconst1);
IkReal x2043=(sj1*sj2);
IkReal x2044=(cj3*gconst2);
IkReal x2045=(cj1*cj2);
IkReal x2046=(gconst2*sj3);
IkReal x2047=(cj2*sj1);
IkReal x2048=((1.0)*cj0);
IkReal x2049=(cj1*sj2);
IkReal x2050=((1.0)*x2039);
IkReal x2051=((1.0)*x2038);
IkReal x2052=(gconst1*x2038);
IkReal x2053=(cj3*x2038);
IkReal x2054=(x2039*x2046);
evalcond[0]=((((-1.0)*r22*x2050))+(((-1.0)*gconst2*r20*x2051))+((r21*x2052)));
evalcond[1]=(((r01*x2052))+sj0+(((-1.0)*r02*x2050))+(((-1.0)*gconst2*r00*x2051)));
evalcond[2]=((((-1.0)*gconst2*r10*x2051))+((r11*x2052))+(((-1.0)*x2048))+(((-1.0)*r12*x2050)));
evalcond[3]=(((r21*x2046))+((r22*x2053))+x2047+x2049+((r20*x2040))+((r21*x2039*x2042))+(((-1.0)*r20*x2044*x2050)));
evalcond[4]=(((r21*x2044))+x2043+((r20*x2042))+(((-1.0)*r21*x2040*x2050))+(((-1.0)*x2045))+(((-1.0)*r22*sj3*x2051))+((r20*x2054)));
evalcond[5]=((((-1.0)*r01*x2040*x2050))+((cj0*x2049))+((cj0*x2047))+(((-1.0)*r02*sj3*x2051))+((r01*x2044))+((r00*x2042))+((r00*x2054)));
evalcond[6]=(((cj0*x2045))+((r01*x2039*x2042))+((r02*x2053))+(((-1.0)*x2043*x2048))+((r01*x2046))+(((-1.0)*r00*x2044*x2050))+((r00*x2040)));
evalcond[7]=(((r10*x2054))+((r11*x2044))+(((-1.0)*r11*x2040*x2050))+((sj0*x2049))+((sj1*x2041))+((r10*x2042))+(((-1.0)*r12*sj3*x2051)));
evalcond[8]=((((-1.0)*r10*x2044*x2050))+((r12*x2053))+(((-1.0)*sj0*x2043))+((r11*x2046))+((r11*x2039*x2042))+((r10*x2040))+((cj1*x2041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2055=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x2055.valid){
continue;
}
CheckValue<IkReal> x2056 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2055.value)))+(x2056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2057=IKsin(j4);
IkReal x2058=IKcos(j4);
IkReal x2059=(gconst1*sj3);
IkReal x2060=(cj2*sj0);
IkReal x2061=(cj3*gconst1);
IkReal x2062=(sj1*sj2);
IkReal x2063=(cj3*gconst2);
IkReal x2064=(cj1*cj2);
IkReal x2065=(gconst2*sj3);
IkReal x2066=(cj2*sj1);
IkReal x2067=((1.0)*cj0);
IkReal x2068=(cj1*sj2);
IkReal x2069=((1.0)*x2058);
IkReal x2070=((1.0)*x2057);
IkReal x2071=(gconst1*x2057);
IkReal x2072=(cj3*x2057);
IkReal x2073=(x2058*x2065);
evalcond[0]=((((-1.0)*r22*x2069))+(((-1.0)*gconst2*r20*x2070))+((r21*x2071)));
evalcond[1]=(sj0+(((-1.0)*r02*x2069))+(((-1.0)*gconst2*r00*x2070))+((r01*x2071)));
evalcond[2]=((((-1.0)*r12*x2069))+((r11*x2071))+(((-1.0)*x2067))+(((-1.0)*gconst2*r10*x2070)));
evalcond[3]=(((r21*x2065))+((r22*x2072))+x2068+x2066+((r21*x2058*x2061))+(((-1.0)*r20*x2063*x2069))+((r20*x2059)));
evalcond[4]=((((-1.0)*r22*sj3*x2070))+((r21*x2063))+x2062+((r20*x2073))+(((-1.0)*x2064))+((r20*x2061))+(((-1.0)*r21*x2059*x2069)));
evalcond[5]=(((cj0*x2066))+((cj0*x2068))+((r00*x2061))+((r01*x2063))+(((-1.0)*r01*x2059*x2069))+((r00*x2073))+(((-1.0)*r02*sj3*x2070)));
evalcond[6]=(((cj0*x2064))+(((-1.0)*r00*x2063*x2069))+((r02*x2072))+((r01*x2058*x2061))+(((-1.0)*x2062*x2067))+((r01*x2065))+((r00*x2059)));
evalcond[7]=(((r11*x2063))+(((-1.0)*r12*sj3*x2070))+((sj1*x2060))+((r10*x2061))+((sj0*x2068))+((r10*x2073))+(((-1.0)*r11*x2059*x2069)));
evalcond[8]=(((r10*x2059))+((r12*x2072))+((r11*x2065))+(((-1.0)*r10*x2063*x2069))+((cj1*x2060))+(((-1.0)*sj0*x2062))+((r11*x2058*x2061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2074=((-1.0)*r21);
IkReal x2076 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2076)==0){
continue;
}
IkReal x2075=pow(x2076,-0.5);
CheckValue<IkReal> x2077 = IKatan2WithCheck(IkReal(x2074),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2077.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x2077.value))));
IkReal gconst4=(x2074*x2075);
IkReal gconst5=((1.0)*r20*x2075);
CheckValue<IkReal> x2078 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2078.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2078.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2079=((-1.0)*r21);
CheckValue<IkReal> x2082 = IKatan2WithCheck(IkReal(x2079),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2082.valid){
continue;
}
IkReal x2080=((1.0)*(x2082.value));
IkReal x2081=x2075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2080)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2080)));
IkReal gconst4=(x2079*x2081);
IkReal gconst5=((1.0)*r20*x2081);
IkReal x2083=r22*r22;
IkReal x2084=((1.0)*x2083);
CheckValue<IkReal> x2088=IKPowWithIntegerCheck(((-1.0)+x2083),-1);
if(!x2088.valid){
continue;
}
IkReal x2085=x2088.value;
if((((1.0)+(((-1.0)*x2084)))) < -0.00001)
continue;
IkReal x2086=IKsqrt(((1.0)+(((-1.0)*x2084))));
IkReal x2087=(sj0*x2085*x2086);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2087+(((-1.0)*x2084*x2087))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2089=((-1.0)*r21);
CheckValue<IkReal> x2092 = IKatan2WithCheck(IkReal(x2089),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2092.valid){
continue;
}
IkReal x2090=((1.0)*(x2092.value));
IkReal x2091=x2075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2090)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2090)));
IkReal gconst4=(x2089*x2091);
IkReal gconst5=((1.0)*r20*x2091);
IkReal x2093=r22*r22;
IkReal x2094=((1.0)*x2093);
CheckValue<IkReal> x2098=IKPowWithIntegerCheck(((-1.0)+x2093),-1);
if(!x2098.valid){
continue;
}
IkReal x2095=x2098.value;
if((((1.0)+(((-1.0)*x2094)))) < -0.00001)
continue;
IkReal x2096=IKsqrt(((1.0)+(((-1.0)*x2094))));
IkReal x2097=(cj0*x2095*x2096);
j4eval[0]=((IKabs((x2097+(((-1.0)*x2094*x2097)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2099=((-1.0)*r21);
CheckValue<IkReal> x2102 = IKatan2WithCheck(IkReal(x2099),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2102.valid){
continue;
}
IkReal x2100=((1.0)*(x2102.value));
IkReal x2101=x2075;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2100)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2100)));
IkReal gconst4=(x2099*x2101);
IkReal gconst5=((1.0)*r20*x2101);
IkReal x2103=r22*r22;
IkReal x2104=(cj0*r02);
IkReal x2105=(r12*sj0);
CheckValue<IkReal> x2109=IKPowWithIntegerCheck(((-1.0)+x2103),-1);
if(!x2109.valid){
continue;
}
IkReal x2106=x2109.value;
if((((1.0)+(((-1.0)*x2103)))) < -0.00001)
continue;
IkReal x2107=IKsqrt(((1.0)+(((-1.0)*x2103))));
IkReal x2108=((1.0)*r22*x2106*x2107);
j4eval[0]=0;
j4eval[1]=((IKabs((x2105+x2104)))+(IKabs(((((-1.0)*x2105*x2108))+(((-1.0)*x2104*x2108))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2110=((1.0)*gconst5);
CheckValue<IkReal> x2111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2110))+(((-1.0)*gconst4*r20)))),-1);
if(!x2111.valid){
continue;
}
CheckValue<IkReal> x2112 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2110))+((cj0*gconst4*r01))+(((-1.0)*cj0*r00*x2110))+((gconst4*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2111.value)))+(x2112.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2113=IKsin(j4);
IkReal x2114=IKcos(j4);
IkReal x2115=(gconst4*r11);
IkReal x2116=(cj2*sj0);
IkReal x2117=(sj1*sj2);
IkReal x2118=(gconst4*sj3);
IkReal x2119=(gconst5*r10);
IkReal x2120=(cj1*cj2);
IkReal x2121=(gconst4*r01);
IkReal x2122=(cj2*sj1);
IkReal x2123=(gconst4*r21);
IkReal x2124=(gconst5*r00);
IkReal x2125=(gconst5*sj3);
IkReal x2126=(cj3*gconst5);
IkReal x2127=(cj3*gconst4);
IkReal x2128=(cj1*sj2);
IkReal x2129=((1.0)*cj0);
IkReal x2130=((1.0)*x2114);
IkReal x2131=((1.0)*x2113);
IkReal x2132=(cj3*x2113);
IkReal x2133=(cj3*x2114);
IkReal x2134=(x2114*x2125);
evalcond[0]=((((-1.0)*r22*x2130))+((x2113*x2123))+(((-1.0)*gconst5*r20*x2131)));
evalcond[1]=(sj0+((x2113*x2121))+(((-1.0)*x2124*x2131))+(((-1.0)*r02*x2130)));
evalcond[2]=((((-1.0)*x2119*x2131))+(((-1.0)*r12*x2130))+(((-1.0)*x2129))+((x2113*x2115)));
evalcond[3]=(x2122+x2128+((r21*x2125))+((r20*x2118))+(((-1.0)*r20*x2126*x2130))+((r22*x2132))+((x2123*x2133)));
evalcond[4]=(((r20*x2127))+x2117+((r21*x2126))+(((-1.0)*x2120))+(((-1.0)*r22*sj3*x2131))+((r20*x2134))+(((-1.0)*r21*x2118*x2130)));
evalcond[5]=((((-1.0)*r01*x2118*x2130))+((sj3*x2114*x2124))+((r01*x2126))+((r00*x2127))+(((-1.0)*r02*sj3*x2131))+((cj0*x2122))+((cj0*x2128)));
evalcond[6]=((((-1.0)*x2117*x2129))+((x2121*x2133))+((r02*x2132))+((r00*x2118))+(((-1.0)*cj3*x2124*x2130))+((r01*x2125))+((cj0*x2120)));
evalcond[7]=(((sj1*x2116))+((sj0*x2128))+((r10*x2127))+((r11*x2126))+((sj3*x2114*x2119))+(((-1.0)*r12*sj3*x2131))+(((-1.0)*sj3*x2115*x2130)));
evalcond[8]=((((-1.0)*sj0*x2117))+((r12*x2132))+((r11*x2125))+((r10*x2118))+((x2115*x2133))+(((-1.0)*cj3*x2119*x2130))+((cj1*x2116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2135=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x2135.valid){
continue;
}
CheckValue<IkReal> x2136 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2135.value)))+(x2136.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2137=IKsin(j4);
IkReal x2138=IKcos(j4);
IkReal x2139=(gconst4*r11);
IkReal x2140=(cj2*sj0);
IkReal x2141=(sj1*sj2);
IkReal x2142=(gconst4*sj3);
IkReal x2143=(gconst5*r10);
IkReal x2144=(cj1*cj2);
IkReal x2145=(gconst4*r01);
IkReal x2146=(cj2*sj1);
IkReal x2147=(gconst4*r21);
IkReal x2148=(gconst5*r00);
IkReal x2149=(gconst5*sj3);
IkReal x2150=(cj3*gconst5);
IkReal x2151=(cj3*gconst4);
IkReal x2152=(cj1*sj2);
IkReal x2153=((1.0)*cj0);
IkReal x2154=((1.0)*x2138);
IkReal x2155=((1.0)*x2137);
IkReal x2156=(cj3*x2137);
IkReal x2157=(cj3*x2138);
IkReal x2158=(x2138*x2149);
evalcond[0]=(((x2137*x2147))+(((-1.0)*gconst5*r20*x2155))+(((-1.0)*r22*x2154)));
evalcond[1]=(sj0+(((-1.0)*x2148*x2155))+(((-1.0)*r02*x2154))+((x2137*x2145)));
evalcond[2]=((((-1.0)*x2143*x2155))+(((-1.0)*r12*x2154))+(((-1.0)*x2153))+((x2137*x2139)));
evalcond[3]=(((x2147*x2157))+(((-1.0)*r20*x2150*x2154))+((r20*x2142))+x2152+x2146+((r22*x2156))+((r21*x2149)));
evalcond[4]=((((-1.0)*x2144))+(((-1.0)*r21*x2142*x2154))+((r20*x2151))+((r20*x2158))+x2141+((r21*x2150))+(((-1.0)*r22*sj3*x2155)));
evalcond[5]=(((cj0*x2146))+(((-1.0)*r02*sj3*x2155))+((cj0*x2152))+((sj3*x2138*x2148))+((r00*x2151))+((r01*x2150))+(((-1.0)*r01*x2142*x2154)));
evalcond[6]=((((-1.0)*x2141*x2153))+((x2145*x2157))+((cj0*x2144))+((r02*x2156))+(((-1.0)*cj3*x2148*x2154))+((r01*x2149))+((r00*x2142)));
evalcond[7]=((((-1.0)*r12*sj3*x2155))+((sj0*x2152))+((sj3*x2138*x2143))+((sj1*x2140))+((r10*x2151))+((r11*x2150))+(((-1.0)*sj3*x2139*x2154)));
evalcond[8]=(((r11*x2149))+((x2139*x2157))+((cj1*x2140))+(((-1.0)*cj3*x2143*x2154))+((r10*x2142))+((r12*x2156))+(((-1.0)*sj0*x2141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2159=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x2159.valid){
continue;
}
CheckValue<IkReal> x2160 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2159.value)))+(x2160.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2161=IKsin(j4);
IkReal x2162=IKcos(j4);
IkReal x2163=(gconst4*r11);
IkReal x2164=(cj2*sj0);
IkReal x2165=(sj1*sj2);
IkReal x2166=(gconst4*sj3);
IkReal x2167=(gconst5*r10);
IkReal x2168=(cj1*cj2);
IkReal x2169=(gconst4*r01);
IkReal x2170=(cj2*sj1);
IkReal x2171=(gconst4*r21);
IkReal x2172=(gconst5*r00);
IkReal x2173=(gconst5*sj3);
IkReal x2174=(cj3*gconst5);
IkReal x2175=(cj3*gconst4);
IkReal x2176=(cj1*sj2);
IkReal x2177=((1.0)*cj0);
IkReal x2178=((1.0)*x2162);
IkReal x2179=((1.0)*x2161);
IkReal x2180=(cj3*x2161);
IkReal x2181=(cj3*x2162);
IkReal x2182=(x2162*x2173);
evalcond[0]=((((-1.0)*gconst5*r20*x2179))+((x2161*x2171))+(((-1.0)*r22*x2178)));
evalcond[1]=(sj0+((x2161*x2169))+(((-1.0)*r02*x2178))+(((-1.0)*x2172*x2179)));
evalcond[2]=(((x2161*x2163))+(((-1.0)*x2177))+(((-1.0)*r12*x2178))+(((-1.0)*x2167*x2179)));
evalcond[3]=(((r22*x2180))+((r21*x2173))+x2170+x2176+((r20*x2166))+(((-1.0)*r20*x2174*x2178))+((x2171*x2181)));
evalcond[4]=(((r21*x2174))+x2165+((r20*x2182))+((r20*x2175))+(((-1.0)*r22*sj3*x2179))+(((-1.0)*x2168))+(((-1.0)*r21*x2166*x2178)));
evalcond[5]=(((r01*x2174))+((r00*x2175))+(((-1.0)*r02*sj3*x2179))+((cj0*x2170))+((cj0*x2176))+((sj3*x2162*x2172))+(((-1.0)*r01*x2166*x2178)));
evalcond[6]=(((r01*x2173))+((r00*x2166))+(((-1.0)*cj3*x2172*x2178))+((x2169*x2181))+((cj0*x2168))+((r02*x2180))+(((-1.0)*x2165*x2177)));
evalcond[7]=(((r11*x2174))+((sj1*x2164))+((sj3*x2162*x2167))+(((-1.0)*r12*sj3*x2179))+(((-1.0)*sj3*x2163*x2178))+((r10*x2175))+((sj0*x2176)));
evalcond[8]=(((r11*x2173))+((x2163*x2181))+((r12*x2180))+((r10*x2166))+((cj1*x2164))+(((-1.0)*cj3*x2167*x2178))+(((-1.0)*sj0*x2165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2184 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2184)==0){
continue;
}
IkReal x2183=pow(x2184,-0.5);
CheckValue<IkReal> x2185 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2185.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2185.value));
IkReal gconst7=((-1.0)*r01*x2183);
IkReal gconst8=(r00*x2183);
CheckValue<IkReal> x2186 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2186.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2186.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2189 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2189.valid){
continue;
}
IkReal x2187=((-1.0)*(x2189.value));
IkReal x2188=x2183;
sj5=gconst7;
cj5=gconst8;
j5=x2187;
IkReal gconst6=x2187;
IkReal gconst7=((-1.0)*r01*x2188);
IkReal gconst8=(r00*x2188);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2190=((1.0)*gconst8);
CheckValue<IkReal> x2191 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2190))+((cj0*gconst7*r01))+(((-1.0)*cj0*r00*x2190))+((gconst7*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2191.valid){
continue;
}
CheckValue<IkReal> x2192=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2190))+(((-1.0)*gconst7*r20)))),-1);
if(!x2192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2191.value)+(((1.5707963267949)*(x2192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2193=IKsin(j4);
IkReal x2194=IKcos(j4);
IkReal x2195=(gconst7*sj3);
IkReal x2196=(cj3*gconst8);
IkReal x2197=(cj2*sj0);
IkReal x2198=(cj3*gconst7);
IkReal x2199=(sj1*sj2);
IkReal x2200=(cj1*cj2);
IkReal x2201=(cj2*sj1);
IkReal x2202=((1.0)*cj0);
IkReal x2203=(gconst8*sj3);
IkReal x2204=(cj1*sj2);
IkReal x2205=((1.0)*x2194);
IkReal x2206=((1.0)*x2193);
IkReal x2207=(cj3*x2193);
IkReal x2208=(gconst7*x2193);
IkReal x2209=(x2194*x2203);
evalcond[0]=((((-1.0)*gconst8*r20*x2206))+(((-1.0)*r22*x2205))+((r21*x2208)));
evalcond[1]=(sj0+((r01*x2208))+(((-1.0)*gconst8*r00*x2206))+(((-1.0)*r02*x2205)));
evalcond[2]=((((-1.0)*gconst8*r10*x2206))+(((-1.0)*x2202))+(((-1.0)*r12*x2205))+((r11*x2208)));
evalcond[3]=(x2201+x2204+((r20*x2195))+((r22*x2207))+((r21*x2203))+((r21*x2194*x2198))+(((-1.0)*r20*x2196*x2205)));
evalcond[4]=((((-1.0)*x2200))+((r20*x2209))+(((-1.0)*r21*x2195*x2205))+x2199+((r20*x2198))+((r21*x2196))+(((-1.0)*r22*sj3*x2206)));
evalcond[5]=(((r00*x2209))+(((-1.0)*r02*sj3*x2206))+((cj0*x2201))+((cj0*x2204))+((r00*x2198))+(((-1.0)*r01*x2195*x2205))+((r01*x2196)));
evalcond[6]=(((r02*x2207))+((r01*x2203))+(((-1.0)*x2199*x2202))+((cj0*x2200))+((r01*x2194*x2198))+((r00*x2195))+(((-1.0)*r00*x2196*x2205)));
evalcond[7]=(((sj1*x2197))+(((-1.0)*r11*x2195*x2205))+(((-1.0)*r12*sj3*x2206))+((r10*x2209))+((r11*x2196))+((sj0*x2204))+((r10*x2198)));
evalcond[8]=(((cj1*x2197))+((r12*x2207))+((r11*x2203))+((r11*x2194*x2198))+(((-1.0)*sj0*x2199))+(((-1.0)*r10*x2196*x2205))+((r10*x2195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2210 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2210.valid){
continue;
}
CheckValue<IkReal> x2211=IKPowWithIntegerCheck(IKsign((((gconst7*r10))+((gconst8*r11)))),-1);
if(!x2211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2210.value)+(((1.5707963267949)*(x2211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2212=IKsin(j4);
IkReal x2213=IKcos(j4);
IkReal x2214=(gconst7*sj3);
IkReal x2215=(cj3*gconst8);
IkReal x2216=(cj2*sj0);
IkReal x2217=(cj3*gconst7);
IkReal x2218=(sj1*sj2);
IkReal x2219=(cj1*cj2);
IkReal x2220=(cj2*sj1);
IkReal x2221=((1.0)*cj0);
IkReal x2222=(gconst8*sj3);
IkReal x2223=(cj1*sj2);
IkReal x2224=((1.0)*x2213);
IkReal x2225=((1.0)*x2212);
IkReal x2226=(cj3*x2212);
IkReal x2227=(gconst7*x2212);
IkReal x2228=(x2213*x2222);
evalcond[0]=(((r21*x2227))+(((-1.0)*r22*x2224))+(((-1.0)*gconst8*r20*x2225)));
evalcond[1]=(sj0+(((-1.0)*r02*x2224))+(((-1.0)*gconst8*r00*x2225))+((r01*x2227)));
evalcond[2]=((((-1.0)*r12*x2224))+(((-1.0)*x2221))+(((-1.0)*gconst8*r10*x2225))+((r11*x2227)));
evalcond[3]=(((r22*x2226))+((r20*x2214))+x2223+x2220+((r21*x2222))+(((-1.0)*r20*x2215*x2224))+((r21*x2213*x2217)));
evalcond[4]=((((-1.0)*x2219))+((r20*x2217))+x2218+(((-1.0)*r21*x2214*x2224))+(((-1.0)*r22*sj3*x2225))+((r20*x2228))+((r21*x2215)));
evalcond[5]=(((r01*x2215))+((r00*x2217))+((cj0*x2220))+((cj0*x2223))+(((-1.0)*r02*sj3*x2225))+(((-1.0)*r01*x2214*x2224))+((r00*x2228)));
evalcond[6]=(((r01*x2213*x2217))+((r00*x2214))+((r02*x2226))+(((-1.0)*r00*x2215*x2224))+((cj0*x2219))+(((-1.0)*x2218*x2221))+((r01*x2222)));
evalcond[7]=((((-1.0)*r11*x2214*x2224))+((sj0*x2223))+((r10*x2228))+(((-1.0)*r12*sj3*x2225))+((r11*x2215))+((r10*x2217))+((sj1*x2216)));
evalcond[8]=(((r12*x2226))+(((-1.0)*sj0*x2218))+((cj1*x2216))+(((-1.0)*r10*x2215*x2224))+((r10*x2214))+((r11*x2222))+((r11*x2213*x2217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2230 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2230)==0){
continue;
}
IkReal x2229=pow(x2230,-0.5);
CheckValue<IkReal> x2231 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2231.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2231.value))));
IkReal gconst10=((1.0)*r01*x2229);
IkReal gconst11=((-1.0)*r00*x2229);
CheckValue<IkReal> x2232 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2232.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2232.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2235 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2235.valid){
continue;
}
IkReal x2233=((1.0)*(x2235.value));
IkReal x2234=x2229;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2233)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2233)));
IkReal gconst10=((1.0)*r01*x2234);
IkReal gconst11=((-1.0)*r00*x2234);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2238 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2238.valid){
continue;
}
IkReal x2236=((1.0)*(x2238.value));
IkReal x2237=x2229;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2236)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2236)));
IkReal gconst10=((1.0)*r01*x2237);
IkReal gconst11=((-1.0)*r00*x2237);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2241 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2241.valid){
continue;
}
IkReal x2239=((1.0)*(x2241.value));
IkReal x2240=x2229;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2239)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2239)));
IkReal gconst10=((1.0)*r01*x2240);
IkReal gconst11=((-1.0)*r00*x2240);
IkReal x2242=r02*r02;
IkReal x2243=(r12*sj0);
IkReal x2244=x2229;
IkReal x2245=(cj0*x2244);
j4eval[0]=((IKabs(((((-1.0)*x2245))+((r02*x2243*x2244))+((x2242*x2245)))))+(IKabs((x2243+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2246=((1.0)*gconst11);
CheckValue<IkReal> x2247 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2246))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x2246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2247.valid){
continue;
}
CheckValue<IkReal> x2248=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x2246)))),-1);
if(!x2248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2247.value)+(((1.5707963267949)*(x2248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2249=IKsin(j4);
IkReal x2250=IKcos(j4);
IkReal x2251=(gconst10*sj3);
IkReal x2252=(cj3*r10);
IkReal x2253=(gconst11*r20);
IkReal x2254=(gconst11*sj3);
IkReal x2255=(cj3*gconst11);
IkReal x2256=(sj1*sj2);
IkReal x2257=(cj1*cj2);
IkReal x2258=(cj2*sj1);
IkReal x2259=(cj1*sj2);
IkReal x2260=(cj3*gconst10);
IkReal x2261=((1.0)*cj0);
IkReal x2262=((1.0)*x2250);
IkReal x2263=((1.0)*x2249);
IkReal x2264=(cj3*x2249);
IkReal x2265=(gconst10*x2249);
IkReal x2266=(x2250*x2260);
evalcond[0]=(((r21*x2265))+(((-1.0)*r22*x2262))+(((-1.0)*x2253*x2263)));
evalcond[1]=(((r01*x2265))+sj0+(((-1.0)*r02*x2262))+(((-1.0)*gconst11*r00*x2263)));
evalcond[2]=(((r11*x2265))+(((-1.0)*gconst11*r10*x2263))+(((-1.0)*x2261))+(((-1.0)*r12*x2262)));
evalcond[3]=(x2259+x2258+((r21*x2266))+((r22*x2264))+((r20*x2251))+(((-1.0)*cj3*x2253*x2262))+((r21*x2254)));
evalcond[4]=(((sj3*x2250*x2253))+x2256+(((-1.0)*x2257))+(((-1.0)*r21*x2251*x2262))+((r20*x2260))+(((-1.0)*r22*sj3*x2263))+((r21*x2255)));
evalcond[5]=(((r00*x2260))+(((-1.0)*r02*sj3*x2263))+((cj0*x2258))+((cj0*x2259))+(((-1.0)*r01*x2251*x2262))+((r00*x2250*x2254))+((r01*x2255)));
evalcond[6]=((((-1.0)*x2256*x2261))+((r01*x2266))+((cj0*x2257))+((r02*x2264))+((r00*x2251))+((r01*x2254))+(((-1.0)*r00*x2255*x2262)));
evalcond[7]=(((r10*x2250*x2254))+(((-1.0)*r12*sj3*x2263))+(((-1.0)*r11*x2251*x2262))+((gconst10*x2252))+((sj0*x2258))+((sj0*x2259))+((r11*x2255)));
evalcond[8]=((((-1.0)*gconst11*x2252*x2262))+((r10*x2251))+((r11*x2266))+(((-1.0)*sj0*x2256))+((r12*x2264))+((sj0*x2257))+((r11*x2254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2267 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2267.valid){
continue;
}
CheckValue<IkReal> x2268=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x2268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2267.value)+(((1.5707963267949)*(x2268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2269=IKsin(j4);
IkReal x2270=IKcos(j4);
IkReal x2271=(gconst10*sj3);
IkReal x2272=(cj3*r10);
IkReal x2273=(gconst11*r20);
IkReal x2274=(gconst11*sj3);
IkReal x2275=(cj3*gconst11);
IkReal x2276=(sj1*sj2);
IkReal x2277=(cj1*cj2);
IkReal x2278=(cj2*sj1);
IkReal x2279=(cj1*sj2);
IkReal x2280=(cj3*gconst10);
IkReal x2281=((1.0)*cj0);
IkReal x2282=((1.0)*x2270);
IkReal x2283=((1.0)*x2269);
IkReal x2284=(cj3*x2269);
IkReal x2285=(gconst10*x2269);
IkReal x2286=(x2270*x2280);
evalcond[0]=(((r21*x2285))+(((-1.0)*r22*x2282))+(((-1.0)*x2273*x2283)));
evalcond[1]=((((-1.0)*r02*x2282))+sj0+(((-1.0)*gconst11*r00*x2283))+((r01*x2285)));
evalcond[2]=(((r11*x2285))+(((-1.0)*x2281))+(((-1.0)*r12*x2282))+(((-1.0)*gconst11*r10*x2283)));
evalcond[3]=(((r21*x2274))+x2279+x2278+((r21*x2286))+((r20*x2271))+((r22*x2284))+(((-1.0)*cj3*x2273*x2282)));
evalcond[4]=((((-1.0)*r21*x2271*x2282))+(((-1.0)*r22*sj3*x2283))+((r21*x2275))+x2276+((r20*x2280))+((sj3*x2270*x2273))+(((-1.0)*x2277)));
evalcond[5]=(((r01*x2275))+((r00*x2270*x2274))+((cj0*x2278))+((cj0*x2279))+((r00*x2280))+(((-1.0)*r02*sj3*x2283))+(((-1.0)*r01*x2271*x2282)));
evalcond[6]=((((-1.0)*r00*x2275*x2282))+((r01*x2274))+((r00*x2271))+(((-1.0)*x2276*x2281))+((cj0*x2277))+((r01*x2286))+((r02*x2284)));
evalcond[7]=(((sj0*x2278))+((sj0*x2279))+((gconst10*x2272))+(((-1.0)*r12*sj3*x2283))+(((-1.0)*r11*x2271*x2282))+((r10*x2270*x2274))+((r11*x2275)));
evalcond[8]=(((sj0*x2277))+((r11*x2286))+((r12*x2284))+(((-1.0)*gconst11*x2272*x2282))+((r10*x2271))+(((-1.0)*sj0*x2276))+((r11*x2274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2287=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x2287.valid){
continue;
}
CheckValue<IkReal> x2288 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2287.value)))+(x2288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2289=IKsin(j4);
IkReal x2290=IKcos(j4);
IkReal x2291=(gconst10*sj3);
IkReal x2292=(cj3*r10);
IkReal x2293=(gconst11*r20);
IkReal x2294=(gconst11*sj3);
IkReal x2295=(cj3*gconst11);
IkReal x2296=(sj1*sj2);
IkReal x2297=(cj1*cj2);
IkReal x2298=(cj2*sj1);
IkReal x2299=(cj1*sj2);
IkReal x2300=(cj3*gconst10);
IkReal x2301=((1.0)*cj0);
IkReal x2302=((1.0)*x2290);
IkReal x2303=((1.0)*x2289);
IkReal x2304=(cj3*x2289);
IkReal x2305=(gconst10*x2289);
IkReal x2306=(x2290*x2300);
evalcond[0]=((((-1.0)*x2293*x2303))+(((-1.0)*r22*x2302))+((r21*x2305)));
evalcond[1]=(sj0+(((-1.0)*gconst11*r00*x2303))+((r01*x2305))+(((-1.0)*r02*x2302)));
evalcond[2]=((((-1.0)*gconst11*r10*x2303))+((r11*x2305))+(((-1.0)*x2301))+(((-1.0)*r12*x2302)));
evalcond[3]=(x2299+x2298+(((-1.0)*cj3*x2293*x2302))+((r21*x2294))+((r22*x2304))+((r20*x2291))+((r21*x2306)));
evalcond[4]=(x2296+(((-1.0)*r21*x2291*x2302))+((r20*x2300))+((r21*x2295))+(((-1.0)*x2297))+((sj3*x2290*x2293))+(((-1.0)*r22*sj3*x2303)));
evalcond[5]=(((cj0*x2299))+((cj0*x2298))+(((-1.0)*r01*x2291*x2302))+(((-1.0)*r02*sj3*x2303))+((r00*x2300))+((r00*x2290*x2294))+((r01*x2295)));
evalcond[6]=((((-1.0)*r00*x2295*x2302))+((cj0*x2297))+(((-1.0)*x2296*x2301))+((r02*x2304))+((r00*x2291))+((r01*x2294))+((r01*x2306)));
evalcond[7]=((((-1.0)*r12*sj3*x2303))+((sj0*x2299))+((sj0*x2298))+((r10*x2290*x2294))+((gconst10*x2292))+(((-1.0)*r11*x2291*x2302))+((r11*x2295)));
evalcond[8]=(((r12*x2304))+((sj0*x2297))+((r11*x2306))+((r10*x2291))+(((-1.0)*sj0*x2296))+(((-1.0)*gconst11*x2292*x2302))+((r11*x2294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2307=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2307;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2307);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2308=((1.0)*cj5);
IkReal x2309=((((-1.0)*r21*x2308))+(((-1.0)*r20*sj5)));
j4eval[0]=x2309;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2308))+((r11*sj5))))));
j4eval[2]=IKsign(x2309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2310=cj5*cj5;
IkReal x2311=(cj3*r01);
IkReal x2312=(cj5*sj5);
IkReal x2313=((1.0)*cj3);
IkReal x2314=((((-1.0)*r02*r22*x2313))+((cj3*r00*r21*x2312))+((r20*x2311*x2312))+((r21*x2310*x2311))+(((-1.0)*r00*r20*x2310*x2313))+(((-1.0)*r21*x2311)));
j4eval[0]=x2314;
j4eval[1]=IKsign(x2314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2315=cj5*cj5;
IkReal x2316=(cj3*r20);
IkReal x2317=(r21*sj3);
IkReal x2318=((1.0)*cj3);
IkReal x2319=(r01*r21);
IkReal x2320=(r01*sj3);
IkReal x2321=(r00*sj5);
IkReal x2322=(cj5*r01*sj5);
IkReal x2323=((1.0)*x2315);
CheckValue<IkReal> x2324 = IKatan2WithCheck(IkReal((((r22*sj3*x2321))+((cj5*r22*x2320)))),IkReal((((x2317*x2322))+(((-1.0)*r00*x2317*x2323))+((r00*x2317))+(((-1.0)*r20*x2320*x2323))+(((-1.0)*cj5*r20*sj3*x2321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2324.valid){
continue;
}
CheckValue<IkReal> x2325=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x2318))+((x2316*x2322))+(((-1.0)*x2318*x2319))+(((-1.0)*r00*x2316*x2323))+((cj3*x2315*x2319))+((cj3*cj5*r21*x2321)))),-1);
if(!x2325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2324.value)+(((1.5707963267949)*(x2325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2326=IKsin(j4);
IkReal x2327=IKcos(j4);
IkReal x2328=(cj2*sj1);
IkReal x2329=(cj1*sj2);
IkReal x2330=(r11*sj5);
IkReal x2331=(cj5*r10);
IkReal x2332=(sj1*sj2);
IkReal x2333=(cj5*r01);
IkReal x2334=(cj5*r00);
IkReal x2335=(cj3*sj5);
IkReal x2336=(r21*sj5);
IkReal x2337=(cj1*cj2);
IkReal x2338=(cj5*sj3);
IkReal x2339=(sj3*sj5);
IkReal x2340=(r01*sj5);
IkReal x2341=(cj3*cj5);
IkReal x2342=(cj5*r20);
IkReal x2343=((1.0)*x2327);
IkReal x2344=((1.0)*x2326);
IkReal x2345=(cj3*x2327);
IkReal x2346=(sj3*x2327);
IkReal x2347=(cj3*x2326);
IkReal x2348=(x2329+x2328);
evalcond[0]=((((-1.0)*r22*x2343))+((x2326*x2336))+(((-1.0)*x2342*x2344)));
evalcond[1]=((((-1.0)*x2331*x2344))+((x2326*x2330))+(((-1.0)*r12*x2343)));
evalcond[2]=((1.0)+(((-1.0)*x2334*x2344))+(((-1.0)*r02*x2343))+((x2326*x2340)));
evalcond[3]=((((-1.0)*cj3*x2334*x2343))+((sj3*x2333))+((r01*x2327*x2335))+((r00*x2339))+((r02*x2347)));
evalcond[4]=(((x2334*x2346))+(((-1.0)*r02*sj3*x2344))+(((-1.0)*r01*x2339*x2343))+((cj3*x2333))+((r00*x2335)));
evalcond[5]=(((r21*x2338))+(((-1.0)*r20*x2341*x2343))+x2348+((r22*x2347))+((r20*x2339))+((r21*x2327*x2335)));
evalcond[6]=(((x2331*x2346))+x2348+(((-1.0)*sj3*x2330*x2343))+((r11*x2341))+(((-1.0)*r12*sj3*x2344))+((r10*x2335)));
evalcond[7]=(x2337+((r12*x2347))+((r11*x2338))+(((-1.0)*cj3*x2331*x2343))+((x2330*x2345))+(((-1.0)*x2332))+((r10*x2339)));
evalcond[8]=((((-1.0)*sj3*x2336*x2343))+x2332+(((-1.0)*r22*sj3*x2344))+((r21*x2341))+((r20*x2335))+((r20*x2327*x2338))+(((-1.0)*x2337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2349=((1.0)*cj5);
CheckValue<IkReal> x2350 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2350.valid){
continue;
}
CheckValue<IkReal> x2351=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2349))+(((-1.0)*r20*sj5)))),-1);
if(!x2351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2350.value)+(((1.5707963267949)*(x2351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2352=IKsin(j4);
IkReal x2353=IKcos(j4);
IkReal x2354=(cj2*sj1);
IkReal x2355=(cj1*sj2);
IkReal x2356=(r11*sj5);
IkReal x2357=(cj5*r10);
IkReal x2358=(sj1*sj2);
IkReal x2359=(cj5*r01);
IkReal x2360=(cj5*r00);
IkReal x2361=(cj3*sj5);
IkReal x2362=(r21*sj5);
IkReal x2363=(cj1*cj2);
IkReal x2364=(cj5*sj3);
IkReal x2365=(sj3*sj5);
IkReal x2366=(r01*sj5);
IkReal x2367=(cj3*cj5);
IkReal x2368=(cj5*r20);
IkReal x2369=((1.0)*x2353);
IkReal x2370=((1.0)*x2352);
IkReal x2371=(cj3*x2353);
IkReal x2372=(sj3*x2353);
IkReal x2373=(cj3*x2352);
IkReal x2374=(x2354+x2355);
evalcond[0]=((((-1.0)*x2368*x2370))+((x2352*x2362))+(((-1.0)*r22*x2369)));
evalcond[1]=(((x2352*x2356))+(((-1.0)*x2357*x2370))+(((-1.0)*r12*x2369)));
evalcond[2]=((1.0)+(((-1.0)*x2360*x2370))+((x2352*x2366))+(((-1.0)*r02*x2369)));
evalcond[3]=(((r01*x2353*x2361))+((r02*x2373))+(((-1.0)*cj3*x2360*x2369))+((sj3*x2359))+((r00*x2365)));
evalcond[4]=((((-1.0)*r02*sj3*x2370))+((cj3*x2359))+((x2360*x2372))+(((-1.0)*r01*x2365*x2369))+((r00*x2361)));
evalcond[5]=(((r20*x2365))+((r21*x2353*x2361))+x2374+(((-1.0)*r20*x2367*x2369))+((r22*x2373))+((r21*x2364)));
evalcond[6]=(((r11*x2367))+(((-1.0)*sj3*x2356*x2369))+x2374+(((-1.0)*r12*sj3*x2370))+((r10*x2361))+((x2357*x2372)));
evalcond[7]=(((r11*x2364))+((r12*x2373))+x2363+(((-1.0)*x2358))+((r10*x2365))+(((-1.0)*cj3*x2357*x2369))+((x2356*x2371)));
evalcond[8]=(((r20*x2361))+(((-1.0)*sj3*x2362*x2369))+((r20*x2353*x2364))+(((-1.0)*r22*sj3*x2370))+x2358+(((-1.0)*x2363))+((r21*x2367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2375 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2375.valid){
continue;
}
CheckValue<IkReal> x2376=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2375.value)+(((1.5707963267949)*(x2376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2377=IKsin(j4);
IkReal x2378=IKcos(j4);
IkReal x2379=(cj2*sj1);
IkReal x2380=(cj1*sj2);
IkReal x2381=(r11*sj5);
IkReal x2382=(cj5*r10);
IkReal x2383=(sj1*sj2);
IkReal x2384=(cj5*r01);
IkReal x2385=(cj5*r00);
IkReal x2386=(cj3*sj5);
IkReal x2387=(r21*sj5);
IkReal x2388=(cj1*cj2);
IkReal x2389=(cj5*sj3);
IkReal x2390=(sj3*sj5);
IkReal x2391=(r01*sj5);
IkReal x2392=(cj3*cj5);
IkReal x2393=(cj5*r20);
IkReal x2394=((1.0)*x2378);
IkReal x2395=((1.0)*x2377);
IkReal x2396=(cj3*x2378);
IkReal x2397=(sj3*x2378);
IkReal x2398=(cj3*x2377);
IkReal x2399=(x2380+x2379);
evalcond[0]=((((-1.0)*r22*x2394))+(((-1.0)*x2393*x2395))+((x2377*x2387)));
evalcond[1]=((((-1.0)*x2382*x2395))+((x2377*x2381))+(((-1.0)*r12*x2394)));
evalcond[2]=((1.0)+((x2377*x2391))+(((-1.0)*x2385*x2395))+(((-1.0)*r02*x2394)));
evalcond[3]=(((r00*x2390))+((r02*x2398))+((sj3*x2384))+((r01*x2378*x2386))+(((-1.0)*cj3*x2385*x2394)));
evalcond[4]=(((x2385*x2397))+((r00*x2386))+(((-1.0)*r02*sj3*x2395))+(((-1.0)*r01*x2390*x2394))+((cj3*x2384)));
evalcond[5]=(x2399+(((-1.0)*r20*x2392*x2394))+((r20*x2390))+((r21*x2378*x2386))+((r22*x2398))+((r21*x2389)));
evalcond[6]=((((-1.0)*sj3*x2381*x2394))+x2399+((x2382*x2397))+(((-1.0)*r12*sj3*x2395))+((r10*x2386))+((r11*x2392)));
evalcond[7]=(((r12*x2398))+((x2381*x2396))+x2388+(((-1.0)*cj3*x2382*x2394))+(((-1.0)*x2383))+((r10*x2390))+((r11*x2389)));
evalcond[8]=(x2383+(((-1.0)*r22*sj3*x2395))+((r20*x2378*x2389))+((r20*x2386))+(((-1.0)*x2388))+(((-1.0)*sj3*x2387*x2394))+((r21*x2392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2400=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2400;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2400);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2401=((1.0)*cj5);
IkReal x2402=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2401)));
j4eval[0]=x2402;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2401))))));
j4eval[2]=IKsign(x2402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2403=cj5*cj5;
IkReal x2404=(cj3*r01);
IkReal x2405=(cj5*sj5);
IkReal x2406=((1.0)*cj3);
IkReal x2407=((((-1.0)*r00*r20*x2403*x2406))+(((-1.0)*r02*r22*x2406))+(((-1.0)*r21*x2404))+((r20*x2404*x2405))+((r21*x2403*x2404))+((cj3*r00*r21*x2405)));
j4eval[0]=x2407;
j4eval[1]=IKsign(x2407);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2408=cj5*cj5;
IkReal x2409=(cj3*r20);
IkReal x2410=(r21*sj3);
IkReal x2411=((1.0)*cj3);
IkReal x2412=(r01*r21);
IkReal x2413=(r01*sj3);
IkReal x2414=(r00*sj5);
IkReal x2415=(cj5*r01*sj5);
IkReal x2416=((1.0)*x2408);
CheckValue<IkReal> x2417=IKPowWithIntegerCheck(IKsign((((cj3*x2408*x2412))+(((-1.0)*r02*r22*x2411))+((x2409*x2415))+(((-1.0)*x2411*x2412))+(((-1.0)*r00*x2409*x2416))+((cj3*cj5*r21*x2414)))),-1);
if(!x2417.valid){
continue;
}
CheckValue<IkReal> x2418 = IKatan2WithCheck(IkReal((((cj5*r22*x2413))+((r22*sj3*x2414)))),IkReal(((((-1.0)*r00*x2410*x2416))+(((-1.0)*cj5*r20*sj3*x2414))+((x2410*x2415))+((r00*x2410))+(((-1.0)*r20*x2413*x2416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2417.value)))+(x2418.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2419=IKsin(j4);
IkReal x2420=IKcos(j4);
IkReal x2421=(sj1*sj2);
IkReal x2422=(r11*sj5);
IkReal x2423=(cj5*r10);
IkReal x2424=(cj5*r01);
IkReal x2425=(cj5*r00);
IkReal x2426=((1.0)*cj1);
IkReal x2427=(cj3*sj5);
IkReal x2428=(r21*sj5);
IkReal x2429=(cj5*sj3);
IkReal x2430=(sj3*sj5);
IkReal x2431=(cj2*sj1);
IkReal x2432=(r01*sj5);
IkReal x2433=(cj3*cj5);
IkReal x2434=(cj5*r20);
IkReal x2435=(cj2*x2426);
IkReal x2436=((1.0)*x2420);
IkReal x2437=((1.0)*x2419);
IkReal x2438=(cj3*x2420);
IkReal x2439=(sj3*x2420);
IkReal x2440=(cj3*x2419);
evalcond[0]=((((-1.0)*r22*x2436))+(((-1.0)*x2434*x2437))+((x2419*x2428)));
evalcond[1]=((((-1.0)*x2423*x2437))+((x2419*x2422))+(((-1.0)*r12*x2436)));
evalcond[2]=((-1.0)+(((-1.0)*x2425*x2437))+((x2419*x2432))+(((-1.0)*r02*x2436)));
evalcond[3]=(((r02*x2440))+((r00*x2430))+((r01*x2420*x2427))+((sj3*x2424))+(((-1.0)*cj3*x2425*x2436)));
evalcond[4]=(((x2425*x2439))+((r00*x2427))+(((-1.0)*r01*x2430*x2436))+((cj3*x2424))+(((-1.0)*r02*sj3*x2437)));
evalcond[5]=(x2431+((r21*x2429))+((r22*x2440))+((r20*x2430))+((cj1*sj2))+((r21*x2420*x2427))+(((-1.0)*r20*x2433*x2436)));
evalcond[6]=(x2421+(((-1.0)*x2435))+((r11*x2429))+(((-1.0)*cj3*x2423*x2436))+((r12*x2440))+((x2422*x2438))+((r10*x2430)));
evalcond[7]=(x2421+((r20*x2420*x2429))+(((-1.0)*x2435))+((r21*x2433))+((r20*x2427))+(((-1.0)*r22*sj3*x2437))+(((-1.0)*sj3*x2428*x2436)));
evalcond[8]=((((-1.0)*x2431))+((r11*x2433))+(((-1.0)*r12*sj3*x2437))+(((-1.0)*sj3*x2422*x2436))+((r10*x2427))+((x2423*x2439))+(((-1.0)*sj2*x2426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2441=((1.0)*cj5);
CheckValue<IkReal> x2442=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2441)))),-1);
if(!x2442.valid){
continue;
}
CheckValue<IkReal> x2443 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2441))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2442.value)))+(x2443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2444=IKsin(j4);
IkReal x2445=IKcos(j4);
IkReal x2446=(sj1*sj2);
IkReal x2447=(r11*sj5);
IkReal x2448=(cj5*r10);
IkReal x2449=(cj5*r01);
IkReal x2450=(cj5*r00);
IkReal x2451=((1.0)*cj1);
IkReal x2452=(cj3*sj5);
IkReal x2453=(r21*sj5);
IkReal x2454=(cj5*sj3);
IkReal x2455=(sj3*sj5);
IkReal x2456=(cj2*sj1);
IkReal x2457=(r01*sj5);
IkReal x2458=(cj3*cj5);
IkReal x2459=(cj5*r20);
IkReal x2460=(cj2*x2451);
IkReal x2461=((1.0)*x2445);
IkReal x2462=((1.0)*x2444);
IkReal x2463=(cj3*x2445);
IkReal x2464=(sj3*x2445);
IkReal x2465=(cj3*x2444);
evalcond[0]=((((-1.0)*r22*x2461))+((x2444*x2453))+(((-1.0)*x2459*x2462)));
evalcond[1]=((((-1.0)*x2448*x2462))+(((-1.0)*r12*x2461))+((x2444*x2447)));
evalcond[2]=((-1.0)+((x2444*x2457))+(((-1.0)*r02*x2461))+(((-1.0)*x2450*x2462)));
evalcond[3]=(((sj3*x2449))+(((-1.0)*cj3*x2450*x2461))+((r00*x2455))+((r02*x2465))+((r01*x2445*x2452)));
evalcond[4]=(((x2450*x2464))+(((-1.0)*r01*x2455*x2461))+((r00*x2452))+(((-1.0)*r02*sj3*x2462))+((cj3*x2449)));
evalcond[5]=(((r21*x2445*x2452))+x2456+((cj1*sj2))+((r22*x2465))+((r20*x2455))+((r21*x2454))+(((-1.0)*r20*x2458*x2461)));
evalcond[6]=(x2446+((r10*x2455))+((r12*x2465))+(((-1.0)*x2460))+((r11*x2454))+((x2447*x2463))+(((-1.0)*cj3*x2448*x2461)));
evalcond[7]=(x2446+(((-1.0)*sj3*x2453*x2461))+(((-1.0)*r22*sj3*x2462))+(((-1.0)*x2460))+((r20*x2452))+((r20*x2445*x2454))+((r21*x2458)));
evalcond[8]=(((r10*x2452))+((x2448*x2464))+(((-1.0)*x2456))+(((-1.0)*sj3*x2447*x2461))+((r11*x2458))+(((-1.0)*r12*sj3*x2462))+(((-1.0)*sj2*x2451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2466=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2466.valid){
continue;
}
CheckValue<IkReal> x2467 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2466.value)))+(x2467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2468=IKsin(j4);
IkReal x2469=IKcos(j4);
IkReal x2470=(sj1*sj2);
IkReal x2471=(r11*sj5);
IkReal x2472=(cj5*r10);
IkReal x2473=(cj5*r01);
IkReal x2474=(cj5*r00);
IkReal x2475=((1.0)*cj1);
IkReal x2476=(cj3*sj5);
IkReal x2477=(r21*sj5);
IkReal x2478=(cj5*sj3);
IkReal x2479=(sj3*sj5);
IkReal x2480=(cj2*sj1);
IkReal x2481=(r01*sj5);
IkReal x2482=(cj3*cj5);
IkReal x2483=(cj5*r20);
IkReal x2484=(cj2*x2475);
IkReal x2485=((1.0)*x2469);
IkReal x2486=((1.0)*x2468);
IkReal x2487=(cj3*x2469);
IkReal x2488=(sj3*x2469);
IkReal x2489=(cj3*x2468);
evalcond[0]=((((-1.0)*r22*x2485))+((x2468*x2477))+(((-1.0)*x2483*x2486)));
evalcond[1]=(((x2468*x2471))+(((-1.0)*x2472*x2486))+(((-1.0)*r12*x2485)));
evalcond[2]=((-1.0)+((x2468*x2481))+(((-1.0)*r02*x2485))+(((-1.0)*x2474*x2486)));
evalcond[3]=(((r02*x2489))+((r00*x2479))+((r01*x2469*x2476))+(((-1.0)*cj3*x2474*x2485))+((sj3*x2473)));
evalcond[4]=(((cj3*x2473))+(((-1.0)*r02*sj3*x2486))+(((-1.0)*r01*x2479*x2485))+((x2474*x2488))+((r00*x2476)));
evalcond[5]=(x2480+((r22*x2489))+((cj1*sj2))+((r21*x2478))+((r20*x2479))+(((-1.0)*r20*x2482*x2485))+((r21*x2469*x2476)));
evalcond[6]=(x2470+((r10*x2479))+(((-1.0)*x2484))+((r12*x2489))+(((-1.0)*cj3*x2472*x2485))+((x2471*x2487))+((r11*x2478)));
evalcond[7]=((((-1.0)*sj3*x2477*x2485))+x2470+(((-1.0)*x2484))+((r20*x2469*x2478))+((r20*x2476))+(((-1.0)*r22*sj3*x2486))+((r21*x2482)));
evalcond[8]=((((-1.0)*r12*sj3*x2486))+(((-1.0)*x2480))+(((-1.0)*sj3*x2471*x2485))+((r10*x2476))+((x2472*x2488))+((r11*x2482))+(((-1.0)*sj2*x2475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2491 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2491)==0){
continue;
}
IkReal x2490=pow(x2491,-0.5);
CheckValue<IkReal> x2492 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2492.valid){
continue;
}
IkReal gconst12=((-1.0)*(x2492.value));
IkReal gconst13=((-1.0)*r11*x2490);
IkReal gconst14=(r10*x2490);
CheckValue<IkReal> x2493 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2493.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2493.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2496 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2496.valid){
continue;
}
IkReal x2494=((-1.0)*(x2496.value));
IkReal x2495=x2490;
sj5=gconst13;
cj5=gconst14;
j5=x2494;
IkReal gconst12=x2494;
IkReal gconst13=((-1.0)*r11*x2495);
IkReal gconst14=(r10*x2495);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2497=((1.0)*gconst14);
CheckValue<IkReal> x2498=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2497))+(((-1.0)*gconst13*r20)))),-1);
if(!x2498.valid){
continue;
}
CheckValue<IkReal> x2499 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2497))+((cj0*gconst13*r01))+(((-1.0)*cj0*r00*x2497))+((gconst13*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2498.value)))+(x2499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2500=IKsin(j4);
IkReal x2501=IKcos(j4);
IkReal x2502=((1.0)*r22);
IkReal x2503=((1.0)*r12);
IkReal x2504=(cj2*sj0);
IkReal x2505=(gconst13*sj3);
IkReal x2506=(gconst13*r01);
IkReal x2507=(sj1*sj2);
IkReal x2508=(gconst14*sj3);
IkReal x2509=(cj1*cj2);
IkReal x2510=((1.0)*gconst14);
IkReal x2511=(cj3*gconst13);
IkReal x2512=(cj3*gconst14);
IkReal x2513=(cj2*sj1);
IkReal x2514=((1.0)*r02);
IkReal x2515=(cj1*sj2);
IkReal x2516=((1.0)*cj0);
IkReal x2517=(sj3*x2500);
IkReal x2518=(cj3*x2501);
IkReal x2519=(cj3*x2500);
IkReal x2520=(gconst13*x2500);
IkReal x2521=((1.0)*x2501);
evalcond[0]=((((-1.0)*r20*x2500*x2510))+(((-1.0)*x2501*x2502))+((r21*x2520)));
evalcond[1]=(sj0+(((-1.0)*r00*x2500*x2510))+((x2500*x2506))+(((-1.0)*x2501*x2514)));
evalcond[2]=((((-1.0)*x2516))+((r11*x2520))+(((-1.0)*x2501*x2503))+(((-1.0)*r10*x2500*x2510)));
evalcond[3]=(x2515+x2513+((r22*x2519))+((r21*x2501*x2511))+((r21*x2508))+((r20*x2505))+(((-1.0)*r20*x2510*x2518)));
evalcond[4]=((((-1.0)*r21*x2505*x2521))+x2507+(((-1.0)*x2502*x2517))+((r20*x2501*x2508))+((r21*x2512))+(((-1.0)*x2509))+((r20*x2511)));
evalcond[5]=(((cj0*x2515))+((cj0*x2513))+((r00*x2501*x2508))+(((-1.0)*x2514*x2517))+((r01*x2512))+(((-1.0)*r01*x2505*x2521))+((r00*x2511)));
evalcond[6]=(((r02*x2519))+((cj0*x2509))+((x2506*x2518))+((r00*x2505))+(((-1.0)*r00*x2510*x2518))+(((-1.0)*x2507*x2516))+((r01*x2508)));
evalcond[7]=(((r11*x2512))+((r10*x2511))+((r10*x2501*x2508))+(((-1.0)*x2503*x2517))+((sj0*x2515))+((sj1*x2504))+(((-1.0)*r11*x2505*x2521)));
evalcond[8]=((((-1.0)*r10*x2510*x2518))+((r10*x2505))+((cj1*x2504))+((r11*x2501*x2511))+((r11*x2508))+((r12*x2519))+(((-1.0)*sj0*x2507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2522 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2522.valid){
continue;
}
CheckValue<IkReal> x2523=IKPowWithIntegerCheck(IKsign((((gconst14*r01))+((gconst13*r00)))),-1);
if(!x2523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2522.value)+(((1.5707963267949)*(x2523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2524=IKsin(j4);
IkReal x2525=IKcos(j4);
IkReal x2526=((1.0)*r22);
IkReal x2527=((1.0)*r12);
IkReal x2528=(cj2*sj0);
IkReal x2529=(gconst13*sj3);
IkReal x2530=(gconst13*r01);
IkReal x2531=(sj1*sj2);
IkReal x2532=(gconst14*sj3);
IkReal x2533=(cj1*cj2);
IkReal x2534=((1.0)*gconst14);
IkReal x2535=(cj3*gconst13);
IkReal x2536=(cj3*gconst14);
IkReal x2537=(cj2*sj1);
IkReal x2538=((1.0)*r02);
IkReal x2539=(cj1*sj2);
IkReal x2540=((1.0)*cj0);
IkReal x2541=(sj3*x2524);
IkReal x2542=(cj3*x2525);
IkReal x2543=(cj3*x2524);
IkReal x2544=(gconst13*x2524);
IkReal x2545=((1.0)*x2525);
evalcond[0]=(((r21*x2544))+(((-1.0)*x2525*x2526))+(((-1.0)*r20*x2524*x2534)));
evalcond[1]=(sj0+(((-1.0)*x2525*x2538))+(((-1.0)*r00*x2524*x2534))+((x2524*x2530)));
evalcond[2]=(((r11*x2544))+(((-1.0)*r10*x2524*x2534))+(((-1.0)*x2540))+(((-1.0)*x2525*x2527)));
evalcond[3]=((((-1.0)*r20*x2534*x2542))+x2539+x2537+((r21*x2525*x2535))+((r21*x2532))+((r20*x2529))+((r22*x2543)));
evalcond[4]=(x2531+(((-1.0)*r21*x2529*x2545))+((r20*x2535))+((r21*x2536))+(((-1.0)*x2526*x2541))+(((-1.0)*x2533))+((r20*x2525*x2532)));
evalcond[5]=(((r01*x2536))+((cj0*x2537))+((cj0*x2539))+(((-1.0)*r01*x2529*x2545))+(((-1.0)*x2538*x2541))+((r00*x2525*x2532))+((r00*x2535)));
evalcond[6]=((((-1.0)*x2531*x2540))+((r01*x2532))+((cj0*x2533))+(((-1.0)*r00*x2534*x2542))+((x2530*x2542))+((r00*x2529))+((r02*x2543)));
evalcond[7]=(((sj0*x2539))+(((-1.0)*x2527*x2541))+((r10*x2535))+(((-1.0)*r11*x2529*x2545))+((sj1*x2528))+((r11*x2536))+((r10*x2525*x2532)));
evalcond[8]=(((cj1*x2528))+((r11*x2525*x2535))+((r12*x2543))+(((-1.0)*r10*x2534*x2542))+(((-1.0)*sj0*x2531))+((r11*x2532))+((r10*x2529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2547 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2547)==0){
continue;
}
IkReal x2546=pow(x2547,-0.5);
CheckValue<IkReal> x2548 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2548.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x2548.value))));
IkReal gconst16=((1.0)*r11*x2546);
IkReal gconst17=((-1.0)*r10*x2546);
CheckValue<IkReal> x2549 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2549.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2549.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2552 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2552.valid){
continue;
}
IkReal x2550=((1.0)*(x2552.value));
IkReal x2551=x2546;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2550)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2550)));
IkReal gconst16=((1.0)*r11*x2551);
IkReal gconst17=((-1.0)*r10*x2551);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2555 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2555.valid){
continue;
}
IkReal x2553=((1.0)*(x2555.value));
IkReal x2554=x2546;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2553)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2553)));
IkReal gconst16=((1.0)*r11*x2554);
IkReal gconst17=((-1.0)*r10*x2554);
IkReal x2556=r12*r12;
IkReal x2557=(cj0*r02);
IkReal x2558=x2546;
IkReal x2559=(sj0*x2558);
j4eval[0]=((IKabs((((r12*x2557*x2558))+(((-1.0)*x2559))+((x2556*x2559)))))+(IKabs((x2557+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2562 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2562.valid){
continue;
}
IkReal x2560=((1.0)*(x2562.value));
IkReal x2561=x2546;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2560)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2560)));
IkReal gconst16=((1.0)*r11*x2561);
IkReal gconst17=((-1.0)*r10*x2561);
IkReal x2563=((1.0)*cj3);
CheckValue<IkReal> x2568=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x2568.valid){
continue;
}
IkReal x2564=x2568.value;
IkReal x2565=(cj3*x2564);
IkReal x2566=(x2563*x2564);
IkReal x2567=((((-1.0)*x2566*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x2565))+(((-1.0)*x2566*(r10*r10)*(r20*r20)))+(((-1.0)*x2563*(r22*r22))));
j4eval[0]=x2567;
j4eval[1]=IKsign(x2567);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2569=r21*r21;
IkReal x2570=gconst16*gconst16;
IkReal x2571=r20*r20;
IkReal x2572=gconst17*gconst17;
IkReal x2573=(gconst16*r21);
IkReal x2574=(cj1*sj2);
IkReal x2575=(cj2*sj1);
IkReal x2576=(gconst17*r20);
IkReal x2577=(gconst16*sj3);
IkReal x2578=(r21*sj3);
IkReal x2579=((1.0)*cj3);
CheckValue<IkReal> x2580=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2569*x2570*x2579))+(((-1.0)*x2571*x2572*x2579))+(((-1.0)*x2579*(r22*r22)))+(((2.0)*cj3*x2573*x2576)))),-1);
if(!x2580.valid){
continue;
}
CheckValue<IkReal> x2581 = IKatan2WithCheck(IkReal((((gconst17*r22*x2578))+((r20*r22*x2577))+((r22*x2574))+((r22*x2575)))),IkReal(((((-1.0)*r20*x2572*x2578))+((x2573*x2575))+((x2573*x2574))+(((-1.0)*gconst17*x2571*x2577))+(((-1.0)*x2575*x2576))+((gconst17*x2569*x2577))+(((-1.0)*x2574*x2576))+((r20*x2570*x2578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2580.value)))+(x2581.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2582=IKsin(j4);
IkReal x2583=IKcos(j4);
IkReal x2584=(cj3*gconst17);
IkReal x2585=(gconst16*r21);
IkReal x2586=(gconst17*sj3);
IkReal x2587=(gconst16*r20);
IkReal x2588=(sj1*sj2);
IkReal x2589=(cj1*cj2);
IkReal x2590=(gconst16*r10);
IkReal x2591=(cj2*sj1);
IkReal x2592=(gconst16*sj3);
IkReal x2593=(cj1*sj2);
IkReal x2594=((1.0)*cj0);
IkReal x2595=((1.0)*x2583);
IkReal x2596=(gconst16*x2582);
IkReal x2597=(cj3*x2583);
IkReal x2598=(cj3*x2582);
IkReal x2599=((1.0)*gconst17*x2582);
IkReal x2600=((1.0)*sj3*x2582);
evalcond[0]=((((-1.0)*r22*x2595))+(((-1.0)*r20*x2599))+((x2582*x2585)));
evalcond[1]=((((-1.0)*r00*x2599))+sj0+((r01*x2596))+(((-1.0)*r02*x2595)));
evalcond[2]=((((-1.0)*x2594))+((r11*x2596))+(((-1.0)*r12*x2595))+(((-1.0)*r10*x2599)));
evalcond[3]=(((r22*x2598))+x2591+x2593+((sj3*x2587))+(((-1.0)*r20*x2584*x2595))+((x2585*x2597))+((r21*x2586)));
evalcond[4]=(x2588+((cj3*x2587))+(((-1.0)*x2589))+(((-1.0)*r22*x2600))+(((-1.0)*sj3*x2585*x2595))+((r21*x2584))+((r20*x2583*x2586)));
evalcond[5]=(((r01*x2584))+((r00*x2583*x2586))+((cj0*x2593))+((cj0*x2591))+(((-1.0)*r02*x2600))+(((-1.0)*r01*x2592*x2595))+((cj3*gconst16*r00)));
evalcond[6]=(((r01*x2586))+((r00*x2592))+((cj0*x2589))+(((-1.0)*r00*x2584*x2595))+(((-1.0)*x2588*x2594))+((gconst16*r01*x2597))+((r02*x2598)));
evalcond[7]=(((cj3*x2590))+(((-1.0)*r11*x2592*x2595))+(((-1.0)*r12*x2600))+((r11*x2584))+((r10*x2583*x2586))+((sj0*x2593))+((sj0*x2591)));
evalcond[8]=(((sj3*x2590))+((gconst16*r11*x2597))+((r12*x2598))+(((-1.0)*sj0*x2588))+((r11*x2586))+(((-1.0)*r10*x2584*x2595))+((sj0*x2589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2601=((1.0)*gconst17);
CheckValue<IkReal> x2602 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*cj0*r00*x2601))+(((-1.0)*r10*sj0*x2601))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2602.valid){
continue;
}
CheckValue<IkReal> x2603=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x2601)))),-1);
if(!x2603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2602.value)+(((1.5707963267949)*(x2603.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2604=IKsin(j4);
IkReal x2605=IKcos(j4);
IkReal x2606=(cj3*gconst17);
IkReal x2607=(gconst16*r21);
IkReal x2608=(gconst17*sj3);
IkReal x2609=(gconst16*r20);
IkReal x2610=(sj1*sj2);
IkReal x2611=(cj1*cj2);
IkReal x2612=(gconst16*r10);
IkReal x2613=(cj2*sj1);
IkReal x2614=(gconst16*sj3);
IkReal x2615=(cj1*sj2);
IkReal x2616=((1.0)*cj0);
IkReal x2617=((1.0)*x2605);
IkReal x2618=(gconst16*x2604);
IkReal x2619=(cj3*x2605);
IkReal x2620=(cj3*x2604);
IkReal x2621=((1.0)*gconst17*x2604);
IkReal x2622=((1.0)*sj3*x2604);
evalcond[0]=((((-1.0)*r22*x2617))+((x2604*x2607))+(((-1.0)*r20*x2621)));
evalcond[1]=(((r01*x2618))+(((-1.0)*r00*x2621))+sj0+(((-1.0)*r02*x2617)));
evalcond[2]=((((-1.0)*r12*x2617))+(((-1.0)*r10*x2621))+((r11*x2618))+(((-1.0)*x2616)));
evalcond[3]=((((-1.0)*r20*x2606*x2617))+((sj3*x2609))+((r21*x2608))+((r22*x2620))+x2615+x2613+((x2607*x2619)));
evalcond[4]=((((-1.0)*x2611))+(((-1.0)*sj3*x2607*x2617))+(((-1.0)*r22*x2622))+((cj3*x2609))+((r21*x2606))+((r20*x2605*x2608))+x2610);
evalcond[5]=(((r00*x2605*x2608))+(((-1.0)*r02*x2622))+(((-1.0)*r01*x2614*x2617))+((r01*x2606))+((cj3*gconst16*r00))+((cj0*x2615))+((cj0*x2613)));
evalcond[6]=(((r00*x2614))+(((-1.0)*x2610*x2616))+(((-1.0)*r00*x2606*x2617))+((r02*x2620))+((r01*x2608))+((cj0*x2611))+((gconst16*r01*x2619)));
evalcond[7]=((((-1.0)*r12*x2622))+((cj3*x2612))+(((-1.0)*r11*x2614*x2617))+((r10*x2605*x2608))+((sj0*x2615))+((sj0*x2613))+((r11*x2606)));
evalcond[8]=(((gconst16*r11*x2619))+(((-1.0)*r10*x2606*x2617))+((r12*x2620))+((sj0*x2611))+((r11*x2608))+(((-1.0)*sj0*x2610))+((sj3*x2612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2623=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x2623.valid){
continue;
}
CheckValue<IkReal> x2624 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2623.value)))+(x2624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2625=IKsin(j4);
IkReal x2626=IKcos(j4);
IkReal x2627=(cj3*gconst17);
IkReal x2628=(gconst16*r21);
IkReal x2629=(gconst17*sj3);
IkReal x2630=(gconst16*r20);
IkReal x2631=(sj1*sj2);
IkReal x2632=(cj1*cj2);
IkReal x2633=(gconst16*r10);
IkReal x2634=(cj2*sj1);
IkReal x2635=(gconst16*sj3);
IkReal x2636=(cj1*sj2);
IkReal x2637=((1.0)*cj0);
IkReal x2638=((1.0)*x2626);
IkReal x2639=(gconst16*x2625);
IkReal x2640=(cj3*x2626);
IkReal x2641=(cj3*x2625);
IkReal x2642=((1.0)*gconst17*x2625);
IkReal x2643=((1.0)*sj3*x2625);
evalcond[0]=((((-1.0)*r20*x2642))+((x2625*x2628))+(((-1.0)*r22*x2638)));
evalcond[1]=(sj0+(((-1.0)*r02*x2638))+(((-1.0)*r00*x2642))+((r01*x2639)));
evalcond[2]=(((r11*x2639))+(((-1.0)*x2637))+(((-1.0)*r12*x2638))+(((-1.0)*r10*x2642)));
evalcond[3]=((((-1.0)*r20*x2627*x2638))+((x2628*x2640))+((sj3*x2630))+((r22*x2641))+((r21*x2629))+x2634+x2636);
evalcond[4]=(((cj3*x2630))+(((-1.0)*r22*x2643))+(((-1.0)*sj3*x2628*x2638))+(((-1.0)*x2632))+((r20*x2626*x2629))+((r21*x2627))+x2631);
evalcond[5]=(((r01*x2627))+((r00*x2626*x2629))+(((-1.0)*r02*x2643))+((cj0*x2634))+((cj0*x2636))+(((-1.0)*r01*x2635*x2638))+((cj3*gconst16*r00)));
evalcond[6]=(((r01*x2629))+((cj0*x2632))+((r02*x2641))+((r00*x2635))+((gconst16*r01*x2640))+(((-1.0)*x2631*x2637))+(((-1.0)*r00*x2627*x2638)));
evalcond[7]=(((cj3*x2633))+(((-1.0)*r12*x2643))+(((-1.0)*r11*x2635*x2638))+((sj0*x2634))+((sj0*x2636))+((r11*x2627))+((r10*x2626*x2629)));
evalcond[8]=(((r12*x2641))+((sj0*x2632))+(((-1.0)*sj0*x2631))+((sj3*x2633))+(((-1.0)*r10*x2627*x2638))+((r11*x2629))+((gconst16*r11*x2640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2644=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2644;
j4eval[1]=IKsign(x2644);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2645=((1.0)*cj5);
IkReal x2646=((((-1.0)*r21*x2645))+(((-1.0)*r20*sj5)));
j4eval[0]=x2646;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2645))))));
j4eval[2]=IKsign(x2646);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2647=cj5*cj5;
IkReal x2648=(cj3*r21);
IkReal x2649=(cj5*sj5);
IkReal x2650=((1.0)*cj3);
IkReal x2651=((((-1.0)*r10*r20*x2647*x2650))+(((-1.0)*r12*r22*x2650))+((r10*x2648*x2649))+((cj3*r11*r20*x2649))+((r11*x2647*x2648))+(((-1.0)*r11*x2648)));
j4eval[0]=x2651;
j4eval[1]=IKsign(x2651);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2652=cj5*cj5;
IkReal x2653=((1.0)*cj3);
IkReal x2654=(r10*r21);
IkReal x2655=(cj5*sj5);
IkReal x2656=(r11*r21);
IkReal x2657=(r11*r20);
IkReal x2658=(r22*sj3);
IkReal x2659=(r10*r20);
IkReal x2660=((1.0)*sj3*x2652);
CheckValue<IkReal> x2661=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2652*x2653*x2659))+((cj3*x2655*x2657))+(((-1.0)*r12*r22*x2653))+((cj3*x2654*x2655))+((cj3*x2652*x2656))+(((-1.0)*x2653*x2656)))),-1);
if(!x2661.valid){
continue;
}
CheckValue<IkReal> x2662 = IKatan2WithCheck(IkReal((((cj5*r11*x2658))+((r10*sj5*x2658)))),IkReal((((sj3*x2655*x2656))+(((-1.0)*x2657*x2660))+(((-1.0)*sj3*x2655*x2659))+((sj3*x2654))+(((-1.0)*x2654*x2660)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2661.value)))+(x2662.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2663=IKsin(j4);
IkReal x2664=IKcos(j4);
IkReal x2665=(cj2*sj1);
IkReal x2666=(cj1*sj2);
IkReal x2667=(cj5*sj3);
IkReal x2668=(cj5*r10);
IkReal x2669=(r00*sj5);
IkReal x2670=(sj1*sj2);
IkReal x2671=(r11*sj5);
IkReal x2672=(cj3*cj5);
IkReal x2673=(cj3*sj5);
IkReal x2674=(r21*sj5);
IkReal x2675=(cj1*cj2);
IkReal x2676=(sj3*sj5);
IkReal x2677=(r01*sj5);
IkReal x2678=((1.0)*x2664);
IkReal x2679=((1.0)*x2663);
IkReal x2680=(cj3*x2663);
IkReal x2681=(cj3*x2664);
IkReal x2682=(x2666+x2665);
evalcond[0]=(((x2663*x2674))+(((-1.0)*cj5*r20*x2679))+(((-1.0)*r22*x2678)));
evalcond[1]=(((x2663*x2677))+(((-1.0)*r02*x2678))+(((-1.0)*cj5*r00*x2679)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2678))+((x2663*x2671))+(((-1.0)*x2668*x2679)));
evalcond[3]=(((x2671*x2681))+((r10*x2676))+((r12*x2680))+(((-1.0)*cj3*x2668*x2678))+((r11*x2667)));
evalcond[4]=((((-1.0)*r12*sj3*x2679))+((r10*x2664*x2667))+(((-1.0)*sj3*x2671*x2678))+((r10*x2673))+((r11*x2672)));
evalcond[5]=(((r21*x2664*x2673))+((r21*x2667))+((r22*x2680))+(((-1.0)*r20*x2672*x2678))+((r20*x2676))+x2682);
evalcond[6]=(((r00*x2664*x2667))+((cj3*x2669))+((r01*x2672))+(((-1.0)*r01*x2676*x2678))+x2682+(((-1.0)*r02*sj3*x2679)));
evalcond[7]=(((r02*x2680))+(((-1.0)*x2670))+((sj3*x2669))+((r01*x2667))+(((-1.0)*r00*x2672*x2678))+((r01*x2664*x2673))+x2675);
evalcond[8]=((((-1.0)*x2675))+(((-1.0)*sj3*x2674*x2678))+((r21*x2672))+(((-1.0)*r22*sj3*x2679))+((r20*x2673))+((r20*x2664*x2667))+x2670);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2683=((1.0)*cj5);
CheckValue<IkReal> x2684=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2683))+(((-1.0)*r20*sj5)))),-1);
if(!x2684.valid){
continue;
}
CheckValue<IkReal> x2685 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2684.value)))+(x2685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2686=IKsin(j4);
IkReal x2687=IKcos(j4);
IkReal x2688=(cj2*sj1);
IkReal x2689=(cj1*sj2);
IkReal x2690=(cj5*sj3);
IkReal x2691=(cj5*r10);
IkReal x2692=(r00*sj5);
IkReal x2693=(sj1*sj2);
IkReal x2694=(r11*sj5);
IkReal x2695=(cj3*cj5);
IkReal x2696=(cj3*sj5);
IkReal x2697=(r21*sj5);
IkReal x2698=(cj1*cj2);
IkReal x2699=(sj3*sj5);
IkReal x2700=(r01*sj5);
IkReal x2701=((1.0)*x2687);
IkReal x2702=((1.0)*x2686);
IkReal x2703=(cj3*x2686);
IkReal x2704=(cj3*x2687);
IkReal x2705=(x2688+x2689);
evalcond[0]=((((-1.0)*r22*x2701))+(((-1.0)*cj5*r20*x2702))+((x2686*x2697)));
evalcond[1]=((((-1.0)*r02*x2701))+((x2686*x2700))+(((-1.0)*cj5*r00*x2702)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2701))+((x2686*x2694))+(((-1.0)*x2691*x2702)));
evalcond[3]=(((r12*x2703))+((x2694*x2704))+((r10*x2699))+(((-1.0)*cj3*x2691*x2701))+((r11*x2690)));
evalcond[4]=(((r10*x2696))+(((-1.0)*r12*sj3*x2702))+(((-1.0)*sj3*x2694*x2701))+((r10*x2687*x2690))+((r11*x2695)));
evalcond[5]=(((r21*x2687*x2696))+x2705+((r22*x2703))+(((-1.0)*r20*x2695*x2701))+((r21*x2690))+((r20*x2699)));
evalcond[6]=(x2705+((r00*x2687*x2690))+((r01*x2695))+(((-1.0)*r02*sj3*x2702))+((cj3*x2692))+(((-1.0)*r01*x2699*x2701)));
evalcond[7]=(((r01*x2687*x2696))+((r01*x2690))+((sj3*x2692))+(((-1.0)*r00*x2695*x2701))+(((-1.0)*x2693))+((r02*x2703))+x2698);
evalcond[8]=((((-1.0)*sj3*x2697*x2701))+(((-1.0)*r22*sj3*x2702))+((r21*x2695))+(((-1.0)*x2698))+((r20*x2696))+((r20*x2687*x2690))+x2693);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2706 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2706.valid){
continue;
}
CheckValue<IkReal> x2707=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2706.value)+(((1.5707963267949)*(x2707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2708=IKsin(j4);
IkReal x2709=IKcos(j4);
IkReal x2710=(cj2*sj1);
IkReal x2711=(cj1*sj2);
IkReal x2712=(cj5*sj3);
IkReal x2713=(cj5*r10);
IkReal x2714=(r00*sj5);
IkReal x2715=(sj1*sj2);
IkReal x2716=(r11*sj5);
IkReal x2717=(cj3*cj5);
IkReal x2718=(cj3*sj5);
IkReal x2719=(r21*sj5);
IkReal x2720=(cj1*cj2);
IkReal x2721=(sj3*sj5);
IkReal x2722=(r01*sj5);
IkReal x2723=((1.0)*x2709);
IkReal x2724=((1.0)*x2708);
IkReal x2725=(cj3*x2708);
IkReal x2726=(cj3*x2709);
IkReal x2727=(x2710+x2711);
evalcond[0]=(((x2708*x2719))+(((-1.0)*r22*x2723))+(((-1.0)*cj5*r20*x2724)));
evalcond[1]=((((-1.0)*cj5*r00*x2724))+((x2708*x2722))+(((-1.0)*r02*x2723)));
evalcond[2]=((-1.0)+((x2708*x2716))+(((-1.0)*x2713*x2724))+(((-1.0)*r12*x2723)));
evalcond[3]=((((-1.0)*cj3*x2713*x2723))+((x2716*x2726))+((r10*x2721))+((r11*x2712))+((r12*x2725)));
evalcond[4]=((((-1.0)*sj3*x2716*x2723))+((r10*x2718))+((r10*x2709*x2712))+((r11*x2717))+(((-1.0)*r12*sj3*x2724)));
evalcond[5]=(x2727+((r22*x2725))+((r20*x2721))+((r21*x2709*x2718))+(((-1.0)*r20*x2717*x2723))+((r21*x2712)));
evalcond[6]=(x2727+((cj3*x2714))+(((-1.0)*r01*x2721*x2723))+(((-1.0)*r02*sj3*x2724))+((r00*x2709*x2712))+((r01*x2717)));
evalcond[7]=(x2720+((r02*x2725))+(((-1.0)*x2715))+(((-1.0)*r00*x2717*x2723))+((sj3*x2714))+((r01*x2709*x2718))+((r01*x2712)));
evalcond[8]=(x2715+(((-1.0)*r22*sj3*x2724))+(((-1.0)*x2720))+((r20*x2709*x2712))+(((-1.0)*sj3*x2719*x2723))+((r21*x2717))+((r20*x2718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2728=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2728;
j4eval[1]=IKsign(x2728);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2729=((1.0)*cj5);
IkReal x2730=((((-1.0)*r01*x2729))+(((-1.0)*r00*sj5)));
j4eval[0]=x2730;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2729))))));
j4eval[2]=IKsign(x2730);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2731=cj5*cj5;
IkReal x2732=(cj3*r21);
IkReal x2733=(cj5*sj5);
IkReal x2734=((1.0)*cj3);
IkReal x2735=((((-1.0)*r11*x2732))+(((-1.0)*r12*r22*x2734))+((r11*x2731*x2732))+((cj3*r11*r20*x2733))+((r10*x2732*x2733))+(((-1.0)*r10*r20*x2731*x2734)));
j4eval[0]=x2735;
j4eval[1]=IKsign(x2735);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2736=cj5*cj5;
IkReal x2737=((1.0)*cj3);
IkReal x2738=(r10*r21);
IkReal x2739=(cj5*sj5);
IkReal x2740=(r11*r21);
IkReal x2741=(r11*r20);
IkReal x2742=(r22*sj3);
IkReal x2743=(r10*r20);
IkReal x2744=((1.0)*sj3*x2736);
CheckValue<IkReal> x2745 = IKatan2WithCheck(IkReal((((cj5*r11*x2742))+((r10*sj5*x2742)))),IkReal((((sj3*x2739*x2740))+((sj3*x2738))+(((-1.0)*x2738*x2744))+(((-1.0)*x2741*x2744))+(((-1.0)*sj3*x2739*x2743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2745.valid){
continue;
}
CheckValue<IkReal> x2746=IKPowWithIntegerCheck(IKsign((((cj3*x2739*x2741))+(((-1.0)*r12*r22*x2737))+(((-1.0)*x2736*x2737*x2743))+(((-1.0)*x2737*x2740))+((cj3*x2736*x2740))+((cj3*x2738*x2739)))),-1);
if(!x2746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2745.value)+(((1.5707963267949)*(x2746.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2747=IKsin(j4);
IkReal x2748=IKcos(j4);
IkReal x2749=(sj1*sj2);
IkReal x2750=(cj5*sj3);
IkReal x2751=(cj5*r10);
IkReal x2752=(r00*sj5);
IkReal x2753=(r11*sj5);
IkReal x2754=(cj3*cj5);
IkReal x2755=((1.0)*cj1);
IkReal x2756=(cj3*sj5);
IkReal x2757=(r21*sj5);
IkReal x2758=(cj2*sj1);
IkReal x2759=(sj3*sj5);
IkReal x2760=(r01*sj5);
IkReal x2761=(cj2*x2755);
IkReal x2762=((1.0)*x2748);
IkReal x2763=((1.0)*x2747);
IkReal x2764=(cj3*x2747);
IkReal x2765=(cj3*x2748);
evalcond[0]=((((-1.0)*cj5*r20*x2763))+((x2747*x2757))+(((-1.0)*r22*x2762)));
evalcond[1]=((((-1.0)*r02*x2762))+((x2747*x2760))+(((-1.0)*cj5*r00*x2763)));
evalcond[2]=((1.0)+(((-1.0)*x2751*x2763))+(((-1.0)*r12*x2762))+((x2747*x2753)));
evalcond[3]=(((r11*x2750))+((r12*x2764))+((r10*x2759))+((x2753*x2765))+(((-1.0)*cj3*x2751*x2762)));
evalcond[4]=(((r11*x2754))+((r10*x2756))+(((-1.0)*sj3*x2753*x2762))+(((-1.0)*r12*sj3*x2763))+((r10*x2748*x2750)));
evalcond[5]=(x2758+(((-1.0)*r20*x2754*x2762))+((r21*x2748*x2756))+((r21*x2750))+((cj1*sj2))+((r20*x2759))+((r22*x2764)));
evalcond[6]=(x2749+((sj3*x2752))+(((-1.0)*x2761))+((r01*x2748*x2756))+((r01*x2750))+((r02*x2764))+(((-1.0)*r00*x2754*x2762)));
evalcond[7]=(x2749+((r20*x2748*x2750))+((r21*x2754))+(((-1.0)*sj3*x2757*x2762))+(((-1.0)*x2761))+((r20*x2756))+(((-1.0)*r22*sj3*x2763)));
evalcond[8]=((((-1.0)*r01*x2759*x2762))+((r00*x2748*x2750))+((cj3*x2752))+(((-1.0)*sj2*x2755))+((r01*x2754))+(((-1.0)*x2758))+(((-1.0)*r02*sj3*x2763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2766=((1.0)*cj5);
CheckValue<IkReal> x2767 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2767.valid){
continue;
}
CheckValue<IkReal> x2768=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2766)))),-1);
if(!x2768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2767.value)+(((1.5707963267949)*(x2768.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2769=IKsin(j4);
IkReal x2770=IKcos(j4);
IkReal x2771=(sj1*sj2);
IkReal x2772=(cj5*sj3);
IkReal x2773=(cj5*r10);
IkReal x2774=(r00*sj5);
IkReal x2775=(r11*sj5);
IkReal x2776=(cj3*cj5);
IkReal x2777=((1.0)*cj1);
IkReal x2778=(cj3*sj5);
IkReal x2779=(r21*sj5);
IkReal x2780=(cj2*sj1);
IkReal x2781=(sj3*sj5);
IkReal x2782=(r01*sj5);
IkReal x2783=(cj2*x2777);
IkReal x2784=((1.0)*x2770);
IkReal x2785=((1.0)*x2769);
IkReal x2786=(cj3*x2769);
IkReal x2787=(cj3*x2770);
evalcond[0]=(((x2769*x2779))+(((-1.0)*r22*x2784))+(((-1.0)*cj5*r20*x2785)));
evalcond[1]=(((x2769*x2782))+(((-1.0)*cj5*r00*x2785))+(((-1.0)*r02*x2784)));
evalcond[2]=((1.0)+(((-1.0)*r12*x2784))+((x2769*x2775))+(((-1.0)*x2773*x2785)));
evalcond[3]=(((r11*x2772))+(((-1.0)*cj3*x2773*x2784))+((r12*x2786))+((x2775*x2787))+((r10*x2781)));
evalcond[4]=(((r11*x2776))+((r10*x2778))+(((-1.0)*sj3*x2775*x2784))+(((-1.0)*r12*sj3*x2785))+((r10*x2770*x2772)));
evalcond[5]=(x2780+(((-1.0)*r20*x2776*x2784))+((r21*x2770*x2778))+((cj1*sj2))+((r21*x2772))+((r22*x2786))+((r20*x2781)));
evalcond[6]=((((-1.0)*x2783))+x2771+((r01*x2772))+((r02*x2786))+(((-1.0)*r00*x2776*x2784))+((r01*x2770*x2778))+((sj3*x2774)));
evalcond[7]=((((-1.0)*x2783))+x2771+((r20*x2770*x2772))+(((-1.0)*r22*sj3*x2785))+((r20*x2778))+((r21*x2776))+(((-1.0)*sj3*x2779*x2784)));
evalcond[8]=(((r01*x2776))+(((-1.0)*r02*sj3*x2785))+((r00*x2770*x2772))+(((-1.0)*x2780))+((cj3*x2774))+(((-1.0)*r01*x2781*x2784))+(((-1.0)*sj2*x2777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2788=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2788.valid){
continue;
}
CheckValue<IkReal> x2789 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2788.value)))+(x2789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2790=IKsin(j4);
IkReal x2791=IKcos(j4);
IkReal x2792=(sj1*sj2);
IkReal x2793=(cj5*sj3);
IkReal x2794=(cj5*r10);
IkReal x2795=(r00*sj5);
IkReal x2796=(r11*sj5);
IkReal x2797=(cj3*cj5);
IkReal x2798=((1.0)*cj1);
IkReal x2799=(cj3*sj5);
IkReal x2800=(r21*sj5);
IkReal x2801=(cj2*sj1);
IkReal x2802=(sj3*sj5);
IkReal x2803=(r01*sj5);
IkReal x2804=(cj2*x2798);
IkReal x2805=((1.0)*x2791);
IkReal x2806=((1.0)*x2790);
IkReal x2807=(cj3*x2790);
IkReal x2808=(cj3*x2791);
evalcond[0]=(((x2790*x2800))+(((-1.0)*cj5*r20*x2806))+(((-1.0)*r22*x2805)));
evalcond[1]=(((x2790*x2803))+(((-1.0)*cj5*r00*x2806))+(((-1.0)*r02*x2805)));
evalcond[2]=((1.0)+((x2790*x2796))+(((-1.0)*r12*x2805))+(((-1.0)*x2794*x2806)));
evalcond[3]=(((x2796*x2808))+(((-1.0)*cj3*x2794*x2805))+((r12*x2807))+((r10*x2802))+((r11*x2793)));
evalcond[4]=((((-1.0)*sj3*x2796*x2805))+((r11*x2797))+((r10*x2791*x2793))+(((-1.0)*r12*sj3*x2806))+((r10*x2799)));
evalcond[5]=(((r21*x2791*x2799))+((r21*x2793))+((cj1*sj2))+((r20*x2802))+(((-1.0)*r20*x2797*x2805))+x2801+((r22*x2807)));
evalcond[6]=(x2792+(((-1.0)*x2804))+((r02*x2807))+((sj3*x2795))+((r01*x2791*x2799))+((r01*x2793))+(((-1.0)*r00*x2797*x2805)));
evalcond[7]=(x2792+(((-1.0)*x2804))+((r21*x2797))+(((-1.0)*sj3*x2800*x2805))+((r20*x2791*x2793))+((r20*x2799))+(((-1.0)*r22*sj3*x2806)));
evalcond[8]=((((-1.0)*r01*x2802*x2805))+(((-1.0)*x2801))+((r00*x2791*x2793))+(((-1.0)*sj2*x2798))+((cj3*x2795))+((r01*x2797))+(((-1.0)*r02*sj3*x2806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x2809=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2809);
rxp0_2=(py*r00);
rxp1_0=(r21*x2809);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2810=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2810);
rxp0_2=(py*r00);
rxp1_0=(r21*x2810);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x2811=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x2811)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2811)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2812=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2812);
rxp0_2=(py*r00);
rxp1_0=(r21*x2812);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2814=IKPowWithIntegerCheck(r12,-1);
if(!x2814.valid){
continue;
}
IkReal x2813=x2814.value;
CheckValue<IkReal> x2815=IKPowWithIntegerCheck(sj3,-1);
if(!x2815.valid){
continue;
}
if( IKabs((x2813*(x2815.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x2813)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2813*(x2815.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x2813))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2813*(x2815.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x2813));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2816=IKsin(j4);
IkReal x2817=IKcos(j4);
IkReal x2818=(cj2*sj0);
IkReal x2819=(sj1*sj2);
IkReal x2820=(cj5*sj3);
IkReal x2821=(cj3*cj5);
IkReal x2822=(cj1*cj2);
IkReal x2823=(r21*sj5);
IkReal x2824=(r00*sj5);
IkReal x2825=(cj2*sj1);
IkReal x2826=(r01*sj5);
IkReal x2827=(r20*sj5);
IkReal x2828=(cj1*sj2);
IkReal x2829=((1.0)*cj0);
IkReal x2830=((1.0)*x2816);
IkReal x2831=(r20*x2817);
IkReal x2832=(r00*x2817);
IkReal x2833=(cj3*x2817);
IkReal x2834=((1.0)*x2817);
evalcond[0]=((((-1.0)*r12*x2834))+(((-1.0)*x2829)));
evalcond[1]=((((-1.0)*cj5*r20*x2830))+((x2816*x2823)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x2830))+((x2816*x2826)));
evalcond[3]=(((sj1*x2818))+((sj0*x2828))+(((-1.0)*r12*sj3*x2830)));
evalcond[4]=(((cj1*x2818))+((cj3*r12*x2816))+(((-1.0)*sj0*x2819)));
evalcond[5]=((((-1.0)*x2821*x2831))+((sj3*x2827))+((r21*x2820))+((x2823*x2833))+x2828+x2825);
evalcond[6]=(((cj3*x2827))+(((-1.0)*sj3*x2823*x2834))+(((-1.0)*x2822))+((r21*x2821))+((x2820*x2831))+x2819);
evalcond[7]=(((cj3*x2824))+((x2820*x2832))+((r01*x2821))+(((-1.0)*sj3*x2826*x2834))+((cj0*x2828))+((cj0*x2825)));
evalcond[8]=((((-1.0)*x2821*x2832))+((sj3*x2824))+((x2826*x2833))+((r01*x2820))+(((-1.0)*x2819*x2829))+((cj0*x2822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2835=((1.0)*sj3);
IkReal x2836=((1.0)*cj5);
CheckValue<IkReal> x2837=IKPowWithIntegerCheck(((((-1.0)*r00*x2836))+((r01*sj5))),-1);
if(!x2837.valid){
continue;
}
CheckValue<IkReal> x2838=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2836))),-1);
if(!x2838.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2837.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2838.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x2835))+(((-1.0)*cj5*r21*x2835)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2837.value)))+IKsqr(((x2838.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x2835))+(((-1.0)*cj5*r21*x2835))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2837.value)), ((x2838.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x2835))+(((-1.0)*cj5*r21*x2835))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2839=IKsin(j4);
IkReal x2840=IKcos(j4);
IkReal x2841=(cj2*sj0);
IkReal x2842=(sj1*sj2);
IkReal x2843=(cj5*sj3);
IkReal x2844=(cj3*cj5);
IkReal x2845=(cj1*cj2);
IkReal x2846=(r21*sj5);
IkReal x2847=(r00*sj5);
IkReal x2848=(cj2*sj1);
IkReal x2849=(r01*sj5);
IkReal x2850=(r20*sj5);
IkReal x2851=(cj1*sj2);
IkReal x2852=((1.0)*cj0);
IkReal x2853=((1.0)*x2839);
IkReal x2854=(r20*x2840);
IkReal x2855=(r00*x2840);
IkReal x2856=(cj3*x2840);
IkReal x2857=((1.0)*x2840);
evalcond[0]=((((-1.0)*r12*x2857))+(((-1.0)*x2852)));
evalcond[1]=((((-1.0)*cj5*r20*x2853))+((x2839*x2846)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x2853))+((x2839*x2849)));
evalcond[3]=(((sj0*x2851))+((sj1*x2841))+(((-1.0)*r12*sj3*x2853)));
evalcond[4]=((((-1.0)*sj0*x2842))+((cj3*r12*x2839))+((cj1*x2841)));
evalcond[5]=(((r21*x2843))+((sj3*x2850))+((x2846*x2856))+(((-1.0)*x2844*x2854))+x2848+x2851);
evalcond[6]=(((r21*x2844))+((cj3*x2850))+((x2843*x2854))+(((-1.0)*sj3*x2846*x2857))+(((-1.0)*x2845))+x2842);
evalcond[7]=(((cj3*x2847))+((x2843*x2855))+((cj0*x2851))+((cj0*x2848))+(((-1.0)*sj3*x2849*x2857))+((r01*x2844)));
evalcond[8]=((((-1.0)*x2842*x2852))+((x2849*x2856))+((sj3*x2847))+(((-1.0)*x2844*x2855))+((cj0*x2845))+((r01*x2843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2858=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x2858.valid){
continue;
}
CheckValue<IkReal> x2859=IKPowWithIntegerCheck(r12,-1);
if(!x2859.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2858.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x2859.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2858.value)))+IKsqr(((-1.0)*cj0*(x2859.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2858.value)), ((-1.0)*cj0*(x2859.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2860=IKsin(j4);
IkReal x2861=IKcos(j4);
IkReal x2862=(cj2*sj0);
IkReal x2863=(sj1*sj2);
IkReal x2864=(cj5*sj3);
IkReal x2865=(cj3*cj5);
IkReal x2866=(cj1*cj2);
IkReal x2867=(r21*sj5);
IkReal x2868=(r00*sj5);
IkReal x2869=(cj2*sj1);
IkReal x2870=(r01*sj5);
IkReal x2871=(r20*sj5);
IkReal x2872=(cj1*sj2);
IkReal x2873=((1.0)*cj0);
IkReal x2874=((1.0)*x2860);
IkReal x2875=(r20*x2861);
IkReal x2876=(r00*x2861);
IkReal x2877=(cj3*x2861);
IkReal x2878=((1.0)*x2861);
evalcond[0]=((((-1.0)*x2873))+(((-1.0)*r12*x2878)));
evalcond[1]=((((-1.0)*cj5*r20*x2874))+((x2860*x2867)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x2874))+((x2860*x2870)));
evalcond[3]=(((sj1*x2862))+((sj0*x2872))+(((-1.0)*r12*sj3*x2874)));
evalcond[4]=((((-1.0)*sj0*x2863))+((cj1*x2862))+((cj3*r12*x2860)));
evalcond[5]=((((-1.0)*x2865*x2875))+((r21*x2864))+((x2867*x2877))+x2869+x2872+((sj3*x2871)));
evalcond[6]=(((x2864*x2875))+(((-1.0)*x2866))+((r21*x2865))+((cj3*x2871))+x2863+(((-1.0)*sj3*x2867*x2878)));
evalcond[7]=(((cj0*x2872))+(((-1.0)*sj3*x2870*x2878))+((x2864*x2876))+((cj3*x2868))+((cj0*x2869))+((r01*x2865)));
evalcond[8]=((((-1.0)*x2865*x2876))+((sj3*x2868))+((x2870*x2877))+(((-1.0)*x2863*x2873))+((cj0*x2866))+((r01*x2864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2879=((1.0)*cj5);
CheckValue<IkReal> x2880 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x2879))+(((-1.0)*cj0*r00*x2879))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2880.valid){
continue;
}
CheckValue<IkReal> x2881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2879))+(((-1.0)*r20*sj5)))),-1);
if(!x2881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2880.value)+(((1.5707963267949)*(x2881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2882=IKsin(j4);
IkReal x2883=IKcos(j4);
IkReal x2884=(r11*sj5);
IkReal x2885=(cj2*sj0);
IkReal x2886=(cj5*r10);
IkReal x2887=(sj1*sj2);
IkReal x2888=(cj5*r01);
IkReal x2889=(cj5*r00);
IkReal x2890=(cj1*cj2);
IkReal x2891=(cj3*sj5);
IkReal x2892=(r21*sj5);
IkReal x2893=(cj5*sj3);
IkReal x2894=(sj3*sj5);
IkReal x2895=(cj2*sj1);
IkReal x2896=(r01*sj5);
IkReal x2897=(cj3*cj5);
IkReal x2898=(cj1*sj2);
IkReal x2899=((1.0)*cj0);
IkReal x2900=(cj5*r20);
IkReal x2901=((1.0)*x2883);
IkReal x2902=((1.0)*x2882);
IkReal x2903=(cj3*x2883);
IkReal x2904=(sj3*x2883);
IkReal x2905=(cj3*x2882);
evalcond[0]=((((-1.0)*x2900*x2902))+(((-1.0)*r22*x2901))+((x2882*x2892)));
evalcond[1]=((((-1.0)*r02*x2901))+sj0+(((-1.0)*x2889*x2902))+((x2882*x2896)));
evalcond[2]=((((-1.0)*x2886*x2902))+(((-1.0)*x2899))+(((-1.0)*r12*x2901))+((x2882*x2884)));
evalcond[3]=(((r22*x2905))+((r21*x2893))+(((-1.0)*r20*x2897*x2901))+((r21*x2883*x2891))+x2898+x2895+((r20*x2894)));
evalcond[4]=(((r21*x2897))+((r20*x2883*x2893))+(((-1.0)*x2890))+(((-1.0)*r22*sj3*x2902))+x2887+(((-1.0)*sj3*x2892*x2901))+((r20*x2891)));
evalcond[5]=((((-1.0)*r02*sj3*x2902))+((cj0*x2898))+((cj0*x2895))+((cj3*x2888))+(((-1.0)*r01*x2894*x2901))+((r00*x2891))+((x2889*x2904)));
evalcond[6]=(((sj3*x2888))+((r02*x2905))+(((-1.0)*x2887*x2899))+((cj0*x2890))+((r01*x2883*x2891))+((r00*x2894))+(((-1.0)*cj3*x2889*x2901)));
evalcond[7]=((((-1.0)*r12*sj3*x2902))+((sj0*x2898))+((sj1*x2885))+((r11*x2897))+(((-1.0)*sj3*x2884*x2901))+((r10*x2891))+((x2886*x2904)));
evalcond[8]=(((x2884*x2903))+((r11*x2893))+((cj1*x2885))+((r10*x2894))+((r12*x2905))+(((-1.0)*sj0*x2887))+(((-1.0)*cj3*x2886*x2901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2906=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2906.valid){
continue;
}
CheckValue<IkReal> x2907 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2906.value)))+(x2907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2908=IKsin(j4);
IkReal x2909=IKcos(j4);
IkReal x2910=(r11*sj5);
IkReal x2911=(cj2*sj0);
IkReal x2912=(cj5*r10);
IkReal x2913=(sj1*sj2);
IkReal x2914=(cj5*r01);
IkReal x2915=(cj5*r00);
IkReal x2916=(cj1*cj2);
IkReal x2917=(cj3*sj5);
IkReal x2918=(r21*sj5);
IkReal x2919=(cj5*sj3);
IkReal x2920=(sj3*sj5);
IkReal x2921=(cj2*sj1);
IkReal x2922=(r01*sj5);
IkReal x2923=(cj3*cj5);
IkReal x2924=(cj1*sj2);
IkReal x2925=((1.0)*cj0);
IkReal x2926=(cj5*r20);
IkReal x2927=((1.0)*x2909);
IkReal x2928=((1.0)*x2908);
IkReal x2929=(cj3*x2909);
IkReal x2930=(sj3*x2909);
IkReal x2931=(cj3*x2908);
evalcond[0]=((((-1.0)*x2926*x2928))+(((-1.0)*r22*x2927))+((x2908*x2918)));
evalcond[1]=(sj0+(((-1.0)*r02*x2927))+(((-1.0)*x2915*x2928))+((x2908*x2922)));
evalcond[2]=((((-1.0)*x2925))+(((-1.0)*r12*x2927))+(((-1.0)*x2912*x2928))+((x2908*x2910)));
evalcond[3]=(((r21*x2909*x2917))+((r22*x2931))+(((-1.0)*r20*x2923*x2927))+((r20*x2920))+((r21*x2919))+x2921+x2924);
evalcond[4]=(((r20*x2917))+((r20*x2909*x2919))+((r21*x2923))+(((-1.0)*sj3*x2918*x2927))+(((-1.0)*x2916))+(((-1.0)*r22*sj3*x2928))+x2913);
evalcond[5]=(((x2915*x2930))+((r00*x2917))+((cj3*x2914))+(((-1.0)*r02*sj3*x2928))+((cj0*x2921))+((cj0*x2924))+(((-1.0)*r01*x2920*x2927)));
evalcond[6]=(((r02*x2931))+((r01*x2909*x2917))+((sj3*x2914))+((cj0*x2916))+((r00*x2920))+(((-1.0)*cj3*x2915*x2927))+(((-1.0)*x2913*x2925)));
evalcond[7]=((((-1.0)*sj3*x2910*x2927))+((x2912*x2930))+((sj0*x2924))+((sj1*x2911))+(((-1.0)*r12*sj3*x2928))+((r11*x2923))+((r10*x2917)));
evalcond[8]=(((r11*x2919))+((x2910*x2929))+((r10*x2920))+(((-1.0)*sj0*x2913))+((cj1*x2911))+((r12*x2931))+(((-1.0)*cj3*x2912*x2927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2932=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2932.valid){
continue;
}
CheckValue<IkReal> x2933 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2932.value)))+(x2933.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2934=IKsin(j4);
IkReal x2935=IKcos(j4);
IkReal x2936=(r11*sj5);
IkReal x2937=(cj2*sj0);
IkReal x2938=(cj5*r10);
IkReal x2939=(sj1*sj2);
IkReal x2940=(cj5*r01);
IkReal x2941=(cj5*r00);
IkReal x2942=(cj1*cj2);
IkReal x2943=(cj3*sj5);
IkReal x2944=(r21*sj5);
IkReal x2945=(cj5*sj3);
IkReal x2946=(sj3*sj5);
IkReal x2947=(cj2*sj1);
IkReal x2948=(r01*sj5);
IkReal x2949=(cj3*cj5);
IkReal x2950=(cj1*sj2);
IkReal x2951=((1.0)*cj0);
IkReal x2952=(cj5*r20);
IkReal x2953=((1.0)*x2935);
IkReal x2954=((1.0)*x2934);
IkReal x2955=(cj3*x2935);
IkReal x2956=(sj3*x2935);
IkReal x2957=(cj3*x2934);
evalcond[0]=((((-1.0)*x2952*x2954))+(((-1.0)*r22*x2953))+((x2934*x2944)));
evalcond[1]=((((-1.0)*r02*x2953))+sj0+(((-1.0)*x2941*x2954))+((x2934*x2948)));
evalcond[2]=((((-1.0)*x2951))+(((-1.0)*x2938*x2954))+(((-1.0)*r12*x2953))+((x2934*x2936)));
evalcond[3]=(((r21*x2945))+((r22*x2957))+((r21*x2935*x2943))+x2950+x2947+((r20*x2946))+(((-1.0)*r20*x2949*x2953)));
evalcond[4]=(((r21*x2949))+(((-1.0)*x2942))+(((-1.0)*sj3*x2944*x2953))+((r20*x2935*x2945))+(((-1.0)*r22*sj3*x2954))+x2939+((r20*x2943)));
evalcond[5]=((((-1.0)*r01*x2946*x2953))+(((-1.0)*r02*sj3*x2954))+((cj0*x2950))+((r00*x2943))+((cj0*x2947))+((x2941*x2956))+((cj3*x2940)));
evalcond[6]=((((-1.0)*cj3*x2941*x2953))+((r00*x2946))+(((-1.0)*x2939*x2951))+((cj0*x2942))+((sj3*x2940))+((r01*x2935*x2943))+((r02*x2957)));
evalcond[7]=(((sj1*x2937))+((sj0*x2950))+((r10*x2943))+((x2938*x2956))+((r11*x2949))+(((-1.0)*sj3*x2936*x2953))+(((-1.0)*r12*sj3*x2954)));
evalcond[8]=((((-1.0)*cj3*x2938*x2953))+(((-1.0)*sj0*x2939))+((r10*x2946))+((x2936*x2955))+((r11*x2945))+((cj1*x2937))+((r12*x2957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2958=cj5*cj5;
IkReal x2959=r21*r21;
IkReal x2960=r20*r20;
IkReal x2961=(r20*r21);
IkReal x2962=((1.0)*cj3);
IkReal x2963=((1.0)*cj5);
IkReal x2964=(cj1*sj2);
IkReal x2965=(cj5*sj5);
IkReal x2966=(sj3*sj5);
IkReal x2967=(cj2*sj1);
IkReal x2968=(r21*sj5);
CheckValue<IkReal> x2969 = IKatan2WithCheck(IkReal((((r20*r22*x2966))+((cj5*r21*r22*sj3))+((r22*x2964))+((r22*x2967)))),IkReal(((((-1.0)*r20*x2963*x2964))+(((-1.0)*r20*x2963*x2967))+(((-2.0)*sj3*x2958*x2961))+((sj3*x2961))+((sj3*x2959*x2965))+((x2964*x2968))+(((-1.0)*x2960*x2963*x2966))+((x2967*x2968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2969.valid){
continue;
}
CheckValue<IkReal> x2970=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x2961*x2965))+((cj3*x2958*x2959))+(((-1.0)*x2959*x2962))+(((-1.0)*x2962*(r22*r22)))+(((-1.0)*x2958*x2960*x2962)))),-1);
if(!x2970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2969.value)+(((1.5707963267949)*(x2970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2971=IKsin(j4);
IkReal x2972=IKcos(j4);
IkReal x2973=(cj3*r21);
IkReal x2974=(r21*sj5);
IkReal x2975=(r20*sj5);
IkReal x2976=(cj5*r20);
IkReal x2977=((1.0)*x2972);
IkReal x2978=((1.0)*x2971);
evalcond[0]=(((x2971*x2974))+(((-1.0)*x2976*x2978))+(((-1.0)*r22*x2977)));
evalcond[1]=(((cj2*sj1))+((sj5*x2972*x2973))+((cj5*r21*sj3))+((cj1*sj2))+((sj3*x2975))+(((-1.0)*cj3*x2976*x2977))+((cj3*r22*x2971)));
evalcond[2]=((((-1.0)*r22*sj3*x2978))+((sj3*x2972*x2976))+(((-1.0)*sj3*x2974*x2977))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*x2973))+((cj3*x2975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2979=(cj5*sj4);
IkReal x2980=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x2980))+((r00*x2979))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2980))+(((-1.0)*r10*x2979))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2980))+((r00*x2979))+((cj4*r02))))+IKsqr((((r11*x2980))+(((-1.0)*r10*x2979))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x2980))+((r00*x2979))+((cj4*r02))), (((r11*x2980))+(((-1.0)*r10*x2979))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2981=IKsin(j0);
IkReal x2982=IKcos(j0);
IkReal x2983=(r02*sj4);
IkReal x2984=((1.0)*sj3);
IkReal x2985=(r12*sj4);
IkReal x2986=(cj3*cj4);
IkReal x2987=((1.0)*cj5);
IkReal x2988=(r11*sj5);
IkReal x2989=(cj5*r01);
IkReal x2990=(r01*sj5);
IkReal x2991=(r00*sj5);
IkReal x2992=((0.39225)*cj2);
IkReal x2993=(cj5*r11);
IkReal x2994=((1.0)*sj2);
IkReal x2995=(r10*sj5);
IkReal x2996=((1.0)*cj4);
IkReal x2997=((0.39225)*sj1*sj2);
IkReal x2998=(cj1*x2981);
IkReal x2999=(cj4*cj5*sj3);
IkReal x3000=(cj1*x2982);
IkReal x3001=(sj1*x2982);
IkReal x3002=(sj1*x2981);
evalcond[0]=(((sj4*x2990))+(((-1.0)*r00*sj4*x2987))+(((-1.0)*r02*x2996))+x2981);
evalcond[1]=((((-1.0)*r12*x2996))+(((-1.0)*x2982))+(((-1.0)*r10*sj4*x2987))+((sj4*x2988)));
evalcond[2]=(((x2982*x2997))+(((-0.09465)*x2989))+(((-0.425)*x3000))+(((-1.0)*px))+(((0.10915)*x2981))+(((-1.0)*x2992*x3000))+(((-0.09465)*x2991)));
evalcond[3]=(((x2981*x2997))+(((-1.0)*x2992*x2998))+(((-0.10915)*x2982))+(((-1.0)*py))+(((-0.09465)*x2993))+(((-0.09465)*x2995))+(((-0.425)*x2998)));
evalcond[4]=(((r00*x2999))+((cj3*x2991))+((cj3*x2989))+((cj2*x3001))+((sj2*x3000))+(((-1.0)*x2983*x2984))+(((-1.0)*cj4*x2984*x2990)));
evalcond[5]=(((cj3*x2983))+((sj3*x2989))+((x2986*x2990))+((cj2*x3000))+(((-1.0)*x2994*x3001))+(((-1.0)*r00*x2986*x2987))+((sj3*x2991)));
evalcond[6]=(((cj3*x2993))+((cj3*x2995))+(((-1.0)*x2984*x2985))+((cj2*x3002))+(((-1.0)*cj4*x2984*x2988))+((r10*x2999))+((sj2*x2998)));
evalcond[7]=((((-1.0)*r10*x2986*x2987))+((x2986*x2988))+((cj3*x2985))+((cj2*x2998))+(((-1.0)*x2994*x3002))+((sj3*x2995))+((sj3*x2993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3003=cj5*cj5;
IkReal x3004=r21*r21;
IkReal x3005=r20*r20;
IkReal x3006=(r20*r21);
IkReal x3007=(sj1*sj2);
IkReal x3008=(r21*sj5);
IkReal x3009=(cj1*cj2);
IkReal x3010=(cj5*r20);
IkReal x3011=(cj5*sj5);
IkReal x3012=(cj3*r22);
IkReal x3013=(sj3*x3004);
CheckValue<IkReal> x3014 = IKatan2WithCheck(IkReal((((r22*x3007))+((cj5*r21*x3012))+((r20*sj5*x3012))+(((-1.0)*r22*x3009)))),IkReal((((cj3*x3004*x3011))+((x3009*x3010))+(((-1.0)*cj3*x3005*x3011))+(((-2.0)*cj3*x3003*x3006))+((cj3*x3006))+((x3007*x3008))+(((-1.0)*x3007*x3010))+(((-1.0)*x3008*x3009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3014.valid){
continue;
}
CheckValue<IkReal> x3015=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x3003*x3013))+x3013+(((-2.0)*sj3*x3006*x3011))+((sj3*x3003*x3005)))),-1);
if(!x3015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3014.value)+(((1.5707963267949)*(x3015.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x3016=IKsin(j4);
IkReal x3017=IKcos(j4);
IkReal x3018=(cj3*r21);
IkReal x3019=(r21*sj5);
IkReal x3020=(r20*sj5);
IkReal x3021=(cj5*r20);
IkReal x3022=((1.0)*x3017);
IkReal x3023=((1.0)*x3016);
evalcond[0]=(((x3016*x3019))+(((-1.0)*x3021*x3023))+(((-1.0)*r22*x3022)));
evalcond[1]=(((sj3*x3020))+((cj2*sj1))+(((-1.0)*cj3*x3021*x3022))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x3016))+((sj5*x3017*x3018)));
evalcond[2]=(((cj5*x3018))+(((-1.0)*r22*sj3*x3023))+((cj3*x3020))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x3017*x3021))+(((-1.0)*sj3*x3019*x3022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3024=(cj5*sj4);
IkReal x3025=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x3025))+((r00*x3024))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x3025))+(((-1.0)*r10*x3024))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x3025))+((r00*x3024))+((cj4*r02))))+IKsqr((((r11*x3025))+(((-1.0)*r10*x3024))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x3025))+((r00*x3024))+((cj4*r02))), (((r11*x3025))+(((-1.0)*r10*x3024))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3026=IKsin(j0);
IkReal x3027=IKcos(j0);
IkReal x3028=(r02*sj4);
IkReal x3029=((1.0)*sj3);
IkReal x3030=(r12*sj4);
IkReal x3031=(cj3*cj4);
IkReal x3032=((1.0)*cj5);
IkReal x3033=(r11*sj5);
IkReal x3034=(cj5*r01);
IkReal x3035=(r01*sj5);
IkReal x3036=(r00*sj5);
IkReal x3037=((0.39225)*cj2);
IkReal x3038=(cj5*r11);
IkReal x3039=((1.0)*sj2);
IkReal x3040=(r10*sj5);
IkReal x3041=((1.0)*cj4);
IkReal x3042=((0.39225)*sj1*sj2);
IkReal x3043=(cj1*x3026);
IkReal x3044=(cj4*cj5*sj3);
IkReal x3045=(cj1*x3027);
IkReal x3046=(sj1*x3027);
IkReal x3047=(sj1*x3026);
evalcond[0]=(((sj4*x3035))+x3026+(((-1.0)*r00*sj4*x3032))+(((-1.0)*r02*x3041)));
evalcond[1]=(((sj4*x3033))+(((-1.0)*r12*x3041))+(((-1.0)*x3027))+(((-1.0)*r10*sj4*x3032)));
evalcond[2]=((((0.10915)*x3026))+(((-0.09465)*x3034))+(((-0.09465)*x3036))+(((-1.0)*px))+(((-0.425)*x3045))+((x3027*x3042))+(((-1.0)*x3037*x3045)));
evalcond[3]=((((-0.09465)*x3038))+((x3026*x3042))+(((-1.0)*py))+(((-0.09465)*x3040))+(((-0.425)*x3043))+(((-0.10915)*x3027))+(((-1.0)*x3037*x3043)));
evalcond[4]=((((-1.0)*x3028*x3029))+((cj3*x3034))+((cj3*x3036))+((sj2*x3045))+(((-1.0)*cj4*x3029*x3035))+((cj2*x3046))+((r00*x3044)));
evalcond[5]=((((-1.0)*r00*x3031*x3032))+((cj3*x3028))+(((-1.0)*x3039*x3046))+((sj3*x3034))+((sj3*x3036))+((x3031*x3035))+((cj2*x3045)));
evalcond[6]=(((cj3*x3038))+((r10*x3044))+(((-1.0)*x3029*x3030))+((sj2*x3043))+(((-1.0)*cj4*x3029*x3033))+((cj3*x3040))+((cj2*x3047)));
evalcond[7]=(((cj3*x3030))+((sj3*x3040))+(((-1.0)*r10*x3031*x3032))+(((-1.0)*x3039*x3047))+((sj3*x3038))+((x3031*x3033))+((cj2*x3043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (ecdefafb73ee0d978a6d5ad602ced6c4)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
